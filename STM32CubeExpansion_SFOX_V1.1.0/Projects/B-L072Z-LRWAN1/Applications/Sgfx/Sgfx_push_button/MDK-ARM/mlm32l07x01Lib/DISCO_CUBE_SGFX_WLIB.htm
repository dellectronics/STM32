<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\mlm32l07x01Lib\DISCO_CUBE_SGFX_WLIB.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\mlm32l07x01Lib\DISCO_CUBE_SGFX_WLIB.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Sep 18 15:04:59 2018
<BR><P>
<H3>Maximum Stack Usage =       1536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
send_data &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[60]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from mlm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from mlm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from mlm32l0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from mlm32l0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from mlm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from mlm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mlm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[27]">OnTimerDelayEvt</a> from mcu_api.o(i.OnTimerDelayEvt) referenced from mcu_api.o(i.Delay_Lp)
 <LI><a href="#[2c]">OnTimerTimeoutCsEvt</a> from st_lowlevel.o(i.OnTimerTimeoutCsEvt) referenced from mcu_api.o(i.MCU_API_timer_start_carrier_sense)
 <LI><a href="#[2b]">OnTimerTimeoutEvt</a> from mcu_api.o(i.OnTimerTimeoutEvt) referenced from mcu_api.o(i.MCU_API_timer_start)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from mlm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2d]">RADIO_rx_packet_interrupt_handler</a> from st_lowlevel.o(i.RADIO_rx_packet_interrupt_handler) referenced from st_lowlevel.o(i.STLL_Radio_IoInit)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">RNG_LPUART1_IRQHandler</a> from mlm32l0xx_it.o(i.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from mlm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2a]">SPI_DMAError</a> from stm32l0xx_hal_spi.o(i.SPI_DMAError) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[28]">SPI_DMAHalfTransmitCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[29]">SPI_DMATransmitCplt</a> from stm32l0xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[2e]">STLL_RX_SYNC_IRQHandler_CB</a> from st_lowlevel.o(i.STLL_RX_SYNC_IRQHandler_CB) referenced from st_lowlevel.o(i.STLL_Radio_IoInit)
 <LI><a href="#[3]">SVC_Handler</a> from mlm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[39]">SX1276GetWakeUpTime</a> from mlm32l07x01.o(i.SX1276GetWakeUpTime) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[3a]">SX1276IoIrqInit</a> from mlm32l07x01.o(i.SX1276IoIrqInit) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[33]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced from sx1276.o(.data)
 <LI><a href="#[34]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced from sx1276.o(.data)
 <LI><a href="#[35]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced from sx1276.o(.data)
 <LI><a href="#[36]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced from sx1276.o(.data)
 <LI><a href="#[37]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced from sx1276.o(.data)
 <LI><a href="#[2f]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[3d]">SX1276SetAntSw</a> from mlm32l07x01.o(i.SX1276SetAntSw) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[3c]">SX1276SetAntSwLowPower</a> from mlm32l07x01.o(i.SX1276SetAntSwLowPower) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[3b]">SX1276SetRfTxPower</a> from mlm32l07x01.o(i.SX1276SetRfTxPower) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[38]">SX1276SetXO</a> from mlm32l07x01.o(i.SX1276SetXO) referenced from mlm32l07x01.o(.data)
 <LI><a href="#[5]">SysTick_Handler</a> from mlm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[19]">TIM21_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[30]">TX_read_Bit</a> from sgfxsx1276modulation-lib.o(i.TX_read_Bit) referenced from sgfxsx1276modulation-lib.o(i.TX_Start)
 <LI><a href="#[20]">USART1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[24]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[32]">send_data</a> from main.o(i.send_data) referenced from main.o(i.main)
 <LI><a href="#[31]">send_data_request</a> from main.o(i.send_data_request) referenced from main.o(i.main)
 <LI><a href="#[31]">send_data_request</a> from main.o(i.send_data_request) referenced from main.o(i.send_data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[189]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[48]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[18b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[18c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[18d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[18e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_min
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_macro_channel_index
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_key
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_initial_pac
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_dev_id
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IoDeInitAll
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_DeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[168]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
</UL>

<P><STRONG><a name="[195]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[197]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[198]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[199]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>BSP_LED_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, b-l072z-lrwan1.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>BSP_LED_Off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, b-l072z-lrwan1.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
</UL>

<P><STRONG><a name="[50]"></a>BSP_LED_On</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, b-l072z-lrwan1.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
</UL>

<P><STRONG><a name="[b5]"></a>BSP_sensor_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.BSP_sensor_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[51]"></a>DBG_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, debug.o(i.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA1_Channel2_3_IRQHandler &rArr; STLL_TX_IRQHandler_CB &rArr; STLL_Transmit_DMA_Stop &rArr; HW_SPI_Transmit_DMA_Stop &rArr; HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_ClearIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; vcom_Dma_IRQHandler &rArr; vcom_PrintDMA &rArr; vcom_StartDMA &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Dma_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[62]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[63]"></a>HAL_ADC_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
</UL>

<P><STRONG><a name="[64]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[65]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[66]"></a>HAL_ADC_Start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[53]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[55]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[54]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[67]"></a>HAL_DMA_Abort</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
</UL>

<P><STRONG><a name="[90]"></a>HAL_DMA_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[68]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[5e]"></a>HAL_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mlm32l0xx_hal_msp.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_Delay &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetXO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
</UL>

<P><STRONG><a name="[a4]"></a>HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Lock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Init
</UL>

<P><STRONG><a name="[6b]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_hal_msp.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IoDeInitAll
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
</UL>

<P><STRONG><a name="[4f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[4b]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[15a]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6d]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HW_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlm32l0xx_hal_msp.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6f]"></a>HAL_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mlm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MspInit &rArr; HW_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_StartDMA
</UL>

<P><STRONG><a name="[16c]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_GetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[74]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_StartDMA
</UL>

<P><STRONG><a name="[72]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[71]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[70]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[e3]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
</UL>

<P><STRONG><a name="[e2]"></a>HAL_PWR_EnterSTANDBYMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTANDBYMode))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
</UL>

<P><STRONG><a name="[e5]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[76]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[77]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[78]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[79]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1116 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_EnableBypassShadow
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_hal_msp.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_RTC_DeInit</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_DeInit &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DeInit
</UL>

<P><STRONG><a name="[81]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[84]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[85]"></a>HAL_RTC_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[80]"></a>HAL_RTC_MspDeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mlm32l0xx_hal_msp.o(i.HAL_RTC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>

<P><STRONG><a name="[86]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, mlm32l0xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>

<P><STRONG><a name="[7f]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Stop
</UL>

<P><STRONG><a name="[13f]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[8d]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mlm32l0xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[93]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Start
</UL>

<P><STRONG><a name="[141]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[140]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[94]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_SetPeriod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlm32l0xx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Start
</UL>

<P><STRONG><a name="[9e]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Stop
</UL>

<P><STRONG><a name="[9f]"></a>HW_AdcInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.HW_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_AdcInit &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[a0]"></a>HW_AdcReadChannel</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mlm32l0xx_hw.o(i.HW_AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
</UL>

<P><STRONG><a name="[a2]"></a>HW_EEPROM_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hw_eeprom.o(i.HW_EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_EEPROM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HW_EEPROM_Lock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw_eeprom.o(i.HW_EEPROM_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_EEPROM_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_set_nv_mem
</UL>

<P><STRONG><a name="[a8]"></a>HW_EEPROM_Unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_eeprom.o(i.HW_EEPROM_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_EEPROM_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_set_nv_mem
</UL>

<P><STRONG><a name="[a9]"></a>HW_GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>

<P><STRONG><a name="[6c]"></a>HW_GPIO_IrqHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[ab]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hw_gpio.o(i.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_GetBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoDeInit
</UL>

<P><STRONG><a name="[ad]"></a>HW_GPIO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_gpio.o(i.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetXO
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>

<P><STRONG><a name="[ae]"></a>HW_GetBatteryLevel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.HW_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_voltage_temperature
</UL>

<P><STRONG><a name="[af]"></a>HW_GetTemperatureLevel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mlm32l0xx_hw.o(i.HW_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HW_GetTemperatureLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_voltage_temperature
</UL>

<P><STRONG><a name="[73]"></a>HW_GpioInit</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, mlm32l0xx_hw.o(i.HW_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[b0]"></a>HW_Init</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, mlm32l0xx_hw.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HW_Init &rArr; HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>HW_RTC_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_RTC_DeInit &rArr; HAL_RTC_DeInit &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
</UL>

<P><STRONG><a name="[6a]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[161]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[160]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_rtc.o(i.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[bd]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[bb]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>

<P><STRONG><a name="[b2]"></a>HW_RTC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HW_RTC_Init &rArr; HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[c0]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[bf]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[c5]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StartWakeUpAlarm
</UL>

<P><STRONG><a name="[c6]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_rtc.o(i.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>

<P><STRONG><a name="[56]"></a>HW_SPI_ClearIRQ</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, hw_spi.o(i.HW_SPI_ClearIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_SPI_ClearIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HW_SPI_InOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[b1]"></a>HW_SPI_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hw_spi.o(i.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HW_SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[8f]"></a>HW_SPI_IoInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hw_spi.o(i.HW_SPI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[c8]"></a>HW_SPI_IoNssHwInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_IoNssHwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_SPI_IoNssHwInit &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Start
</UL>

<P><STRONG><a name="[cc]"></a>HW_SPI_IoNssSwInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_IoNssSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_SPI_IoNssSwInit &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Stop
</UL>

<P><STRONG><a name="[cd]"></a>HW_SPI_Transmit_DMA_Start</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hw_spi.o(i.HW_SPI_Transmit_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_SPI_Transmit_DMA_Start &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssHwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Transmit_DMA_Start
</UL>

<P><STRONG><a name="[ce]"></a>HW_SPI_Transmit_DMA_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hw_spi.o(i.HW_SPI_Transmit_DMA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_SPI_Transmit_DMA_Stop &rArr; HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssSwInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Transmit_DMA_Stop
</UL>

<P><STRONG><a name="[146]"></a>HW_SetHSEasSysClock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mlm32l0xx_hw.o(i.HW_SetHSEasSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetClockSource
</UL>

<P><STRONG><a name="[147]"></a>HW_SetHSIasSysClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.HW_SetHSIasSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_SetHSIasSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetClockSource
</UL>

<P><STRONG><a name="[b3]"></a>HW_TIM2_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, hw_tim2.o(i.HW_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HW_TIM2_Init &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[cf]"></a>HW_TIM2_SetPeriod</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hw_tim2.o(i.HW_TIM2_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HW_TIM2_SetPeriod &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_SetPeriod
</UL>

<P><STRONG><a name="[d0]"></a>HW_TIM2_Start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_tim2.o(i.HW_TIM2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_TIM2_Start &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_Start
</UL>

<P><STRONG><a name="[d1]"></a>HW_TIM2_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hw_tim2.o(i.HW_TIM2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_TIM2_Stop &rArr; HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_Stop
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>LL_DMA_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32l0xx_ll_dma.o(i.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_StartDMA
</UL>

<P><STRONG><a name="[d4]"></a>LL_LPUART_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l0xx_ll_lpuart.o(i.LL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_LPUART_Init &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[d5]"></a>LL_RCC_GetLPUARTClockFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetLPUARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_RCC_GetLPUARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
</UL>

<P><STRONG><a name="[db]"></a>LPM_EnterLowPower</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitSleepMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Idle
</UL>

<P><STRONG><a name="[e0]"></a>LPM_EnterOffMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.LPM_EnterOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPM_EnterOffMode &rArr; HW_IoDeInitAll &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTANDBYMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IoDeInitAll
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[dc]"></a>LPM_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.LPM_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[de]"></a>LPM_EnterStopMode</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mlm32l0xx_hw.o(i.LPM_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[e1]"></a>LPM_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[dd]"></a>LPM_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(i.LPM_ExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[df]"></a>LPM_ExitStopMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mlm32l0xx_hw.o(i.LPM_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LPM_ExitStopMode &rArr; SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[164]"></a>LPM_SetOffMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>LPM_SetStopMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, low_power_manager.o(i.LPM_SetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_PrintDMA
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_LowPower
</UL>

<P><STRONG><a name="[e6]"></a>MCU_API_delay</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, mcu_api.o(i.MCU_API_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MCU_API_delay &rArr; Delay_Lp &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[124]"></a>MCU_API_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.MCU_API_free))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[122]"></a>MCU_API_get_nv_mem</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_api.o(i.MCU_API_get_nv_mem))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[e7]"></a>MCU_API_get_voltage_temperature</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mcu_api.o(i.MCU_API_get_voltage_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MCU_API_get_voltage_temperature &rArr; HW_GetTemperatureLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[123]"></a>MCU_API_malloc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_api.o(i.MCU_API_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>

<P><STRONG><a name="[e8]"></a>MCU_API_report_test_result</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mcu_api.o(i.MCU_API_report_test_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = MCU_API_report_test_result &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[ea]"></a>MCU_API_set_nv_mem</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mcu_api.o(i.MCU_API_set_nv_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCU_API_set_nv_mem &rArr; HW_EEPROM_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Unlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_store_nvm
</UL>

<P><STRONG><a name="[eb]"></a>MCU_API_timer_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mcu_api.o(i.MCU_API_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MCU_API_timer_start &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[ec]"></a>MCU_API_timer_start_carrier_sense</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu_api.o(i.MCU_API_timer_start_carrier_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MCU_API_timer_start_carrier_sense &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[ed]"></a>MCU_API_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(i.MCU_API_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MCU_API_timer_stop &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[ef]"></a>MCU_API_timer_stop_carrier_sense</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(i.MCU_API_timer_stop_carrier_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MCU_API_timer_stop_carrier_sense &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[f0]"></a>MCU_API_timer_wait_for_end</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(i.MCU_API_timer_wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MCU_API_timer_wait_for_end &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[ac]"></a>MSP_GetIRQn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mlm32l0xx_hal_msp.o(i.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mlm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>OnTimerTimeoutCsEvt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_lowlevel.o(i.OnTimerTimeoutCsEvt))
<BR>[Address Reference Count : 1]<UL><LI> mcu_api.o(i.MCU_API_timer_start_carrier_sense)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mlm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[d9]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[d7]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[f2]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[120]"></a>RETURN_CODE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sigfox_internal.o(i.RETURN_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
</UL>

<P><STRONG><a name="[f3]"></a>RF_API_change_frequency</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_api.o(i.RF_API_change_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_API_change_frequency &rArr; STLL_Radio_SetFreq &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[f5]"></a>RF_API_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rf_api.o(i.RF_API_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RF_API_init &rArr; SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_setbw
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_config
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[f9]"></a>RF_API_send</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rf_api.o(i.RF_API_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RF_API_send &rArr; SGFX_SX1276_tx &rArr; STLL_WaitEndOfTxFrame &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
</UL>

<P><STRONG><a name="[fb]"></a>RF_API_stop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_api.o(i.RF_API_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RF_API_stop &rArr; SGFX_SX1276_stop &rArr; STLL_Radio_DeInit &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[fd]"></a>RF_API_wait_for_clear_channel</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, rf_api.o(i.RF_API_wait_for_clear_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RF_API_wait_for_clear_channel &rArr; SGFX_SX1276_rx_start &rArr; STLL_Radio_SetOpMode &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RxCarrierSenseInitStatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RxCarrierSenseGetStatus
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RxCarrierSenseGetRssi
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
</UL>

<P><STRONG><a name="[102]"></a>RF_API_wait_frame</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rf_api.o(i.RF_API_wait_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RF_API_wait_frame &rArr; STLL_WaitEndOfRxFrame &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_WaitEndOfRxFrame
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SGFX_SX1276_GetSyncRssi
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>

<P><STRONG><a name="[22]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; vcom_IRQHandler &rArr; LPM_SetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[89]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[7e]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeInit
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>RxChainCalibration</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[150]"></a>SCH_ClrEvt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scheduler.o(i.SCH_ClrEvt))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_WaitEndOfRxFrame
</UL>

<P><STRONG><a name="[10a]"></a>SCH_EvtIdle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler.o(i.SCH_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_WaitEvt
</UL>

<P><STRONG><a name="[10c]"></a>SCH_Idle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.SCH_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Run
</UL>

<P><STRONG><a name="[165]"></a>SCH_RegTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler.o(i.SCH_RegTask))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>SCH_Run</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, scheduler.o(i.SCH_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_EvtIdle
</UL>

<P><STRONG><a name="[f1]"></a>SCH_SetEvt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scheduler.o(i.SCH_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetEndOfTxFrame
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_rx_packet_interrupt_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTimerTimeoutEvt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTimerDelayEvt
</UL>

<P><STRONG><a name="[166]"></a>SCH_SetTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scheduler.o(i.SCH_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_request
</UL>

<P><STRONG><a name="[5d]"></a>SCH_WaitEvt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.SCH_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_WaitEndOfTxFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_WaitEndOfRxFrame
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
</UL>

<P><STRONG><a name="[17a]"></a>SE_NVM_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, se_nvm.o(i.SE_NVM_get))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[16f]"></a>SE_NVM_get_key_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, se_nvm.o(i.SE_NVM_get_key_type))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[10d]"></a>SE_NVM_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, se_nvm.o(i.SE_NVM_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SE_NVM_set &rArr; HW_EEPROM_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Unlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[f7]"></a>SGFX_SX1276_rx_config</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_rx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_WriteReg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[f8]"></a>SGFX_SX1276_rx_setbw</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_rx_setbw))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SGFX_SX1276_rx_setbw &rArr; STLL_Radio_WriteReg &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[ff]"></a>SGFX_SX1276_rx_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SGFX_SX1276_rx_start &rArr; STLL_Radio_SetOpMode &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
</UL>

<P><STRONG><a name="[104]"></a>SGFX_SX1276_rx_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_rx_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SGFX_SX1276_rx_stop &rArr; STLL_Radio_ReadReg &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
</UL>

<P><STRONG><a name="[fc]"></a>SGFX_SX1276_stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SGFX_SX1276_stop &rArr; STLL_Radio_DeInit &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetOpMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoDeInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
</UL>

<P><STRONG><a name="[fa]"></a>SGFX_SX1276_tx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SGFX_SX1276_tx &rArr; STLL_WaitEndOfTxFrame &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_WaitEndOfTxFrame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetOpMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RadioPowerGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
</UL>

<P><STRONG><a name="[f6]"></a>SGFX_SX1276_tx_config</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sgfxsx1276modulation-lib.o(i.SGFX_SX1276_tx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SGFX_SX1276_tx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_WriteReg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RadioPowerSetBoard
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RadioPowerGet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
</UL>

<P><STRONG><a name="[11a]"></a>SIGFOX_API_get_device_id</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sigfox_api.o(i.SIGFOX_API_get_device_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = SIGFOX_API_get_device_id &rArr; SIGFOX_INT_get_device_id &rArr; SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>SIGFOX_API_get_initial_pac</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sigfox_api.o(i.SIGFOX_API_get_initial_pac))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SIGFOX_API_get_initial_pac &rArr; SE_API_get_initial_pac &rArr; CREDENTIALS_get_initial_pac &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_open
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_get_initial_pac
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_close
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>SIGFOX_API_open</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, sigfox_api.o(i.SIGFOX_API_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = SIGFOX_API_open &rArr; SIGFOX_INT_get_device_id &rArr; SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_malloc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_nv_mem
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_free
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETURN_CODE
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sigfox_open
</UL>

<P><STRONG><a name="[125]"></a>SIGFOX_API_send_frame</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sigfox_api.o(i.SIGFOX_API_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[127]"></a>SIGFOX_API_set_std_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sigfox_api.o(i.SIGFOX_API_set_std_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGFOX_API_set_std_config &rArr; SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sigfox_open
</UL>

<P><STRONG><a name="[129]"></a>SIGFOX_INT_build_frame</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, sigfox_internal.o(i.SIGFOX_INT_build_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_get_voltage_temperature
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_open
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_close
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
</UL>

<P><STRONG><a name="[13c]"></a>SIGFOX_INT_compute_carrier_sense_frequency</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sigfox_internal.o(i.SIGFOX_INT_compute_carrier_sense_frequency))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[12c]"></a>SIGFOX_INT_compute_channels</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, sigfox_internal.o(i.SIGFOX_INT_compute_channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SIGFOX_INT_compute_channels &rArr; SIGFOX_INT_dc_lbt_channel_pn_max &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_PN_next_pn
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_randomize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_min
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_dc_lbt_channel_pn_max
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
</UL>

<P><STRONG><a name="[131]"></a>SIGFOX_INT_compute_uplink_frequency</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sigfox_internal.o(i.SIGFOX_INT_compute_uplink_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SIGFOX_INT_compute_uplink_frequency &rArr; SIGFOX_INT_get_macro_channel_index &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_macro_channel_index
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[12e]"></a>SIGFOX_INT_dc_lbt_channel_pn_max</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sigfox_internal.o(i.SIGFOX_INT_dc_lbt_channel_pn_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SIGFOX_INT_dc_lbt_channel_pn_max &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[12f]"></a>SIGFOX_INT_dc_lbt_channel_pn_min</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sigfox_internal.o(i.SIGFOX_INT_dc_lbt_channel_pn_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SIGFOX_INT_dc_lbt_channel_pn_min &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[133]"></a>SIGFOX_INT_downlink_configuration</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sigfox_internal.o(i.SIGFOX_INT_downlink_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SIGFOX_INT_downlink_configuration &rArr; RF_API_init &rArr; SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_open
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[134]"></a>SIGFOX_INT_execute_carrier_sense</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sigfox_internal.o(i.SIGFOX_INT_execute_carrier_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SIGFOX_INT_execute_carrier_sense &rArr; RF_API_init &rArr; SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[126]"></a>SIGFOX_INT_execute_communication_sequence</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, sigfox_internal.o(i.SIGFOX_INT_execute_communication_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_store_nvm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_prepare_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
</UL>

<P><STRONG><a name="[11b]"></a>SIGFOX_INT_get_device_id</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sigfox_internal.o(i.SIGFOX_INT_get_device_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = SIGFOX_INT_get_device_id &rArr; SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_get_device_id
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_open
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_close
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_device_id
</UL>

<P><STRONG><a name="[132]"></a>SIGFOX_INT_get_macro_channel_index</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sigfox_internal.o(i.SIGFOX_INT_get_macro_channel_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SIGFOX_INT_get_macro_channel_index &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
</UL>

<P><STRONG><a name="[128]"></a>SIGFOX_INT_get_max_micro_channel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sigfox_internal.o(i.SIGFOX_INT_get_max_micro_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIGFOX_INT_get_max_micro_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_set_std_config
</UL>

<P><STRONG><a name="[13a]"></a>SIGFOX_INT_get_received_frames</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, sigfox_internal.o(i.SIGFOX_INT_get_received_frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = SIGFOX_INT_get_received_frames &rArr; SE_API_verify_downlink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_close
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_downlink
</UL>

<P><STRONG><a name="[135]"></a>SIGFOX_INT_prepare_transmission</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sigfox_internal.o(i.SIGFOX_INT_prepare_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[138]"></a>SIGFOX_INT_process_downlink</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sigfox_internal.o(i.SIGFOX_INT_process_downlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = SIGFOX_INT_process_downlink &rArr; SIGFOX_INT_get_received_frames &rArr; SE_API_verify_downlink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[137]"></a>SIGFOX_INT_process_uplink</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, sigfox_internal.o(i.SIGFOX_INT_process_uplink))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SIGFOX_INT_process_uplink &rArr; SIGFOX_INT_send_single_frame &rArr; RF_API_init &rArr; SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_wait_for_end
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_carrier_sense
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_carrier_sense_frequency
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_uplink_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[12d]"></a>SIGFOX_INT_randomize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sigfox_internal.o(i.SIGFOX_INT_randomize))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[13d]"></a>SIGFOX_INT_send_single_frame</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, sigfox_internal.o(i.SIGFOX_INT_send_single_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SIGFOX_INT_send_single_frame &rArr; RF_API_init &rArr; SGFX_SX1276_rx_config &rArr; STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_SCRAMB_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_process_uplink
</UL>

<P><STRONG><a name="[136]"></a>SIGFOX_INT_store_nvm</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sigfox_internal.o(i.SIGFOX_INT_store_nvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SIGFOX_INT_store_nvm &rArr; MCU_API_set_nv_mem &rArr; HW_EEPROM_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_set_nv_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_execute_communication_sequence
</UL>

<P><STRONG><a name="[130]"></a>SIGFOX_PN_next_pn</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sigfox_pn.o(i.SIGFOX_PN_next_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_PN_next_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_compute_channels
</UL>

<P><STRONG><a name="[13e]"></a>SIGFOX_SCRAMB_compute</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, sigfox_scramb.o(i.SIGFOX_SCRAMB_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIGFOX_SCRAMB_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_send_single_frame
</UL>

<P><STRONG><a name="[142]"></a>STLL_LowPower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_LowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STLL_LowPower &rArr; LPM_SetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[116]"></a>STLL_RadioPowerGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_lowlevel.o(i.STLL_RadioPowerGet))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx
</UL>

<P><STRONG><a name="[119]"></a>STLL_RadioPowerSetBoard</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_RadioPowerSetBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STLL_RadioPowerSetBoard &rArr; SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
</UL>

<P><STRONG><a name="[114]"></a>STLL_Radio_DeInit</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, st_lowlevel.o(i.STLL_Radio_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = STLL_Radio_DeInit &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_stop
</UL>

<P><STRONG><a name="[10e]"></a>STLL_Radio_Init</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, st_lowlevel.o(i.STLL_Radio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = STLL_Radio_Init &rArr; SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_config
</UL>

<P><STRONG><a name="[115]"></a>STLL_Radio_IoDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STLL_Radio_IoDeInit &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_stop
</UL>

<P><STRONG><a name="[110]"></a>STLL_Radio_IoInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STLL_Radio_IoInit &rArr; SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_config
</UL>

<P><STRONG><a name="[113]"></a>STLL_Radio_ReadFifo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STLL_Radio_ReadFifo &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_stop
</UL>

<P><STRONG><a name="[112]"></a>STLL_Radio_ReadReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = STLL_Radio_ReadReg &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RX_SYNC_IRQHandler_CB
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RxCarrierSenseGetRssi
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_stop
</UL>

<P><STRONG><a name="[f4]"></a>STLL_Radio_SetFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_SetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STLL_Radio_SetFreq &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_change_frequency
</UL>

<P><STRONG><a name="[111]"></a>STLL_Radio_SetOpMode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = STLL_Radio_SetOpMode &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_start
</UL>

<P><STRONG><a name="[10f]"></a>STLL_Radio_WriteReg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Radio_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STLL_Radio_WriteReg &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_setbw
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_rx_config
</UL>

<P><STRONG><a name="[100]"></a>STLL_RxCarrierSenseGetRssi</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_RxCarrierSenseGetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STLL_RxCarrierSenseGetRssi &rArr; STLL_Radio_ReadReg &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
</UL>

<P><STRONG><a name="[101]"></a>STLL_RxCarrierSenseGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st_lowlevel.o(i.STLL_RxCarrierSenseGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
</UL>

<P><STRONG><a name="[fe]"></a>STLL_RxCarrierSenseInitStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_lowlevel.o(i.STLL_RxCarrierSenseInitStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_for_clear_channel
</UL>

<P><STRONG><a name="[105]"></a>STLL_SGFX_SX1276_GetSyncRssi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st_lowlevel.o(i.STLL_SGFX_SX1276_GetSyncRssi))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
</UL>

<P><STRONG><a name="[145]"></a>STLL_SetClockSource</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STLL_SetClockSource &rArr; HW_SetHSIasSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SetHSIasSysClock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SetHSEasSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[148]"></a>STLL_SetEndOfTxFrame</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_SetEndOfTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STLL_SetEndOfTxFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
</UL>

<P><STRONG><a name="[149]"></a>STLL_TIM2_SetPeriod</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_TIM2_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = STLL_TIM2_SetPeriod &rArr; HW_TIM2_SetPeriod &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[14a]"></a>STLL_TIM2_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_TIM2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STLL_TIM2_Start &rArr; HW_TIM2_Start &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[14b]"></a>STLL_TIM2_Stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_TIM2_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = STLL_TIM2_Stop &rArr; HW_TIM2_Stop &rArr; HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TIM2_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
</UL>

<P><STRONG><a name="[57]"></a>STLL_TX_IRQHandler_CB</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sgfxsx1276modulation-lib.o(i.STLL_TX_IRQHandler_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = STLL_TX_IRQHandler_CB &rArr; STLL_Transmit_DMA_Stop &rArr; HW_SPI_Transmit_DMA_Stop &rArr; HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Transmit_DMA_Stop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_Stop
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetEndOfTxFrame
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetClockSource
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_LowPower
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Write_RampDown_Buffer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Write_Modu_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>STLL_Transmit_DMA_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Transmit_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STLL_Transmit_DMA_Start &rArr; HW_SPI_Transmit_DMA_Start &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[14e]"></a>STLL_Transmit_DMA_Stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_Transmit_DMA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STLL_Transmit_DMA_Stop &rArr; HW_SPI_Transmit_DMA_Stop &rArr; HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Transmit_DMA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
</UL>

<P><STRONG><a name="[103]"></a>STLL_WaitEndOfRxFrame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_WaitEndOfRxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STLL_WaitEndOfRxFrame &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_ClrEvt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_API_wait_frame
</UL>

<P><STRONG><a name="[118]"></a>STLL_WaitEndOfTxFrame</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_WaitEndOfTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STLL_WaitEndOfTxFrame &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mlm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>SX1276BoardInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>

<P><STRONG><a name="[158]"></a>SX1276GetPaSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlm32l07x01.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[39]"></a>SX1276GetWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mlm32l07x01.o(i.SX1276GetWakeUpTime))
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>SX1276Init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>SX1276IoDeInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mlm32l07x01.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoDeInit
</UL>

<P><STRONG><a name="[b6]"></a>SX1276IoInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mlm32l07x01.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276BoardInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_IoInit
</UL>

<P><STRONG><a name="[3a]"></a>SX1276IoIrqInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlm32l07x01.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276IoIrqInit &rArr; HW_GPIO_SetIrq &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 594 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SX1276OnDio0Irq &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SX1276OnDio1Irq &rArr; vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[108]"></a>SX1276Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadReg
</UL>

<P><STRONG><a name="[143]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadFifo
</UL>

<P><STRONG><a name="[154]"></a>SX1276ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[151]"></a>SX1276Reset</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SX1276Reset &rArr; HAL_Delay &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[3d]"></a>SX1276SetAntSw</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mlm32l07x01.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276SetAntSw &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, mlm32l07x01.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276SetAntSwLowPower &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>SX1276SetChannel</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetFreq
</UL>

<P><STRONG><a name="[152]"></a>SX1276SetModem</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[144]"></a>SX1276SetOpMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_SetOpMode
</UL>

<P><STRONG><a name="[156]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>

<P><STRONG><a name="[3b]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, mlm32l07x01.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_RadioPowerSetBoard
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[157]"></a>SX1276SetSleep</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276SetSleep &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>

<P><STRONG><a name="[38]"></a>SX1276SetXO</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mlm32l07x01.o(i.SX1276SetXO))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SX1276SetXO &rArr; HAL_Delay &rArr; HW_RTC_DelayMs &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mlm32l07x01.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>SX1276Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_WriteReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_DeInit
</UL>

<P><STRONG><a name="[159]"></a>SX1276WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>

<P><STRONG><a name="[155]"></a>SX1276WriteFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mlm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, mlm32l0xx_hw.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>TX_Start</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sgfxsx1276modulation-lib.o(i.TX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TX_Start &rArr; STLL_Transmit_DMA_Start &rArr; HW_SPI_Transmit_DMA_Start &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Transmit_DMA_Start
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_Start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TIM2_SetPeriod
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_SetClockSource
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_LowPower
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Write_RampUp_Buffer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_SetPower
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SGFX_SX1276_tx
</UL>

<P><STRONG><a name="[5a]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
</UL>

<P><STRONG><a name="[7c]"></a>TimerIrqHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, timeserver.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[5b]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
</UL>

<P><STRONG><a name="[5c]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timeserver.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start_carrier_sense
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Lp
</UL>

<P><STRONG><a name="[ee]"></a>TimerStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timeserver.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop_carrier_sense
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_timer_stop
</UL>

<P><STRONG><a name="[12a]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[19a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = main &rArr; st_sigfox_open &rArr; SIGFOX_API_open &rArr; SIGFOX_INT_get_device_id &rArr; SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_device_id
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_Run
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_RegTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Unlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Lock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EEPROM_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sigfox_open
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[167]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, tiny_vsnprintf.o(i.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ee_number
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
</UL>

<P><STRONG><a name="[58]"></a>vcom_Dma_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, vcom.o(i.vcom_Dma_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vcom_Dma_IRQHandler &rArr; vcom_PrintDMA &rArr; vcom_StartDMA &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_PrintDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>vcom_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, vcom.o(i.vcom_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vcom_IRQHandler &rArr; LPM_SetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>vcom_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, vcom.o(i.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vcom_Init &rArr; LL_LPUART_Init &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPUART_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[16a]"></a>vcom_IoInit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, vcom.o(i.vcom_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vcom_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[e9]"></a>vcom_Send</STRONG> (Thumb, 244 bytes, Stack size 168 bytes, vcom.o(i.vcom_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = vcom_Send &rArr; tiny_vsnprintf_like &rArr; ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_GetPendingIRQ
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Dma_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_PrintDMA
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_report_test_result
</UL>

<P><STRONG><a name="[16e]"></a>CREDENTIALS_aes_128_cbc_encrypt</STRONG> (Thumb, 72 bytes, Stack size 304 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_aes_128_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_get_key_type
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
</UL>

<P><STRONG><a name="[173]"></a>CREDENTIALS_aes_128_cbc_encrypt_with_session_key</STRONG> (Thumb, 52 bytes, Stack size 280 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_aes_128_cbc_encrypt_with_session_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CREDENTIALS_aes_128_cbc_encrypt_with_session_key &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
</UL>

<P><STRONG><a name="[177]"></a>CREDENTIALS_get_dev_id</STRONG> (Thumb, 30 bytes, Stack size 56 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_get_device_id
</UL>

<P><STRONG><a name="[178]"></a>CREDENTIALS_get_initial_pac</STRONG> (Thumb, 30 bytes, Stack size 56 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_initial_pac))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = CREDENTIALS_get_initial_pac &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_get_initial_pac
</UL>

<P><STRONG><a name="[17b]"></a>CREDENTIALS_get_payload_encryption_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_payload_encryption_flag))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[179]"></a>CREDENTIALS_wrap_session_key</STRONG> (Thumb, 66 bytes, Stack size 296 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_wrap_session_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = CREDENTIALS_wrap_session_key &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_key
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
</UL>

<P><STRONG><a name="[11f]"></a>SE_API_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sgfx_cmac_lib.o(i.SE_API_close))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id
</UL>

<P><STRONG><a name="[139]"></a>SE_API_get_device_id</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sgfx_cmac_lib.o(i.SE_API_get_device_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_dev_id
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id
</UL>

<P><STRONG><a name="[11e]"></a>SE_API_get_initial_pac</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sgfx_cmac_lib.o(i.SE_API_get_initial_pac))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = SE_API_get_initial_pac &rArr; CREDENTIALS_get_initial_pac &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_initial_pac
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
</UL>

<P><STRONG><a name="[11d]"></a>SE_API_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sgfx_cmac_lib.o(i.SE_API_open))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_get_initial_pac
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_device_id
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_downlink_configuration
</UL>

<P><STRONG><a name="[12b]"></a>SE_API_secure_uplink_message</STRONG> (Thumb, 496 bytes, Stack size 136 bytes, sgfx_cmac_lib.o(i.SE_API_secure_uplink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_payload_encryption_flag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_dev_id
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_HMAC_compute_aes
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_build_frame
</UL>

<P><STRONG><a name="[13b]"></a>SE_API_verify_downlink_message</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, sgfx_cmac_lib.o(i.SE_API_verify_downlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = SE_API_verify_downlink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_payload_encryption_flag
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_dev_id
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_encrypt_decrypt_frame
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_INT_get_received_frames
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>SPI_DMAError</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[28]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[29]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[92]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[49]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[4a]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[7a]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[75]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[69]"></a>DMA_SetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[9b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[9d]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[95]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[96]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[97]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[98]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32l0xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[da]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[d6]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetLPUARTClockFreq
</UL>

<P><STRONG><a name="[d3]"></a>LL_DMA_SetPeriphRequest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l0xx_ll_dma.o(i.LL_DMA_SetPeriphRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetPeriphRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[aa]"></a>HW_GPIO_GetBitPos</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hw_gpio.o(i.HW_GPIO_GetBitPos))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>

<P><STRONG><a name="[bc]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hw_rtc.o(i.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
</UL>

<P><STRONG><a name="[be]"></a>HW_RTC_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, hw_rtc.o(i.HW_RTC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_RTC_SetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[c3]"></a>HW_RTC_StartWakeUpAlarm</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, hw_rtc.o(i.HW_RTC_StartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[c9]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_spi.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssSwInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssHwInit
</UL>

<P><STRONG><a name="[cb]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_spi.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssSwInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssHwInit
</UL>

<P><STRONG><a name="[ca]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_spi.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssSwInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoNssHwInit
</UL>

<P><STRONG><a name="[32]"></a>send_data</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, main.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = send_data &rArr; SIGFOX_API_send_frame &rArr; SIGFOX_INT_execute_communication_sequence &rArr; SIGFOX_INT_prepare_transmission &rArr; SIGFOX_INT_build_frame &rArr; SE_API_secure_uplink_message &rArr; SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_send_frame
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[31]"></a>send_data_request</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.send_data_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_data_request
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetTask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.main)
<LI> main.o(i.send_data)
</UL>
<P><STRONG><a name="[163]"></a>st_sigfox_open</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(i.st_sigfox_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = st_sigfox_open &rArr; SIGFOX_API_open &rArr; SIGFOX_INT_get_device_id &rArr; SE_API_get_device_id &rArr; CREDENTIALS_get_dev_id &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_set_std_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_API_open
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>vcom_PrintDMA</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vcom.o(i.vcom_PrintDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vcom_PrintDMA &rArr; vcom_StartDMA &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_StartDMA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Dma_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>vcom_StartDMA</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, vcom.o(i.vcom_StartDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vcom_StartDMA &rArr; LL_DMA_Init &rArr; LL_DMA_SetPeriphRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_PrintDMA
</UL>

<P><STRONG><a name="[b9]"></a>HW_IoDeInitAll</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, mlm32l0xx_hw.o(i.HW_IoDeInitAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_IoDeInitAll &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
</UL>

<P><STRONG><a name="[162]"></a>ee_number</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, tiny_vsnprintf.o(i.ee_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ee_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>

<P><STRONG><a name="[59]"></a>Delay_Lp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mcu_api.o(i.Delay_Lp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Delay_Lp &rArr; SCH_WaitEvt &rArr; SCH_EvtIdle &rArr; SCH_Run &rArr; SCH_Idle &rArr; LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_WaitEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_API_delay
</UL>

<P><STRONG><a name="[27]"></a>OnTimerDelayEvt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu_api.o(i.OnTimerDelayEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnTimerDelayEvt
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu_api.o(i.Delay_Lp)
</UL>
<P><STRONG><a name="[2b]"></a>OnTimerTimeoutEvt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu_api.o(i.OnTimerTimeoutEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnTimerTimeoutEvt
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu_api.o(i.MCU_API_timer_start)
</UL>
<P><STRONG><a name="[2d]"></a>RADIO_rx_packet_interrupt_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, st_lowlevel.o(i.RADIO_rx_packet_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RADIO_rx_packet_interrupt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCH_SetEvt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st_lowlevel.o(i.STLL_Radio_IoInit)
</UL>
<P><STRONG><a name="[2e]"></a>STLL_RX_SYNC_IRQHandler_CB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, st_lowlevel.o(i.STLL_RX_SYNC_IRQHandler_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STLL_RX_SYNC_IRQHandler_CB &rArr; STLL_Radio_ReadReg &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_Radio_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st_lowlevel.o(i.STLL_Radio_IoInit)
</UL>
<P><STRONG><a name="[15e]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timeserver.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[15f]"></a>TimerSetTimeout</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timeserver.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TimerSetTimeout &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_StartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[15c]"></a>TX_SetPower</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sgfxsx1276modulation-lib.o(i.TX_SetPower))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[14c]"></a>TX_Write_Modu_Buffer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sgfxsx1276modulation-lib.o(i.TX_Write_Modu_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TX_Write_Modu_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
</UL>

<P><STRONG><a name="[14d]"></a>TX_Write_RampDown_Buffer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sgfxsx1276modulation-lib.o(i.TX_Write_RampDown_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TX_Write_RampDown_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STLL_TX_IRQHandler_CB
</UL>

<P><STRONG><a name="[15d]"></a>TX_Write_RampUp_Buffer</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, sgfxsx1276modulation-lib.o(i.TX_Write_RampUp_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TX_Write_RampUp_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Start
</UL>

<P><STRONG><a name="[30]"></a>TX_read_Bit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sgfxsx1276modulation-lib.o(i.TX_read_Bit))
<BR>[Address Reference Count : 1]<UL><LI> sgfxsx1276modulation-lib.o(i.TX_Start)
</UL>
<P><STRONG><a name="[17e]"></a>SIGFOX_DECODE_dewhitening</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sgfx_cmac_lib.o(i.SIGFOX_DECODE_dewhitening))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SIGFOX_DECODE_dewhitening &rArr; SIGFOX_DECODE_dewhitening_pn
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening_pn
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
</UL>

<P><STRONG><a name="[180]"></a>SIGFOX_DECODE_dewhitening_pn</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, sgfx_cmac_lib.o(i.SIGFOX_DECODE_dewhitening_pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SIGFOX_DECODE_dewhitening_pn
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGFOX_DECODE_dewhitening
</UL>

<P><STRONG><a name="[17d]"></a>SIGFOX_HMAC_compute_aes</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, sgfx_cmac_lib.o(i.SIGFOX_HMAC_compute_aes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = SIGFOX_HMAC_compute_aes &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[17c]"></a>SIGFOX_encrypt_decrypt_frame</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, sgfx_cmac_lib.o(i.SIGFOX_encrypt_decrypt_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = SIGFOX_encrypt_decrypt_frame &rArr; CREDENTIALS_aes_128_cbc_encrypt &rArr; CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_NVM_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_wrap_session_key
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt_with_session_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_verify_downlink_message
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SE_API_secure_uplink_message
</UL>

<P><STRONG><a name="[174]"></a>CREDENTIALS_get_cra</STRONG> (Thumb, 208 bytes, Stack size 384 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_cra))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_signature
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_key
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_initial_pac
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_dev_id
</UL>

<P><STRONG><a name="[170]"></a>CREDENTIALS_get_key</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = CREDENTIALS_get_key &rArr; CREDENTIALS_get_cra &rArr; CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_wrap_session_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[175]"></a>CREDENTIALS_get_signature</STRONG> (Thumb, 92 bytes, Stack size 312 bytes, sgfx_credentials_lib.o(i.CREDENTIALS_get_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CREDENTIALS_get_signature &rArr; aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
</UL>

<P><STRONG><a name="[181]"></a>add_round_key</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sgfx_credentials_lib.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
</UL>

<P><STRONG><a name="[176]"></a>aes_cbc_decrypt</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, sgfx_credentials_lib.o(i.aes_cbc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = aes_cbc_decrypt &rArr; inv_mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_shift_sub_rows
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_sub_columns
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
</UL>

<P><STRONG><a name="[172]"></a>aes_cbc_encrypt</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, sgfx_credentials_lib.o(i.aes_cbc_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aes_cbc_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_signature
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_wrap_session_key
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt_with_session_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[171]"></a>aes_set_key</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, sgfx_credentials_lib.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_signature
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_get_cra
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_wrap_session_key
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt_with_session_key
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CREDENTIALS_aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[184]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, sgfx_credentials_lib.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
</UL>

<P><STRONG><a name="[183]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, sgfx_credentials_lib.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_sub_columns
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
</UL>

<P><STRONG><a name="[186]"></a>inv_mix_sub_columns</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, sgfx_credentials_lib.o(i.inv_mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
</UL>

<P><STRONG><a name="[185]"></a>inv_shift_sub_rows</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sgfx_credentials_lib.o(i.inv_shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
</UL>

<P><STRONG><a name="[187]"></a>mix_sub_columns</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, sgfx_credentials_lib.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
</UL>

<P><STRONG><a name="[188]"></a>shift_sub_rows</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sgfx_credentials_lib.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
</UL>

<P><STRONG><a name="[182]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, sgfx_credentials_lib.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
