
JoystickTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000072c  20000068  080043f4  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000794  080043f4  00020794  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ffc0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003dbf  00000000  00000000  00040058  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011841  00000000  00000000  00043e17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014f0  00000000  00000000  00055658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c58  00000000  00000000  00056b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aec2  00000000  00000000  000587a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000804e  00000000  00000000  00063662  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006b6b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004198  00000000  00000000  0006b72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042b8 	.word	0x080042b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080042b8 	.word	0x080042b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_InitTick+0x2c>)
{
 8000594:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 fd64 	bl	800106c <HAL_SYSTICK_Config>
 80005a4:	4604      	mov	r4, r0
 80005a6:	b938      	cbnz	r0, 80005b8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80005a8:	4602      	mov	r2, r0
 80005aa:	4629      	mov	r1, r5
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 fd1c 	bl	8000fec <HAL_NVIC_SetPriority>
 80005b4:	4620      	mov	r0, r4
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_Init>:
{
 80005c0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 fd00 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffe1 	bl	8000590 <HAL_InitTick>
 80005ce:	4604      	mov	r4, r0
 80005d0:	b918      	cbnz	r0, 80005da <HAL_Init+0x1a>
    HAL_MspInit();
 80005d2:	f002 ff85 	bl	80034e0 <HAL_MspInit>
}
 80005d6:	4620      	mov	r0, r4
 80005d8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005da:	2401      	movs	r4, #1
 80005dc:	e7fb      	b.n	80005d6 <HAL_Init+0x16>
	...

080005e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <HAL_IncTick+0xc>)
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000b8 	.word	0x200000b8

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000b8 	.word	0x200000b8

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000604:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000606:	4605      	mov	r5, r0
  {
    wait++;
 8000608:	bf18      	it	ne
 800060a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	4284      	cmp	r4, r0
 8000614:	d8fa      	bhi.n	800060c <HAL_Delay+0x10>
  {
  }
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000618:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800061a:	0dcc      	lsrs	r4, r1, #23
 800061c:	f004 0404 	and.w	r4, r4, #4
 8000620:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000622:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000626:	2307      	movs	r3, #7
 8000628:	fa03 f501 	lsl.w	r5, r3, r1
 800062c:	5823      	ldr	r3, [r4, r0]
 800062e:	fa02 f101 	lsl.w	r1, r2, r1
 8000632:	ea23 0305 	bic.w	r3, r3, r5
 8000636:	4319      	orrs	r1, r3
 8000638:	5021      	str	r1, [r4, r0]
 800063a:	bd30      	pop	{r4, r5, pc}

0800063c <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800063c:	6880      	ldr	r0, [r0, #8]
}
 800063e:	f000 0001 	and.w	r0, r0, #1
 8000642:	4770      	bx	lr

08000644 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000644:	6880      	ldr	r0, [r0, #8]
}
 8000646:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800064a:	4770      	bx	lr

0800064c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800064c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000652:	4604      	mov	r4, r0
 8000654:	2800      	cmp	r0, #0
 8000656:	f000 8085 	beq.w	8000764 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800065a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800065c:	b925      	cbnz	r5, 8000668 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800065e:	f002 ff57 	bl	8003510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000662:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000664:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000668:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800066a:	6883      	ldr	r3, [r0, #8]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	d47b      	bmi.n	8000768 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000670:	6883      	ldr	r3, [r0, #8]
 8000672:	00dd      	lsls	r5, r3, #3
 8000674:	d57f      	bpl.n	8000776 <HAL_ADC_Init+0x12a>
 8000676:	6883      	ldr	r3, [r0, #8]
 8000678:	00d9      	lsls	r1, r3, #3
 800067a:	f140 808a 	bpl.w	8000792 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800067e:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000680:	f7ff ffe0 	bl	8000644 <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000684:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000686:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800068a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800068c:	d167      	bne.n	800075e <HAL_ADC_Init+0x112>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800068e:	2800      	cmp	r0, #0
 8000690:	d165      	bne.n	800075e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8000692:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800069c:	6820      	ldr	r0, [r4, #0]
 800069e:	f7ff ffcd 	bl	800063c <LL_ADC_IsEnabled>
 80006a2:	b998      	cbnz	r0, 80006cc <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80006a4:	4852      	ldr	r0, [pc, #328]	; (80007f0 <HAL_ADC_Init+0x1a4>)
 80006a6:	f7ff ffc9 	bl	800063c <LL_ADC_IsEnabled>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4851      	ldr	r0, [pc, #324]	; (80007f4 <HAL_ADC_Init+0x1a8>)
 80006ae:	f7ff ffc5 	bl	800063c <LL_ADC_IsEnabled>
 80006b2:	4303      	orrs	r3, r0
 80006b4:	4850      	ldr	r0, [pc, #320]	; (80007f8 <HAL_ADC_Init+0x1ac>)
 80006b6:	f7ff ffc1 	bl	800063c <LL_ADC_IsEnabled>
 80006ba:	4303      	orrs	r3, r0
 80006bc:	d106      	bne.n	80006cc <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006be:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <HAL_ADC_Init+0x1b0>)
 80006c0:	6860      	ldr	r0, [r4, #4]
 80006c2:	6893      	ldr	r3, [r2, #8]
 80006c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80006c8:	4303      	orrs	r3, r0
 80006ca:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80006cc:	68e0      	ldr	r0, [r4, #12]
 80006ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 80006d0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80006d4:	4303      	orrs	r3, r0
 80006d6:	68a0      	ldr	r0, [r4, #8]
 80006d8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006da:	7e60      	ldrb	r0, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006dc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80006de:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006e6:	bf02      	ittt	eq
 80006e8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80006ea:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006ee:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006f4:	b122      	cbz	r2, 8000700 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006f8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006fc:	4302      	orrs	r2, r0
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006fe:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	4a3f      	ldr	r2, [pc, #252]	; (8000800 <HAL_ADC_Init+0x1b4>)
 8000704:	68c5      	ldr	r5, [r0, #12]
 8000706:	402a      	ands	r2, r5
 8000708:	4313      	orrs	r3, r2
 800070a:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800070c:	f7ff ff9a 	bl	8000644 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000710:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	0712      	lsls	r2, r2, #28
 8000716:	d546      	bpl.n	80007a6 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000718:	6922      	ldr	r2, [r4, #16]
 800071a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800071c:	bf05      	ittet	eq
 800071e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8000720:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000722:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000724:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000728:	bf06      	itte	eq
 800072a:	f020 000f 	biceq.w	r0, r0, #15
 800072e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000730:	f022 020f 	bicne.w	r2, r2, #15
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000736:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000738:	f023 0303 	bic.w	r3, r3, #3
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000742:	4608      	mov	r0, r1
 8000744:	b003      	add	sp, #12
 8000746:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000748:	9b01      	ldr	r3, [sp, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800074e:	9b01      	ldr	r3, [sp, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f9      	bne.n	8000748 <HAL_ADC_Init+0xfc>
 8000754:	e78f      	b.n	8000676 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000756:	691a      	ldr	r2, [r3, #16]
 8000758:	f022 0201 	bic.w	r2, r2, #1
 800075c:	e045      	b.n	80007ea <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000764:	2101      	movs	r1, #1
 8000766:	e7ec      	b.n	8000742 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000768:	6883      	ldr	r3, [r0, #8]
 800076a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800076e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000772:	6083      	str	r3, [r0, #8]
 8000774:	e77c      	b.n	8000670 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8000776:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000778:	4a22      	ldr	r2, [pc, #136]	; (8000804 <HAL_ADC_Init+0x1b8>)
 800077a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800077e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6083      	str	r3, [r0, #8]
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <HAL_ADC_Init+0x1bc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000790:	e7dc      	b.n	800074c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000792:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80007a2:	2101      	movs	r1, #1
 80007a4:	e76c      	b.n	8000680 <HAL_ADC_Init+0x34>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d1b6      	bne.n	8000718 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80007aa:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80007ac:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007b0:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80007b2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80007b4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 80007b8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80007bc:	f020 0002 	bic.w	r0, r0, #2
 80007c0:	4302      	orrs	r2, r0
 80007c2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80007c4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80007c8:	2a01      	cmp	r2, #1
 80007ca:	d1c4      	bne.n	8000756 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80007cc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80007d0:	6918      	ldr	r0, [r3, #16]
 80007d2:	432a      	orrs	r2, r5
 80007d4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	432a      	orrs	r2, r5
 80007dc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80007de:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80007e2:	432a      	orrs	r2, r5
 80007e4:	f020 0004 	bic.w	r0, r0, #4
 80007e8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	e794      	b.n	8000718 <HAL_ADC_Init+0xcc>
 80007ee:	bf00      	nop
 80007f0:	50040000 	.word	0x50040000
 80007f4:	50040100 	.word	0x50040100
 80007f8:	50040200 	.word	0x50040200
 80007fc:	50040300 	.word	0x50040300
 8000800:	fff0c007 	.word	0xfff0c007
 8000804:	00030d40 	.word	0x00030d40
 8000808:	20000000 	.word	0x20000000

0800080c <HAL_ADC_ConvCpltCallback>:
 800080c:	4770      	bx	lr

0800080e <HAL_ADC_ConvHalfCpltCallback>:
 800080e:	4770      	bx	lr

08000810 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000810:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000812:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000814:	f7ff fffb 	bl	800080e <HAL_ADC_ConvHalfCpltCallback>
 8000818:	bd08      	pop	{r3, pc}

0800081a <HAL_ADC_ErrorCallback>:
{
 800081a:	4770      	bx	lr

0800081c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800081c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800081e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000820:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000824:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000828:	d121      	bne.n	800086e <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800082a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	6811      	ldr	r1, [r2, #0]
 8000834:	0708      	lsls	r0, r1, #28
 8000836:	d507      	bpl.n	8000848 <ADC_DMAConvCplt+0x2c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000838:	68d1      	ldr	r1, [r2, #12]
 800083a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800083e:	d112      	bne.n	8000866 <ADC_DMAConvCplt+0x4a>
        if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000840:	68d2      	ldr	r2, [r2, #12]
 8000842:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000846:	e002      	b.n	800084e <ADC_DMAConvCplt+0x32>
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8000848:	68d2      	ldr	r2, [r2, #12]
 800084a:	f012 0f02 	tst.w	r2, #2
 800084e:	d10a      	bne.n	8000866 <ADC_DMAConvCplt+0x4a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000856:	655a      	str	r2, [r3, #84]	; 0x54
        if((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800085a:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800085c:	bf5e      	ittt	pl
 800085e:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8000860:	f042 0201 	orrpl.w	r2, r2, #1
 8000864:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffd0 	bl	800080c <HAL_ADC_ConvCpltCallback>
 800086c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800086e:	06d2      	lsls	r2, r2, #27
 8000870:	d503      	bpl.n	800087a <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffd1 	bl	800081a <HAL_ADC_ErrorCallback>
 8000878:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800087c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000882:	4718      	bx	r3

08000884 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000884:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000886:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000888:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000890:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000898:	f7ff ffbf 	bl	800081a <HAL_ADC_ErrorCallback>
 800089c:	bd08      	pop	{r3, pc}
	...

080008a0 <HAL_ADC_ConfigChannel>:
{
 80008a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008a6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80008aa:	2b01      	cmp	r3, #1
{
 80008ac:	4605      	mov	r5, r0
 80008ae:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80008b0:	f000 8187 	beq.w	8000bc2 <HAL_ADC_ConfigChannel+0x322>
 80008b4:	2301      	movs	r3, #1
 80008b6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80008ba:	6800      	ldr	r0, [r0, #0]
 80008bc:	f7ff fec2 	bl	8000644 <LL_ADC_REG_IsConversionOngoing>
 80008c0:	2800      	cmp	r0, #0
 80008c2:	f040 8178 	bne.w	8000bb6 <HAL_ADC_ConfigChannel+0x316>
    if (sConfig->Rank <= 5U)
 80008c6:	684b      	ldr	r3, [r1, #4]
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d808      	bhi.n	80008de <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 80008cc:	3b02      	subs	r3, #2
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d865      	bhi.n	800099e <HAL_ADC_ConfigChannel+0xfe>
 80008d2:	e8df f003 	tbb	[pc, r3]
 80008d6:	5d02      	.short	0x5d02
 80008d8:	615f      	.short	0x615f
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80008da:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80008dc:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80008de:	6861      	ldr	r1, [r4, #4]
 80008e0:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008e2:	098e      	lsrs	r6, r1, #6
 80008e4:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80008e8:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80008ec:	f001 011f 	and.w	r1, r1, #31
 80008f0:	231f      	movs	r3, #31
 80008f2:	fa03 f201 	lsl.w	r2, r3, r1
 80008f6:	59f3      	ldr	r3, [r6, r7]
 80008f8:	ea23 0302 	bic.w	r3, r3, r2
 80008fc:	6822      	ldr	r2, [r4, #0]
 80008fe:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000902:	408a      	lsls	r2, r1
 8000904:	4313      	orrs	r3, r2
 8000906:	51f3      	str	r3, [r6, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000908:	f7ff fe9c 	bl	8000644 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800090c:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	0711      	lsls	r1, r2, #28
 8000912:	f140 8158 	bpl.w	8000bc6 <HAL_ADC_ConfigChannel+0x326>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000916:	6828      	ldr	r0, [r5, #0]
 8000918:	f7ff fe90 	bl	800063c <LL_ADC_IsEnabled>
 800091c:	2800      	cmp	r0, #0
 800091e:	f040 80d7 	bne.w	8000ad0 <HAL_ADC_ConfigChannel+0x230>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000922:	68e6      	ldr	r6, [r4, #12]
 8000924:	6828      	ldr	r0, [r5, #0]
 8000926:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000928:	4ac3      	ldr	r2, [pc, #780]	; (8000c38 <HAL_ADC_ConfigChannel+0x398>)
 800092a:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 800092e:	f006 0e18 	and.w	lr, r6, #24
 8000932:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000936:	fa22 f20e 	lsr.w	r2, r2, lr
 800093a:	401a      	ands	r2, r3
 800093c:	ea21 0107 	bic.w	r1, r1, r7
 8000940:	430a      	orrs	r2, r1
 8000942:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000946:	4abd      	ldr	r2, [pc, #756]	; (8000c3c <HAL_ADC_ConfigChannel+0x39c>)
 8000948:	4296      	cmp	r6, r2
 800094a:	f040 80c1 	bne.w	8000ad0 <HAL_ADC_ConfigChannel+0x230>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 800094e:	2f00      	cmp	r7, #0
 8000950:	f040 8093 	bne.w	8000a7a <HAL_ADC_ConfigChannel+0x1da>
 8000954:	0e9e      	lsrs	r6, r3, #26
 8000956:	3601      	adds	r6, #1
 8000958:	f006 021f 	and.w	r2, r6, #31
 800095c:	2a09      	cmp	r2, #9
 800095e:	f04f 0101 	mov.w	r1, #1
 8000962:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000966:	f240 80a2 	bls.w	8000aae <HAL_ADC_ConfigChannel+0x20e>
 800096a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800096e:	4091      	lsls	r1, r2
 8000970:	ea41 0206 	orr.w	r2, r1, r6
 8000974:	2f00      	cmp	r7, #0
 8000976:	f040 80cb 	bne.w	8000b10 <HAL_ADC_ConfigChannel+0x270>
 800097a:	0e9b      	lsrs	r3, r3, #26
 800097c:	3301      	adds	r3, #1
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000986:	391e      	subs	r1, #30
 8000988:	0509      	lsls	r1, r1, #20
 800098a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800098e:	e09b      	b.n	8000ac8 <HAL_ADC_ConfigChannel+0x228>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000990:	2312      	movs	r3, #18
 8000992:	e7a3      	b.n	80008dc <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000994:	2318      	movs	r3, #24
 8000996:	e7a1      	b.n	80008dc <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099c:	e79e      	b.n	80008dc <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800099e:	2306      	movs	r3, #6
 80009a0:	e79c      	b.n	80008dc <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009a2:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009a6:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80009aa:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80009ae:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d13a      	bne.n	8000a2c <HAL_ADC_ConfigChannel+0x18c>
 80009b6:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80009ba:	4287      	cmp	r7, r0
 80009bc:	f040 8128 	bne.w	8000c10 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 80009c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009c4:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009c8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009ca:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 80009ce:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80009d2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009d6:	bb9f      	cbnz	r7, 8000a40 <HAL_ADC_ConfigChannel+0x1a0>
 80009d8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009dc:	4283      	cmp	r3, r0
 80009de:	f040 811c 	bne.w	8000c1a <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 80009e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e6:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009e8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009ea:	6891      	ldr	r1, [r2, #8]
 80009ec:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009f0:	f102 0608 	add.w	r6, r2, #8
 80009f4:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009f8:	bb77      	cbnz	r7, 8000a58 <HAL_ADC_ConfigChannel+0x1b8>
 80009fa:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009fe:	4283      	cmp	r3, r0
 8000a00:	f040 8112 	bne.w	8000c28 <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8000a04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a08:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a0a:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a0c:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a10:	68d2      	ldr	r2, [r2, #12]
 8000a12:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8000a16:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000a1a:	bb4e      	cbnz	r6, 8000a70 <HAL_ADC_ConfigChannel+0x1d0>
 8000a1c:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8000a20:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8000a22:	bf04      	itt	eq
 8000a24:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a28:	6002      	streq	r2, [r0, #0]
 8000a2a:	e774      	b.n	8000916 <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2c:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a30:	fab0 f080 	clz	r0, r0
 8000a34:	4287      	cmp	r7, r0
 8000a36:	d0c3      	beq.n	80009c0 <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a38:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a3c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000a40:	fa93 f3a3 	rbit	r3, r3
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	4283      	cmp	r3, r0
 8000a4a:	d0ca      	beq.n	80009e2 <HAL_ADC_ConfigChannel+0x142>
 8000a4c:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a4e:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a50:	f102 0608 	add.w	r6, r2, #8
 8000a54:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000a58:	fa93 f3a3 	rbit	r3, r3
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	4283      	cmp	r3, r0
 8000a62:	d0cf      	beq.n	8000a04 <HAL_ADC_ConfigChannel+0x164>
 8000a64:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a68:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000a70:	fa93 f3a3 	rbit	r3, r3
 8000a74:	fab3 f383 	clz	r3, r3
 8000a78:	e7d2      	b.n	8000a20 <HAL_ADC_ConfigChannel+0x180>
 8000a7a:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	3201      	adds	r2, #1
 8000a84:	f002 021f 	and.w	r2, r2, #31
 8000a88:	2a09      	cmp	r2, #9
 8000a8a:	d830      	bhi.n	8000aee <HAL_ADC_ConfigChannel+0x24e>
 8000a8c:	fa93 f6a3 	rbit	r6, r3
 8000a90:	fab6 f686 	clz	r6, r6
 8000a94:	3601      	adds	r6, #1
 8000a96:	06b6      	lsls	r6, r6, #26
 8000a98:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a9c:	fa93 f1a3 	rbit	r1, r3
 8000aa0:	fab1 f181 	clz	r1, r1
 8000aa4:	3101      	adds	r1, #1
 8000aa6:	f001 021f 	and.w	r2, r1, #31
 8000aaa:	2101      	movs	r1, #1
 8000aac:	e001      	b.n	8000ab2 <HAL_ADC_ConfigChannel+0x212>
 8000aae:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000ab2:	4091      	lsls	r1, r2
 8000ab4:	ea41 0206 	orr.w	r2, r1, r6
 8000ab8:	b9a7      	cbnz	r7, 8000ae4 <HAL_ADC_ConfigChannel+0x244>
 8000aba:	0e99      	lsrs	r1, r3, #26
 8000abc:	3101      	adds	r1, #1
 8000abe:	f001 011f 	and.w	r1, r1, #31
 8000ac2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000ac6:	0509      	lsls	r1, r1, #20
 8000ac8:	4311      	orrs	r1, r2
 8000aca:	68a2      	ldr	r2, [r4, #8]
 8000acc:	f7ff fda4 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	4b5b      	ldr	r3, [pc, #364]	; (8000c40 <HAL_ADC_ConfigChannel+0x3a0>)
 8000ad4:	421a      	tst	r2, r3
 8000ad6:	d120      	bne.n	8000b1a <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000ada:	2300      	movs	r3, #0
 8000adc:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae4:	fa93 f1a3 	rbit	r1, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000ae8:	fab1 f181 	clz	r1, r1
 8000aec:	e7e6      	b.n	8000abc <HAL_ADC_ConfigChannel+0x21c>
 8000aee:	fa93 f2a3 	rbit	r2, r3
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	3201      	adds	r2, #1
 8000af8:	0692      	lsls	r2, r2, #26
 8000afa:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000afe:	fa93 f1a3 	rbit	r1, r3
 8000b02:	fab1 f181 	clz	r1, r1
 8000b06:	3101      	adds	r1, #1
 8000b08:	f001 021f 	and.w	r2, r1, #31
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	e72e      	b.n	800096e <HAL_ADC_ConfigChannel+0xce>
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	e730      	b.n	800097c <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b1a:	494a      	ldr	r1, [pc, #296]	; (8000c44 <HAL_ADC_ConfigChannel+0x3a4>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000b1c:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <HAL_ADC_ConfigChannel+0x3a8>)
 8000b1e:	6888      	ldr	r0, [r1, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8000b26:	460c      	mov	r4, r1
 8000b28:	d11e      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x2c8>
 8000b2a:	0202      	lsls	r2, r0, #8
 8000b2c:	d4d4      	bmi.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <HAL_ADC_ConfigChannel+0x3ac>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d003      	beq.n	8000b3e <HAL_ADC_ConfigChannel+0x29e>
 8000b36:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d1cc      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b3e:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b40:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <HAL_ADC_ConfigChannel+0x3b0>)
 8000b42:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000b46:	4333      	orrs	r3, r6
 8000b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b4c:	60a3      	str	r3, [r4, #8]
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <HAL_ADC_ConfigChannel+0x3b4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b56:	230c      	movs	r3, #12
 8000b58:	4353      	muls	r3, r2
            wait_loop_index--;
 8000b5a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0ba      	beq.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
            wait_loop_index--;
 8000b62:	9b01      	ldr	r3, [sp, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	e7f8      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x2ba>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <HAL_ADC_ConfigChannel+0x3b8>)
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d111      	bne.n	8000b92 <HAL_ADC_ConfigChannel+0x2f2>
 8000b6e:	01c3      	lsls	r3, r0, #7
 8000b70:	d4b2      	bmi.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	4a35      	ldr	r2, [pc, #212]	; (8000c4c <HAL_ADC_ConfigChannel+0x3ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_ConfigChannel+0x2e2>
 8000b7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d1aa      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
 8000b82:	68a3      	ldr	r3, [r4, #8]
 8000b84:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000b88:	4333      	orrs	r3, r6
 8000b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b8e:	60a3      	str	r3, [r4, #8]
 8000b90:	e7a2      	b.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <HAL_ADC_ConfigChannel+0x3bc>)
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d19f      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
 8000b98:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000b9c:	d19c      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000b9e:	682a      	ldr	r2, [r5, #0]
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <HAL_ADC_ConfigChannel+0x3ac>)
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d198      	bne.n	8000ad8 <HAL_ADC_ConfigChannel+0x238>
 8000ba6:	688b      	ldr	r3, [r1, #8]
 8000ba8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8000bac:	4333      	orrs	r3, r6
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb2:	608b      	str	r3, [r1, #8]
 8000bb4:	e791      	b.n	8000ada <HAL_ADC_ConfigChannel+0x23a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb6:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000bb8:	f042 0220 	orr.w	r2, r2, #32
 8000bbc:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	e78b      	b.n	8000ada <HAL_ADC_ConfigChannel+0x23a>
  __HAL_LOCK(hadc);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	e78c      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x240>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	f47f aea5 	bne.w	8000916 <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000bcc:	68a2      	ldr	r2, [r4, #8]
 8000bce:	6821      	ldr	r1, [r4, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd21 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000bd6:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000bd8:	f8d5 e000 	ldr.w	lr, [r5]
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000be2:	2e04      	cmp	r6, #4
 8000be4:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8000be8:	f43f aedb 	beq.w	80009a2 <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000bec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8000bf0:	0048      	lsls	r0, r1, #1
 8000bf2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000bf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000bf8:	4081      	lsls	r1, r0
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_ADC_ConfigChannel+0x3c0>)
 8000c06:	4003      	ands	r3, r0
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8000c0e:	e682      	b.n	8000916 <HAL_ADC_ConfigChannel+0x76>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c10:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c14:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c18:	e6de      	b.n	80009d8 <HAL_ADC_ConfigChannel+0x138>
 8000c1a:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c1c:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c1e:	f102 0608 	add.w	r6, r2, #8
 8000c22:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c26:	e6e8      	b.n	80009fa <HAL_ADC_ConfigChannel+0x15a>
 8000c28:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c2c:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000c34:	e6f2      	b.n	8000a1c <HAL_ADC_ConfigChannel+0x17c>
 8000c36:	bf00      	nop
 8000c38:	0007ffff 	.word	0x0007ffff
 8000c3c:	407f0000 	.word	0x407f0000
 8000c40:	80080000 	.word	0x80080000
 8000c44:	50040300 	.word	0x50040300
 8000c48:	c7520000 	.word	0xc7520000
 8000c4c:	50040000 	.word	0x50040000
 8000c50:	00030d40 	.word	0x00030d40
 8000c54:	20000000 	.word	0x20000000
 8000c58:	cb840000 	.word	0xcb840000
 8000c5c:	80000001 	.word	0x80000001
 8000c60:	03fff000 	.word	0x03fff000

08000c64 <ADC_Enable>:
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c68:	6800      	ldr	r0, [r0, #0]
 8000c6a:	f7ff fce7 	bl	800063c <LL_ADC_IsEnabled>
 8000c6e:	b108      	cbz	r0, 8000c74 <ADC_Enable+0x10>
  return HAL_OK;
 8000c70:	2000      	movs	r0, #0
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <ADC_Enable+0x68>)
 8000c78:	6891      	ldr	r1, [r2, #8]
 8000c7a:	4219      	tst	r1, r3
 8000c7c:	d009      	beq.n	8000c92 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000c92:	6893      	ldr	r3, [r2, #8]
 8000c94:	4d0e      	ldr	r5, [pc, #56]	; (8000cd0 <ADC_Enable+0x6c>)
 8000c96:	402b      	ands	r3, r5
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000c9e:	f7ff fca7 	bl	80005f0 <HAL_GetTick>
 8000ca2:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000ca4:	6820      	ldr	r0, [r4, #0]
 8000ca6:	6803      	ldr	r3, [r0, #0]
 8000ca8:	07db      	lsls	r3, r3, #31
 8000caa:	d4e1      	bmi.n	8000c70 <ADC_Enable+0xc>
      if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cac:	f7ff fcc6 	bl	800063c <LL_ADC_IsEnabled>
 8000cb0:	b928      	cbnz	r0, 8000cbe <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	6893      	ldr	r3, [r2, #8]
 8000cb6:	402b      	ands	r3, r5
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6093      	str	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cbe:	f7ff fc97 	bl	80005f0 <HAL_GetTick>
 8000cc2:	1b80      	subs	r0, r0, r6
 8000cc4:	2802      	cmp	r0, #2
 8000cc6:	d9ed      	bls.n	8000ca4 <ADC_Enable+0x40>
 8000cc8:	e7d9      	b.n	8000c7e <ADC_Enable+0x1a>
 8000cca:	bf00      	nop
 8000ccc:	8000003f 	.word	0x8000003f
 8000cd0:	7fffffc0 	.word	0x7fffffc0

08000cd4 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <HAL_ADC_Start_DMA+0xe8>)
{
 8000cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cda:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
{
 8000ce0:	460e      	mov	r6, r1
 8000ce2:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ce4:	f7ff fcae 	bl	8000644 <LL_ADC_REG_IsConversionOngoing>
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d15f      	bne.n	8000dac <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 8000cec:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8000cf0:	2a01      	cmp	r2, #1
 8000cf2:	d05b      	beq.n	8000dac <HAL_ADC_Start_DMA+0xd8>
 8000cf4:	f003 081f 	and.w	r8, r3, #31
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cf8:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8000cfc:	f04f 0301 	mov.w	r3, #1
 8000d00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if (    (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d04:	bf9e      	ittt	ls
 8000d06:	f240 2321 	movwls	r3, #545	; 0x221
 8000d0a:	fa23 f308 	lsrls.w	r3, r3, r8
 8000d0e:	43db      	mvnls	r3, r3
 8000d10:	f013 0501 	ands.w	r5, r3, #1
 8000d14:	d144      	bne.n	8000da0 <HAL_ADC_Start_DMA+0xcc>
      tmp_hal_status = ADC_Enable(hadc);
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff ffa4 	bl	8000c64 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d13b      	bne.n	8000d98 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 8000d20:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d22:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8000d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6563      	str	r3, [r4, #84]	; 0x54
        if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_ADC_Start_DMA+0xec>)
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d03c      	beq.n	8000db2 <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d3e:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d42:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000d44:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d48:	bf1c      	itt	ne
 8000d4a:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8000d4c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc); 
 8000d50:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_ADC_Start_DMA+0xf0>)
 8000d54:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_ADC_Start_DMA+0xf4>)
 8000d58:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_ADC_Start_DMA+0xf8>)
 8000d5c:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d5e:	231c      	movs	r3, #28
 8000d60:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8000d62:	2300      	movs	r3, #0
 8000d64:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d68:	684b      	ldr	r3, [r1, #4]
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000d70:	68cb      	ldr	r3, [r1, #12]
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d78:	4632      	mov	r2, r6
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	3140      	adds	r1, #64	; 0x40
 8000d7e:	f000 fa8d 	bl	800129c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d82:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000d84:	6893      	ldr	r3, [r2, #8]
 8000d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6093      	str	r3, [r2, #8]
 8000d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8000d98:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 8000da0:	2300      	movs	r3, #0
 8000da2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
 8000da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8000dac:	2002      	movs	r0, #2
 8000dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000db2:	f1b8 0f00 	cmp.w	r8, #0
 8000db6:	d0bf      	beq.n	8000d38 <HAL_ADC_Start_DMA+0x64>
 8000db8:	e7c2      	b.n	8000d40 <HAL_ADC_Start_DMA+0x6c>
 8000dba:	bf00      	nop
 8000dbc:	50040300 	.word	0x50040300
 8000dc0:	50040100 	.word	0x50040100
 8000dc4:	0800081d 	.word	0x0800081d
 8000dc8:	08000811 	.word	0x08000811
 8000dcc:	08000885 	.word	0x08000885

08000dd0 <ADC_Disable>:
{
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8000dd4:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000dd6:	6883      	ldr	r3, [r0, #8]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
  if (   (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000ddc:	f7ff fc2e 	bl	800063c <LL_ADC_IsEnabled>
 8000de0:	b908      	cbnz	r0, 8000de6 <ADC_Disable+0x16>
  return HAL_OK;
 8000de2:	2000      	movs	r0, #0
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1fb      	bne.n	8000de2 <ADC_Disable+0x12>
    if((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8000dea:	6822      	ldr	r2, [r4, #0]
 8000dec:	6893      	ldr	r3, [r2, #8]
 8000dee:	f003 030d 	and.w	r3, r3, #13
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d115      	bne.n	8000e22 <ADC_Disable+0x52>
  MODIFY_REG(ADCx->CR,
 8000df6:	6893      	ldr	r3, [r2, #8]
 8000df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8000e06:	2303      	movs	r3, #3
 8000e08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000e0a:	f7ff fbf1 	bl	80005f0 <HAL_GetTick>
 8000e0e:	4605      	mov	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	07db      	lsls	r3, r3, #31
 8000e16:	d5e4      	bpl.n	8000de2 <ADC_Disable+0x12>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e18:	f7ff fbea 	bl	80005f0 <HAL_GetTick>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	2802      	cmp	r0, #2
 8000e20:	d9f6      	bls.n	8000e10 <ADC_Disable+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	bd38      	pop	{r3, r4, r5, pc}

08000e36 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e36:	6880      	ldr	r0, [r0, #8]
}
 8000e38:	f000 0001 	and.w	r0, r0, #1
 8000e3c:	4770      	bx	lr

08000e3e <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e3e:	6880      	ldr	r0, [r0, #8]
}
 8000e40:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e52:	2b01      	cmp	r3, #1
{
 8000e54:	4604      	mov	r4, r0
 8000e56:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 8000e58:	d034      	beq.n	8000ec4 <HAL_ADCEx_Calibration_Start+0x7c>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000e60:	f7ff ffb6 	bl	8000dd0 <ADC_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 8000e66:	bb30      	cbnz	r0, 8000eb6 <HAL_ADCEx_Calibration_Start+0x6e>
    ADC_STATE_CLR_SET(hadc->State, 
 8000e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6c:	f023 0302 	bic.w	r3, r3, #2
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_BUSY_INTERNAL);

    

    /* Select calibration mode single ended or differential ended */
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 8000e76:	6823      	ldr	r3, [r4, #0]
    
    /* Wait for calibration completion */
    while(LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8000e78:	4916      	ldr	r1, [pc, #88]	; (8000ed4 <HAL_ADCEx_Calibration_Start+0x8c>)
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000e80:	432a      	orrs	r2, r5
 8000e82:	609a      	str	r2, [r3, #8]
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e8a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	da1a      	bge.n	8000ec8 <HAL_ADCEx_Calibration_Start+0x80>
      wait_loop_index++;
 8000e92:	9a01      	ldr	r2, [sp, #4]
 8000e94:	3201      	adds	r2, #1
 8000e96:	9201      	str	r2, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8000e98:	9a01      	ldr	r2, [sp, #4]
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d9f6      	bls.n	8000e8c <HAL_ADCEx_Calibration_Start+0x44>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ea0:	f023 0312 	bic.w	r3, r3, #18
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	6563      	str	r3, [r4, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        
        return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000eb2:	b003      	add	sp, #12
 8000eb4:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8000ec2:	e7f6      	b.n	8000eb2 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	e7f4      	b.n	8000eb2 <HAL_ADCEx_Calibration_Start+0x6a>
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	e7f2      	b.n	8000eba <HAL_ADCEx_Calibration_Start+0x72>
 8000ed4:	000487ff 	.word	0x000487ff

08000ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000ed8:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eda:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000ede:	2b01      	cmp	r3, #1
{
 8000ee0:	b09b      	sub	sp, #108	; 0x6c
 8000ee2:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8000ee4:	d066      	beq.n	8000fb4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8000eec:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000eee:	6800      	ldr	r0, [r0, #0]
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	bf0c      	ite	eq
 8000ef4:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 8000ef8:	2300      	movne	r3, #0
 8000efa:	9301      	str	r3, [sp, #4]
  
  if (tmphadcSlave.Instance == NULL)
 8000efc:	9801      	ldr	r0, [sp, #4]
 8000efe:	b940      	cbnz	r0, 8000f12 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f00:	6d53      	ldr	r3, [r2, #84]	; 0x54
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f02:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6553      	str	r3, [r2, #84]	; 0x54
    
    return HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 8000f0e:	b01b      	add	sp, #108	; 0x6c
 8000f10:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8000f12:	f7ff ff94 	bl	8000e3e <LL_ADC_REG_IsConversionOngoing>
 8000f16:	4603      	mov	r3, r0
  if ( (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL) 
 8000f18:	6810      	ldr	r0, [r2, #0]
 8000f1a:	f7ff ff90 	bl	8000e3e <LL_ADC_REG_IsConversionOngoing>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d142      	bne.n	8000fa8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    && (tmphadcSlave_conversion_on_going == 0UL) )
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d140      	bne.n	8000fa8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f26:	680b      	ldr	r3, [r1, #0]
 8000f28:	4c24      	ldr	r4, [pc, #144]	; (8000fbc <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8000f2a:	b333      	cbz	r3, 8000f7a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 8000f2c:	68a3      	ldr	r3, [r4, #8]
 8000f2e:	6848      	ldr	r0, [r1, #4]
 8000f30:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f34:	4303      	orrs	r3, r0
 8000f36:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8000f3a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8000f3e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000f42:	f7ff ff78 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f46:	4603      	mov	r3, r0
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8000f4a:	f7ff ff74 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f4e:	4303      	orrs	r3, r0
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000f52:	f7ff ff70 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f56:	4318      	orrs	r0, r3
 8000f58:	d004      	beq.n	8000f64 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8000f62:	e7d4      	b.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x36>
          MODIFY_REG(tmpADC_Common->CCR,
 8000f64:	680b      	ldr	r3, [r1, #0]
 8000f66:	68a5      	ldr	r5, [r4, #8]
 8000f68:	6889      	ldr	r1, [r1, #8]
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8000f70:	f021 010f 	bic.w	r1, r1, #15
 8000f74:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000f76:	60a3      	str	r3, [r4, #8]
 8000f78:	e7f0      	b.n	8000f5c <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000f7a:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000f7e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f82:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f84:	f7ff ff57 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8000f8c:	f7ff ff53 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f90:	4303      	orrs	r3, r0
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8000f94:	f7ff ff4f 	bl	8000e36 <LL_ADC_IsEnabled>
 8000f98:	4318      	orrs	r0, r3
 8000f9a:	d1de      	bne.n	8000f5a <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000fa2:	f023 030f 	bic.w	r3, r3, #15
 8000fa6:	e7e6      	b.n	8000f76 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	e7d3      	b.n	8000f5c <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	e7aa      	b.n	8000f0e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8000fb8:	50040000 	.word	0x50040000
 8000fbc:	50040300 	.word	0x50040300
 8000fc0:	50040100 	.word	0x50040100
 8000fc4:	50040200 	.word	0x50040200

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fd0:	041b      	lsls	r3, r3, #16
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fd8:	0200      	lsls	r0, r0, #8
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fe2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fe4:	60d3      	str	r3, [r2, #12]
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b530      	push	{r4, r5, lr}
 8000ff0:	68dc      	ldr	r4, [r3, #12]
 8000ff2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	bf28      	it	cs
 8001000:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 0501 	mov.w	r5, #1
 8001008:	fa05 f303 	lsl.w	r3, r5, r3
 800100c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001010:	bf8c      	ite	hi
 8001012:	3c03      	subhi	r4, #3
 8001014:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001016:	4019      	ands	r1, r3
 8001018:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101a:	fa05 f404 	lsl.w	r4, r5, r4
 800101e:	3c01      	subs	r4, #1
 8001020:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001022:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	ea42 0201 	orr.w	r2, r2, r1
 8001028:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	bfaf      	iteee	ge
 800102e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	f000 000f 	andlt.w	r0, r0, #15
 8001036:	4b06      	ldrlt	r3, [pc, #24]	; (8001050 <HAL_NVIC_SetPriority+0x64>)
 8001038:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	bfa5      	ittet	ge
 800103c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001040:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001048:	bd30      	pop	{r4, r5, pc}
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	e000ed14 	.word	0xe000ed14

08001054 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001054:	0942      	lsrs	r2, r0, #5
 8001056:	2301      	movs	r3, #1
 8001058:	f000 001f 	and.w	r0, r0, #31
 800105c:	fa03 f000 	lsl.w	r0, r3, r0
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_NVIC_EnableIRQ+0x14>)
 8001062:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100

0800106c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	3801      	subs	r0, #1
 800106e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001072:	d20a      	bcs.n	800108a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001078:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	21f0      	movs	r1, #240	; 0xf0
 800107c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <DFSDM_GetChannelFromInstance+0x54>)
 800109a:	4298      	cmp	r0, r3
 800109c:	d017      	beq.n	80010ce <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 800109e:	3320      	adds	r3, #32
 80010a0:	4298      	cmp	r0, r3
 80010a2:	d016      	beq.n	80010d2 <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 80010a4:	3320      	adds	r3, #32
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d015      	beq.n	80010d6 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 80010aa:	3320      	adds	r3, #32
 80010ac:	4298      	cmp	r0, r3
 80010ae:	d014      	beq.n	80010da <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80010b0:	3320      	adds	r3, #32
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d013      	beq.n	80010de <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80010b6:	3320      	adds	r3, #32
 80010b8:	4298      	cmp	r0, r3
 80010ba:	d012      	beq.n	80010e2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 80010bc:	3320      	adds	r3, #32
 80010be:	4298      	cmp	r0, r3
 80010c0:	d011      	beq.n	80010e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80010c2:	3320      	adds	r3, #32
 80010c4:	4298      	cmp	r0, r3
 80010c6:	bf0c      	ite	eq
 80010c8:	2007      	moveq	r0, #7
 80010ca:	2000      	movne	r0, #0
 80010cc:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 80010ce:	2000      	movs	r0, #0
 80010d0:	4770      	bx	lr
    channel = 1;
 80010d2:	2001      	movs	r0, #1
 80010d4:	4770      	bx	lr
    channel = 2;
 80010d6:	2002      	movs	r0, #2
 80010d8:	4770      	bx	lr
    channel = 3;
 80010da:	2003      	movs	r0, #3
 80010dc:	4770      	bx	lr
    channel = 4;
 80010de:	2004      	movs	r0, #4
 80010e0:	4770      	bx	lr
    channel = 5;
 80010e2:	2005      	movs	r0, #5
 80010e4:	4770      	bx	lr
    channel = 6;
 80010e6:	2006      	movs	r0, #6
  }

  return channel;
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40016000 	.word	0x40016000

080010f0 <HAL_DFSDM_ChannelInit>:
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 80010f2:	4604      	mov	r4, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d067      	beq.n	80011c8 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80010f8:	6800      	ldr	r0, [r0, #0]
 80010fa:	4d34      	ldr	r5, [pc, #208]	; (80011cc <HAL_DFSDM_ChannelInit+0xdc>)
 80010fc:	f7ff ffcc 	bl	8001098 <DFSDM_GetChannelFromInstance>
 8001100:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d15f      	bne.n	80011c8 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001108:	4620      	mov	r0, r4
 800110a:	f002 fa65 	bl	80035d8 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_DFSDM_ChannelInit+0xe0>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	3201      	adds	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d119      	bne.n	8001150 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_DFSDM_ChannelInit+0xe4>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001124:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68a1      	ldr	r1, [r4, #8]
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001134:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001136:	7922      	ldrb	r2, [r4, #4]
 8001138:	2a01      	cmp	r2, #1
 800113a:	d105      	bne.n	8001148 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800113c:	68e1      	ldr	r1, [r4, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	3901      	subs	r1, #1
 8001142:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001146:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800114e:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001150:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001152:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800115a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800115c:	6923      	ldr	r3, [r4, #16]
 800115e:	6802      	ldr	r2, [r0, #0]
 8001160:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001162:	69a1      	ldr	r1, [r4, #24]
 8001164:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001166:	4313      	orrs	r3, r2
 8001168:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800116a:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800116c:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800116e:	f023 030f 	bic.w	r3, r3, #15
 8001172:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001174:	69e3      	ldr	r3, [r4, #28]
 8001176:	6802      	ldr	r2, [r0, #0]
 8001178:	430b      	orrs	r3, r1
 800117a:	4313      	orrs	r3, r2
 800117c:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800117e:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001180:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001182:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001184:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001188:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800118a:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800118c:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800118e:	430b      	orrs	r3, r1
 8001190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001194:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001196:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001198:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80011a0:	6843      	ldr	r3, [r0, #4]
 80011a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ac:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80011ae:	6803      	ldr	r3, [r0, #0]
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80011bc:	f7ff ff6c 	bl	8001098 <DFSDM_GetChannelFromInstance>
 80011c0:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 80011c4:	2000      	movs	r0, #0
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	20000084 	.word	0x20000084
 80011d0:	200000a4 	.word	0x200000a4
 80011d4:	40016000 	.word	0x40016000

080011d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d8:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011da:	2800      	cmp	r0, #0
 80011dc:	d04e      	beq.n	800127c <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011de:	6801      	ldr	r1, [r0, #0]
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <HAL_DMA_Init+0xa8>)
 80011e2:	4299      	cmp	r1, r3
 80011e4:	f04f 0414 	mov.w	r4, #20
 80011e8:	d840      	bhi.n	800126c <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011ea:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_DMA_Init+0xac>)
 80011ec:	440a      	add	r2, r1
 80011ee:	fbb2 f2f4 	udiv	r2, r2, r4
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011f6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80011fa:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001202:	6884      	ldr	r4, [r0, #8]
 8001204:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001208:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800120a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120c:	432b      	orrs	r3, r5
 800120e:	6945      	ldr	r5, [r0, #20]
 8001210:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	6985      	ldr	r5, [r0, #24]
 8001214:	432b      	orrs	r3, r5
 8001216:	69c5      	ldr	r5, [r0, #28]
 8001218:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800121a:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800121c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001224:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8001226:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001228:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800122c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800122e:	d014      	beq.n	800125a <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001230:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_DMA_Init+0xb0>)
 8001234:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001236:	bf0c      	ite	eq
 8001238:	4914      	ldreq	r1, [pc, #80]	; (800128c <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800123a:	4915      	ldrne	r1, [pc, #84]	; (8001290 <HAL_DMA_Init+0xb8>)
 800123c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800123e:	680a      	ldr	r2, [r1, #0]
 8001240:	f003 031c 	and.w	r3, r3, #28
 8001244:	240f      	movs	r4, #15
 8001246:	409c      	lsls	r4, r3
 8001248:	ea22 0204 	bic.w	r2, r2, r4
 800124c:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800124e:	6842      	ldr	r2, [r0, #4]
 8001250:	680c      	ldr	r4, [r1, #0]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	4323      	orrs	r3, r4
 8001258:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125a:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800125c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001260:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001264:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001268:	4618      	mov	r0, r3
 800126a:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_DMA_Init+0xbc>)
 800126e:	440b      	add	r3, r1
 8001270:	fbb3 f3f4 	udiv	r3, r3, r4
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_DMA_Init+0xc0>)
 800127a:	e7be      	b.n	80011fa <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 800127c:	2001      	movs	r0, #1
}
 800127e:	bd30      	pop	{r4, r5, pc}
 8001280:	40020407 	.word	0x40020407
 8001284:	bffdfff8 	.word	0xbffdfff8
 8001288:	40020000 	.word	0x40020000
 800128c:	400200a8 	.word	0x400200a8
 8001290:	400204a8 	.word	0x400204a8
 8001294:	bffdfbf8 	.word	0xbffdfbf8
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800129e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80012a2:	2c01      	cmp	r4, #1
 80012a4:	d038      	beq.n	8001318 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 80012a6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80012aa:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ac:	b2ed      	uxtb	r5, r5
 80012ae:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80012b0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80012b4:	f04f 0600 	mov.w	r6, #0
 80012b8:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80012bc:	d12a      	bne.n	8001314 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012be:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012c2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80012c6:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012c8:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80012ca:	f026 0601 	bic.w	r6, r6, #1
 80012ce:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012d0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80012d2:	f006 061c 	and.w	r6, r6, #28
 80012d6:	40b5      	lsls	r5, r6
 80012d8:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012da:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012dc:	6883      	ldr	r3, [r0, #8]
 80012de:	6805      	ldr	r5, [r0, #0]
 80012e0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80012e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012e4:	bf0b      	itete	eq
 80012e6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80012e8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80012ea:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80012ec:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80012ee:	b14b      	cbz	r3, 8001304 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012f6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001300:	2000      	movs	r0, #0
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	f023 0304 	bic.w	r3, r3, #4
 800130a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	f043 030a 	orr.w	r3, r3, #10
 8001312:	e7f0      	b.n	80012f6 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001314:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001318:	2002      	movs	r0, #2
}
 800131a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800131c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800131c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800131e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001320:	6803      	ldr	r3, [r0, #0]
{
 8001322:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001324:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001328:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800132a:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800132c:	2404      	movs	r4, #4
 800132e:	4094      	lsls	r4, r2
 8001330:	4226      	tst	r6, r4
 8001332:	d00e      	beq.n	8001352 <HAL_DMA_IRQHandler+0x36>
 8001334:	f015 0f04 	tst.w	r5, #4
 8001338:	d00b      	beq.n	8001352 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133e:	bf5e      	ittt	pl
 8001340:	681a      	ldrpl	r2, [r3, #0]
 8001342:	f022 0204 	bicpl.w	r2, r2, #4
 8001346:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001348:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800134a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800134c:	b373      	cbz	r3, 80013ac <HAL_DMA_IRQHandler+0x90>
}
 800134e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001350:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001352:	2402      	movs	r4, #2
 8001354:	4094      	lsls	r4, r2
 8001356:	4226      	tst	r6, r4
 8001358:	d012      	beq.n	8001380 <HAL_DMA_IRQHandler+0x64>
 800135a:	f015 0f02 	tst.w	r5, #2
 800135e:	d00f      	beq.n	8001380 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	0695      	lsls	r5, r2, #26
 8001364:	d406      	bmi.n	8001374 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f022 020a 	bic.w	r2, r2, #10
 800136c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800136e:	2301      	movs	r3, #1
 8001370:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001374:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001376:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001378:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800137c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800137e:	e7e5      	b.n	800134c <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001380:	2408      	movs	r4, #8
 8001382:	4094      	lsls	r4, r2
 8001384:	4234      	tst	r4, r6
 8001386:	d011      	beq.n	80013ac <HAL_DMA_IRQHandler+0x90>
 8001388:	072c      	lsls	r4, r5, #28
 800138a:	d50f      	bpl.n	80013ac <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138c:	681c      	ldr	r4, [r3, #0]
 800138e:	f024 040e 	bic.w	r4, r4, #14
 8001392:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001394:	2301      	movs	r3, #1
 8001396:	fa03 f202 	lsl.w	r2, r3, r2
 800139a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800139c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800139e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80013a2:	2300      	movs	r3, #0
 80013a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80013a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80013aa:	e7cf      	b.n	800134c <HAL_DMA_IRQHandler+0x30>
}
 80013ac:	bc70      	pop	{r4, r5, r6}
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001564 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013bc:	4c67      	ldr	r4, [pc, #412]	; (800155c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80013c0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	9a01      	ldr	r2, [sp, #4]
 80013c4:	40da      	lsrs	r2, r3
 80013c6:	d102      	bne.n	80013ce <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80013c8:	b005      	add	sp, #20
 80013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ce:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80013d0:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d2:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80013d4:	ea12 0e06 	ands.w	lr, r2, r6
 80013d8:	f000 80b1 	beq.w	800153e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013dc:	684a      	ldr	r2, [r1, #4]
 80013de:	f022 0710 	bic.w	r7, r2, #16
 80013e2:	2f02      	cmp	r7, #2
 80013e4:	d116      	bne.n	8001414 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80013e6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80013ea:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ee:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80013f2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80013fa:	f04f 0c0f 	mov.w	ip, #15
 80013fe:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001402:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001406:	690d      	ldr	r5, [r1, #16]
 8001408:	fa05 f50a 	lsl.w	r5, r5, sl
 800140c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001410:	f8c9 5020 	str.w	r5, [r9, #32]
 8001414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001418:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800141a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800141e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001422:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001424:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001428:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001430:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001432:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001438:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800143c:	d811      	bhi.n	8001462 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800143e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001440:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	68cf      	ldr	r7, [r1, #12]
 8001446:	fa07 f70c 	lsl.w	r7, r7, ip
 800144a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800144e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001450:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001452:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001456:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800145a:	409f      	lsls	r7, r3
 800145c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001460:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001462:	f1ba 0f03 	cmp.w	sl, #3
 8001466:	d107      	bne.n	8001478 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001468:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800146a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800146e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001472:	409f      	lsls	r7, r3
 8001474:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001476:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001478:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800147a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800147c:	688e      	ldr	r6, [r1, #8]
 800147e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001482:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001484:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001486:	00d5      	lsls	r5, r2, #3
 8001488:	d559      	bpl.n	800153e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800148e:	f045 0501 	orr.w	r5, r5, #1
 8001492:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001496:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800149a:	f023 0603 	bic.w	r6, r3, #3
 800149e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80014a2:	f005 0501 	and.w	r5, r5, #1
 80014a6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80014aa:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ac:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80014b2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014b8:	270f      	movs	r7, #15
 80014ba:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014be:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c6:	d03c      	beq.n	8001542 <HAL_GPIO_Init+0x192>
 80014c8:	4d25      	ldr	r5, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x1b0>)
 80014ca:	42a8      	cmp	r0, r5
 80014cc:	d03b      	beq.n	8001546 <HAL_GPIO_Init+0x196>
 80014ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014d2:	42a8      	cmp	r0, r5
 80014d4:	d039      	beq.n	800154a <HAL_GPIO_Init+0x19a>
 80014d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014da:	42a8      	cmp	r0, r5
 80014dc:	d037      	beq.n	800154e <HAL_GPIO_Init+0x19e>
 80014de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014e2:	42a8      	cmp	r0, r5
 80014e4:	d035      	beq.n	8001552 <HAL_GPIO_Init+0x1a2>
 80014e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	d033      	beq.n	8001556 <HAL_GPIO_Init+0x1a6>
 80014ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014f2:	42a8      	cmp	r0, r5
 80014f4:	bf14      	ite	ne
 80014f6:	2507      	movne	r5, #7
 80014f8:	2506      	moveq	r5, #6
 80014fa:	fa05 f50c 	lsl.w	r5, r5, ip
 80014fe:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001500:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001502:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001504:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001508:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800150a:	bf54      	ite	pl
 800150c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800150e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001512:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001514:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001516:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001518:	bf54      	ite	pl
 800151a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800151c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001520:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001522:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001524:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001526:	bf54      	ite	pl
 8001528:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800152a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800152e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001530:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001532:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001534:	bf54      	ite	pl
 8001536:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001538:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800153c:	60e5      	str	r5, [r4, #12]
    position++;
 800153e:	3301      	adds	r3, #1
 8001540:	e73f      	b.n	80013c2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001542:	2500      	movs	r5, #0
 8001544:	e7d9      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001546:	2501      	movs	r5, #1
 8001548:	e7d7      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 800154a:	2502      	movs	r5, #2
 800154c:	e7d5      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 800154e:	2503      	movs	r5, #3
 8001550:	e7d3      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001552:	2504      	movs	r5, #4
 8001554:	e7d1      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 8001556:	2505      	movs	r5, #5
 8001558:	e7cf      	b.n	80014fa <HAL_GPIO_Init+0x14a>
 800155a:	bf00      	nop
 800155c:	40010400 	.word	0x40010400
 8001560:	48000400 	.word	0x48000400
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001568:	b10a      	cbz	r2, 800156e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156a:	6181      	str	r1, [r0, #24]
 800156c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156e:	6281      	str	r1, [r0, #40]	; 0x28
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001574:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001578:	6959      	ldr	r1, [r3, #20]
 800157a:	4201      	tst	r1, r0
 800157c:	d002      	beq.n	8001584 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800157e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001580:	f7ff fff7 	bl	8001572 <HAL_GPIO_EXTI_Callback>
 8001584:	bd08      	pop	{r3, pc}
 8001586:	bf00      	nop
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800158c:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800158e:	4604      	mov	r4, r0
 8001590:	2800      	cmp	r0, #0
 8001592:	d04a      	beq.n	800162a <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001594:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001598:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800159c:	b91b      	cbnz	r3, 80015a6 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015a2:	f002 f84b 	bl	800363c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a6:	2324      	movs	r3, #36	; 0x24
 80015a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015ac:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ae:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b8:	6862      	ldr	r2, [r4, #4]
 80015ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c2:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015cc:	d124      	bne.n	8001618 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d4:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015d6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80015dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015e0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015ea:	6922      	ldr	r2, [r4, #16]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	69a1      	ldr	r1, [r4, #24]
 80015f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f6:	6a21      	ldr	r1, [r4, #32]
 80015f8:	69e2      	ldr	r2, [r4, #28]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001606:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001608:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800160c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001610:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001612:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001616:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001618:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800161c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800161e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001620:	bf04      	itt	eq
 8001622:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001626:	605a      	streq	r2, [r3, #4]
 8001628:	e7d4      	b.n	80015d4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800162a:	2001      	movs	r0, #1
}
 800162c:	bd10      	pop	{r4, pc}

0800162e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800162e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	2a20      	cmp	r2, #32
{
 8001636:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001638:	d11d      	bne.n	8001676 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800163e:	2b01      	cmp	r3, #1
 8001640:	d019      	beq.n	8001676 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001642:	2324      	movs	r3, #36	; 0x24
 8001644:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	f024 0401 	bic.w	r4, r4, #1
 8001650:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001658:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800165a:	681c      	ldr	r4, [r3, #0]
 800165c:	4321      	orrs	r1, r4
 800165e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	f041 0101 	orr.w	r1, r1, #1
 8001666:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001668:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800166a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800166e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001672:	4618      	mov	r0, r3
 8001674:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001676:	2002      	movs	r0, #2
  }
}
 8001678:	bd10      	pop	{r4, pc}

0800167a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800167a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001680:	b2e4      	uxtb	r4, r4
 8001682:	2c20      	cmp	r4, #32
 8001684:	d11c      	bne.n	80016c0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001686:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800168a:	2b01      	cmp	r3, #1
 800168c:	d018      	beq.n	80016c0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800168e:	2324      	movs	r3, #36	; 0x24
 8001690:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800169e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016a0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016a4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016a8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80016b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80016bc:	4618      	mov	r0, r3
 80016be:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2002      	movs	r0, #2
  }
}
 80016c2:	bd10      	pop	{r4, pc}

080016c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c8:	4604      	mov	r4, r0
{
 80016ca:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d074      	beq.n	80017ba <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016d0:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80016d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016d8:	b91b      	cbnz	r3, 80016e2 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016da:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016de:	f002 f8a7 	bl	8003830 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e4:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80016e6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80016ea:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 80016ee:	f001 fb2e 	bl	8002d4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80016f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f4:	466e      	mov	r6, sp
 80016f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001700:	e886 0003 	stmia.w	r6, {r0, r1}
 8001704:	f104 0804 	add.w	r8, r4, #4
 8001708:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	f001 faef 	bl	8002cf0 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001712:	2100      	movs	r1, #0
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	f001 fb20 	bl	8002d5a <USB_SetCurrentMode>
 800171a:	2100      	movs	r1, #0
 800171c:	4622      	mov	r2, r4
 800171e:	4623      	mov	r3, r4
 8001720:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001724:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001726:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8001728:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800172c:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8001730:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8001732:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8001734:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001738:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800173c:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800173e:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001740:	6518      	str	r0, [r3, #80]	; 0x50
 8001742:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8001746:	d1ef      	bne.n	8001728 <HAL_PCD_Init+0x64>
 8001748:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800174a:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 800174c:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8001750:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8001752:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8001754:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001758:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800175c:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001760:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001764:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8001768:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 800176c:	d1ee      	bne.n	800174c <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	466e      	mov	r6, sp
 8001772:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001778:	e895 0003 	ldmia.w	r5, {r0, r1}
 800177c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001780:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	f001 fb29 	bl	8002ddc <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 800178a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800178c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001790:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800179a:	4620      	mov	r0, r4
 800179c:	f000 f80f 	bl	80017be <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80017a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 f81c 	bl	80017e4 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017ac:	6820      	ldr	r0, [r4, #0]
 80017ae:	f001 fbb1 	bl	8002f14 <USB_DevDisconnect>

  return HAL_OK;
 80017b2:	2000      	movs	r0, #0
}
 80017b4:	b00a      	add	sp, #40	; 0x28
 80017b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
 80017bc:	e7fa      	b.n	80017b4 <HAL_PCD_Init+0xf0>

080017be <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017be:	6802      	ldr	r2, [r0, #0]
{
 80017c0:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 80017c2:	2101      	movs	r1, #1
 80017c4:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017c8:	2000      	movs	r0, #0
 80017ca:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017ce:	6993      	ldr	r3, [r2, #24]
 80017d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017d4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	f043 0303 	orr.w	r3, r3, #3
 80017e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80017e2:	4770      	bx	lr

080017e4 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e4:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80017ec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f8:	4a02      	ldr	r2, [pc, #8]	; (8001804 <HAL_PWR_EnableBkUpAccess+0xc>)
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4770      	bx	lr
 8001804:	40007000 	.word	0x40007000

08001808 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_PWREx_GetVoltageRange+0xc>)
 800180a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800180c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000

08001818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800181a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001820:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001824:	d11c      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001826:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800182a:	d015      	beq.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001836:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001838:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x64>)
 800183a:	6811      	ldr	r1, [r2, #0]
 800183c:	2232      	movs	r2, #50	; 0x32
 800183e:	434a      	muls	r2, r1
 8001840:	490f      	ldr	r1, [pc, #60]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001842:	fbb2 f2f1 	udiv	r2, r2, r1
 8001846:	4619      	mov	r1, r3
 8001848:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	6958      	ldr	r0, [r3, #20]
 800184c:	0540      	lsls	r0, r0, #21
 800184e:	d500      	bpl.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001850:	b922      	cbnz	r2, 800185c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	694b      	ldr	r3, [r1, #20]
 8001854:	055b      	lsls	r3, r3, #21
 8001856:	d40d      	bmi.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001858:	2000      	movs	r0, #0
 800185a:	4770      	bx	lr
        wait_loop_index--;
 800185c:	3a01      	subs	r2, #1
 800185e:	e7f4      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001860:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001864:	bf1f      	itttt	ne
 8001866:	681a      	ldrne	r2, [r3, #0]
 8001868:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800186c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001870:	601a      	strne	r2, [r3, #0]
 8001872:	e7f1      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001874:	2003      	movs	r0, #3
}
 8001876:	4770      	bx	lr
 8001878:	40007000 	.word	0x40007000
 800187c:	20000000 	.word	0x20000000
 8001880:	000f4240 	.word	0x000f4240

08001884 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <HAL_PWREx_EnableVddUSB+0xc>)
 8001886:	6853      	ldr	r3, [r2, #4]
 8001888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188c:	6053      	str	r3, [r2, #4]
 800188e:	4770      	bx	lr
 8001890:	40007000 	.word	0x40007000

08001894 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001898:	9d06      	ldr	r5, [sp, #24]
 800189a:	4604      	mov	r4, r0
 800189c:	460f      	mov	r7, r1
 800189e:	4616      	mov	r6, r2
 80018a0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80018a2:	6821      	ldr	r1, [r4, #0]
 80018a4:	688a      	ldr	r2, [r1, #8]
 80018a6:	423a      	tst	r2, r7
 80018a8:	bf14      	ite	ne
 80018aa:	2201      	movne	r2, #1
 80018ac:	2200      	moveq	r2, #0
 80018ae:	42b2      	cmp	r2, r6
 80018b0:	d102      	bne.n	80018b8 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80018b2:	2000      	movs	r0, #0
}
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018b8:	1c6b      	adds	r3, r5, #1
 80018ba:	d0f3      	beq.n	80018a4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7fe fe98 	bl	80005f0 <HAL_GetTick>
 80018c0:	eba0 0008 	sub.w	r0, r0, r8
 80018c4:	4285      	cmp	r5, r0
 80018c6:	d301      	bcc.n	80018cc <QSPI_WaitFlagStateUntilTimeout+0x38>
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	d1ea      	bne.n	80018a2 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80018cc:	2304      	movs	r3, #4
 80018ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80018d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80018da:	2001      	movs	r0, #1
 80018dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018e0 <HAL_QSPI_Init>:
{
 80018e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7fe fe84 	bl	80005f0 <HAL_GetTick>
 80018e8:	4605      	mov	r5, r0
  if(hqspi == NULL)
 80018ea:	2c00      	cmp	r4, #0
 80018ec:	d049      	beq.n	8001982 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 80018ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d047      	beq.n	8001986 <HAL_QSPI_Init+0xa6>
 80018f6:	2301      	movs	r3, #1
 80018f8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80018fc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001900:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001904:	b93a      	cbnz	r2, 8001916 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8001906:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 800190a:	4620      	mov	r0, r4
 800190c:	f001 fecc 	bl	80036a8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8001910:	f241 3388 	movw	r3, #5000	; 0x1388
 8001914:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	68a1      	ldr	r1, [r4, #8]
 800191a:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800191c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800191e:	3901      	subs	r1, #1
 8001920:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001928:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800192a:	2120      	movs	r1, #32
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2200      	movs	r2, #0
 8001930:	462b      	mov	r3, r5
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff ffae 	bl	8001894 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8001938:	b9f0      	cbnz	r0, 8001978 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	6865      	ldr	r5, [r4, #4]
 800193e:	6811      	ldr	r1, [r2, #0]
 8001940:	68e3      	ldr	r3, [r4, #12]
 8001942:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001946:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800194a:	f021 0110 	bic.w	r1, r1, #16
 800194e:	430b      	orrs	r3, r1
 8001950:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001952:	69a1      	ldr	r1, [r4, #24]
 8001954:	6963      	ldr	r3, [r4, #20]
 8001956:	6855      	ldr	r5, [r2, #4]
 8001958:	430b      	orrs	r3, r1
 800195a:	6921      	ldr	r1, [r4, #16]
 800195c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001960:	490a      	ldr	r1, [pc, #40]	; (800198c <HAL_QSPI_Init+0xac>)
 8001962:	4029      	ands	r1, r5
 8001964:	430b      	orrs	r3, r1
 8001966:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001970:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001972:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001974:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001978:	2300      	movs	r3, #0
 800197a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800197e:	b003      	add	sp, #12
 8001980:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001982:	2001      	movs	r0, #1
 8001984:	e7fb      	b.n	800197e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001986:	2002      	movs	r0, #2
 8001988:	e7f9      	b.n	800197e <HAL_QSPI_Init+0x9e>
 800198a:	bf00      	nop
 800198c:	ffe0f8fe 	.word	0xffe0f8fe

08001990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001990:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001992:	4d1e      	ldr	r5, [pc, #120]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001994:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001996:	00da      	lsls	r2, r3, #3
{
 8001998:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800199a:	d518      	bpl.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800199c:	f7ff ff34 	bl	8001808 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80019a4:	d123      	bne.n	80019ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019a6:	2c80      	cmp	r4, #128	; 0x80
 80019a8:	d929      	bls.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019aa:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ac:	bf8c      	ite	hi
 80019ae:	2002      	movhi	r0, #2
 80019b0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80019b4:	6813      	ldr	r3, [r2, #0]
 80019b6:	f023 0307 	bic.w	r3, r3, #7
 80019ba:	4303      	orrs	r3, r0
 80019bc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80019c4:	1a18      	subs	r0, r3, r0
 80019c6:	bf18      	it	ne
 80019c8:	2001      	movne	r0, #1
 80019ca:	b003      	add	sp, #12
 80019cc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	65ab      	str	r3, [r5, #88]	; 0x58
 80019d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80019e0:	f7ff ff12 	bl	8001808 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80019e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80019ec:	e7d8      	b.n	80019a0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80019ee:	2c80      	cmp	r4, #128	; 0x80
 80019f0:	d807      	bhi.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80019f2:	d008      	beq.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80019f4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80019f8:	4258      	negs	r0, r3
 80019fa:	4158      	adcs	r0, r3
 80019fc:	e7d9      	b.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7d7      	b.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a02:	2003      	movs	r0, #3
 8001a04:	e7d5      	b.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a06:	2002      	movs	r0, #2
 8001a08:	e7d3      	b.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_GetSysClockFreq+0x98>)
 8001a16:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a1a:	f012 020c 	ands.w	r2, r2, #12
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x18>
 8001a20:	2a0c      	cmp	r2, #12
 8001a22:	d115      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a24:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a28:	2901      	cmp	r1, #1
 8001a2a:	d118      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a2c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001a2e:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a30:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a32:	bf55      	itete	pl
 8001a34:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a38:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a3a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a3e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001a42:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a46:	b382      	cbz	r2, 8001aaa <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a48:	2a0c      	cmp	r2, #12
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x4c>
 8001a4c:	2000      	movs	r0, #0
  return sysclockfreq;
 8001a4e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a50:	2a04      	cmp	r2, #4
 8001a52:	d029      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x94>
 8001a54:	2a08      	cmp	r2, #8
 8001a56:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a58:	bf18      	it	ne
 8001a5a:	2000      	movne	r0, #0
 8001a5c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a5e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a60:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a62:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a64:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a68:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001a6c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a6e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x6c>
 8001a74:	2903      	cmp	r1, #3
 8001a76:	d012      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a78:	68d9      	ldr	r1, [r3, #12]
 8001a7a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001a7e:	e003      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a80:	68d9      	ldr	r1, [r3, #12]
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a84:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a88:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a8a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a8e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001a92:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a94:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a96:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001a98:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a9c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001aa6:	e7ef      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08004318 	.word	0x08004318
 8001ab4:	007a1200 	.word	0x007a1200
 8001ab8:	00f42400 	.word	0x00f42400

08001abc <HAL_RCC_OscConfig>:
{
 8001abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	b918      	cbnz	r0, 8001acc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001ac4:	2001      	movs	r0, #1
}
 8001ac6:	b003      	add	sp, #12
 8001ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001acc:	4ca5      	ldr	r4, [pc, #660]	; (8001d64 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ace:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad0:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ade:	d53c      	bpl.n	8001b5a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae0:	b11e      	cbz	r6, 8001aea <HAL_RCC_OscConfig+0x2e>
 8001ae2:	2e0c      	cmp	r6, #12
 8001ae4:	d163      	bne.n	8001bae <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ae6:	2f01      	cmp	r7, #1
 8001ae8:	d161      	bne.n	8001bae <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	0798      	lsls	r0, r3, #30
 8001aee:	d502      	bpl.n	8001af6 <HAL_RCC_OscConfig+0x3a>
 8001af0:	69ab      	ldr	r3, [r5, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0e6      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	6a28      	ldr	r0, [r5, #32]
 8001afa:	0719      	lsls	r1, r3, #28
 8001afc:	bf56      	itet	pl
 8001afe:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001b02:	6823      	ldrmi	r3, [r4, #0]
 8001b04:	091b      	lsrpl	r3, r3, #4
 8001b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0a:	4283      	cmp	r3, r0
 8001b0c:	d23a      	bcs.n	8001b84 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b0e:	f7ff ff3f 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d1d6      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	6a2a      	ldr	r2, [r5, #32]
 8001b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b26:	4313      	orrs	r3, r2
 8001b28:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	69ea      	ldr	r2, [r5, #28]
 8001b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b36:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b38:	f7ff ff6c 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8001b3c:	68a3      	ldr	r3, [r4, #8]
 8001b3e:	4a8a      	ldr	r2, [pc, #552]	; (8001d68 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	40d8      	lsrs	r0, r3
 8001b4c:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_OscConfig+0x2b0>)
 8001b4e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7fe fd1d 	bl	8000590 <HAL_InitTick>
        if(status != HAL_OK)
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d1b5      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	682b      	ldr	r3, [r5, #0]
 8001b5c:	07d8      	lsls	r0, r3, #31
 8001b5e:	d45d      	bmi.n	8001c1c <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b60:	682b      	ldr	r3, [r5, #0]
 8001b62:	0799      	lsls	r1, r3, #30
 8001b64:	f100 809c 	bmi.w	8001ca0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	0718      	lsls	r0, r3, #28
 8001b6c:	f100 80d0 	bmi.w	8001d10 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	0759      	lsls	r1, r3, #29
 8001b74:	f100 80fc 	bmi.w	8001d70 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b78:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8165 	bne.w	8001e4a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8001b80:	2000      	movs	r0, #0
 8001b82:	e7a0      	b.n	8001ac6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	6023      	str	r3, [r4, #0]
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b92:	4303      	orrs	r3, r0
 8001b94:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b96:	6863      	ldr	r3, [r4, #4]
 8001b98:	69ea      	ldr	r2, [r5, #28]
 8001b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ba2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba4:	f7ff fef4 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d0c5      	beq.n	8001b38 <HAL_RCC_OscConfig+0x7c>
 8001bac:	e78a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bae:	69ab      	ldr	r3, [r5, #24]
 8001bb0:	b31b      	cbz	r3, 8001bfa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bba:	f7fe fd19 	bl	80005f0 <HAL_GetTick>
 8001bbe:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	079a      	lsls	r2, r3, #30
 8001bc4:	d511      	bpl.n	8001bea <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	6a2a      	ldr	r2, [r5, #32]
 8001bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	69ea      	ldr	r2, [r5, #28]
 8001bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001be2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001be6:	6063      	str	r3, [r4, #4]
 8001be8:	e7b7      	b.n	8001b5a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bea:	f7fe fd01 	bl	80005f0 <HAL_GetTick>
 8001bee:	eba0 0008 	sub.w	r0, r0, r8
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	d9e4      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	e765      	b.n	8001ac6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c02:	f7fe fcf5 	bl	80005f0 <HAL_GetTick>
 8001c06:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	079b      	lsls	r3, r3, #30
 8001c0c:	d5a5      	bpl.n	8001b5a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0e:	f7fe fcef 	bl	80005f0 <HAL_GetTick>
 8001c12:	eba0 0008 	sub.w	r0, r0, r8
 8001c16:	2802      	cmp	r0, #2
 8001c18:	d9f6      	bls.n	8001c08 <HAL_RCC_OscConfig+0x14c>
 8001c1a:	e7ec      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c1c:	2e08      	cmp	r6, #8
 8001c1e:	d003      	beq.n	8001c28 <HAL_RCC_OscConfig+0x16c>
 8001c20:	2e0c      	cmp	r6, #12
 8001c22:	d108      	bne.n	8001c36 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001c24:	2f03      	cmp	r7, #3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	039a      	lsls	r2, r3, #14
 8001c2c:	d598      	bpl.n	8001b60 <HAL_RCC_OscConfig+0xa4>
 8001c2e:	686b      	ldr	r3, [r5, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d195      	bne.n	8001b60 <HAL_RCC_OscConfig+0xa4>
 8001c34:	e746      	b.n	8001ac4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c36:	686b      	ldr	r3, [r5, #4]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3c:	d110      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1a4>
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c46:	f7fe fcd3 	bl	80005f0 <HAL_GetTick>
 8001c4a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	039b      	lsls	r3, r3, #14
 8001c50:	d486      	bmi.n	8001b60 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c52:	f7fe fccd 	bl	80005f0 <HAL_GetTick>
 8001c56:	eba0 0008 	sub.w	r0, r0, r8
 8001c5a:	2864      	cmp	r0, #100	; 0x64
 8001c5c:	d9f6      	bls.n	8001c4c <HAL_RCC_OscConfig+0x190>
 8001c5e:	e7ca      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d104      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1b4>
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	e7e6      	b.n	8001c3e <HAL_RCC_OscConfig+0x182>
 8001c70:	6822      	ldr	r2, [r4, #0]
 8001c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c76:	6022      	str	r2, [r4, #0]
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c7e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001c84:	f7fe fcb4 	bl	80005f0 <HAL_GetTick>
 8001c88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	0398      	lsls	r0, r3, #14
 8001c8e:	f57f af67 	bpl.w	8001b60 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c92:	f7fe fcad 	bl	80005f0 <HAL_GetTick>
 8001c96:	eba0 0008 	sub.w	r0, r0, r8
 8001c9a:	2864      	cmp	r0, #100	; 0x64
 8001c9c:	d9f5      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1ce>
 8001c9e:	e7aa      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ca0:	2e04      	cmp	r6, #4
 8001ca2:	d003      	beq.n	8001cac <HAL_RCC_OscConfig+0x1f0>
 8001ca4:	2e0c      	cmp	r6, #12
 8001ca6:	d110      	bne.n	8001cca <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001ca8:	2f02      	cmp	r7, #2
 8001caa:	d10e      	bne.n	8001cca <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	0559      	lsls	r1, r3, #21
 8001cb0:	d503      	bpl.n	8001cba <HAL_RCC_OscConfig+0x1fe>
 8001cb2:	68eb      	ldr	r3, [r5, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f43f af05 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	692a      	ldr	r2, [r5, #16]
 8001cbe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cc6:	6063      	str	r3, [r4, #4]
 8001cc8:	e74e      	b.n	8001b68 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	68eb      	ldr	r3, [r5, #12]
 8001ccc:	b17b      	cbz	r3, 8001cee <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001cce:	6823      	ldr	r3, [r4, #0]
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fc8b 	bl	80005f0 <HAL_GetTick>
 8001cda:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	055a      	lsls	r2, r3, #21
 8001ce0:	d4eb      	bmi.n	8001cba <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe fc85 	bl	80005f0 <HAL_GetTick>
 8001ce6:	1bc0      	subs	r0, r0, r7
 8001ce8:	2802      	cmp	r0, #2
 8001cea:	d9f7      	bls.n	8001cdc <HAL_RCC_OscConfig+0x220>
 8001cec:	e783      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fc7b 	bl	80005f0 <HAL_GetTick>
 8001cfa:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	f57f af32 	bpl.w	8001b68 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7fe fc74 	bl	80005f0 <HAL_GetTick>
 8001d08:	1bc0      	subs	r0, r0, r7
 8001d0a:	2802      	cmp	r0, #2
 8001d0c:	d9f6      	bls.n	8001cfc <HAL_RCC_OscConfig+0x240>
 8001d0e:	e772      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d10:	696b      	ldr	r3, [r5, #20]
 8001d12:	b19b      	cbz	r3, 8001d3c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001d14:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d20:	f7fe fc66 	bl	80005f0 <HAL_GetTick>
 8001d24:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d26:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d2a:	079a      	lsls	r2, r3, #30
 8001d2c:	f53f af20 	bmi.w	8001b70 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7fe fc5e 	bl	80005f0 <HAL_GetTick>
 8001d34:	1bc0      	subs	r0, r0, r7
 8001d36:	2802      	cmp	r0, #2
 8001d38:	d9f5      	bls.n	8001d26 <HAL_RCC_OscConfig+0x26a>
 8001d3a:	e75c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001d48:	f7fe fc52 	bl	80005f0 <HAL_GetTick>
 8001d4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001d52:	079b      	lsls	r3, r3, #30
 8001d54:	f57f af0c 	bpl.w	8001b70 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe fc4a 	bl	80005f0 <HAL_GetTick>
 8001d5c:	1bc0      	subs	r0, r0, r7
 8001d5e:	2802      	cmp	r0, #2
 8001d60:	d9f5      	bls.n	8001d4e <HAL_RCC_OscConfig+0x292>
 8001d62:	e748      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	080042ff 	.word	0x080042ff
 8001d6c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d72:	00d8      	lsls	r0, r3, #3
 8001d74:	d429      	bmi.n	8001dca <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d88:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	4f5d      	ldr	r7, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x448>)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	05d9      	lsls	r1, r3, #23
 8001d92:	d51d      	bpl.n	8001dd0 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	68ab      	ldr	r3, [r5, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12b      	bne.n	8001df2 <HAL_RCC_OscConfig+0x336>
 8001d9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001da6:	f7fe fc23 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001db4:	079b      	lsls	r3, r3, #30
 8001db6:	d542      	bpl.n	8001e3e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001db8:	f1b8 0f00 	cmp.w	r8, #0
 8001dbc:	f43f aedc 	beq.w	8001b78 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8001dc8:	e6d6      	b.n	8001b78 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	f04f 0800 	mov.w	r8, #0
 8001dce:	e7dd      	b.n	8001d8c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001dd8:	f7fe fc0a 	bl	80005f0 <HAL_GetTick>
 8001ddc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	05da      	lsls	r2, r3, #23
 8001de2:	d4d7      	bmi.n	8001d94 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7fe fc04 	bl	80005f0 <HAL_GetTick>
 8001de8:	eba0 0009 	sub.w	r0, r0, r9
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d9f6      	bls.n	8001dde <HAL_RCC_OscConfig+0x322>
 8001df0:	e701      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x348>
 8001df6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001e02:	e7ca      	b.n	8001d9a <HAL_RCC_OscConfig+0x2de>
 8001e04:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001e10:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001e14:	f022 0204 	bic.w	r2, r2, #4
 8001e18:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1c2      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8001e20:	f7fe fbe6 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e28:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e2e:	0798      	lsls	r0, r3, #30
 8001e30:	d5c2      	bpl.n	8001db8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fbdd 	bl	80005f0 <HAL_GetTick>
 8001e36:	1bc0      	subs	r0, r0, r7
 8001e38:	4548      	cmp	r0, r9
 8001e3a:	d9f6      	bls.n	8001e2a <HAL_RCC_OscConfig+0x36e>
 8001e3c:	e6db      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fbd7 	bl	80005f0 <HAL_GetTick>
 8001e42:	1bc0      	subs	r0, r0, r7
 8001e44:	4548      	cmp	r0, r9
 8001e46:	d9b3      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f4>
 8001e48:	e6d5      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	2e0c      	cmp	r6, #12
 8001e4c:	f43f ae3a 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e50:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5a:	d137      	bne.n	8001ecc <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fbc8 	bl	80005f0 <HAL_GetTick>
 8001e60:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	0199      	lsls	r1, r3, #6
 8001e66:	d42b      	bmi.n	8001ec0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e70:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e72:	3a01      	subs	r2, #1
 8001e74:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e78:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e7a:	0912      	lsrs	r2, r2, #4
 8001e7c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001e80:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e82:	0852      	lsrs	r2, r2, #1
 8001e84:	3a01      	subs	r2, #1
 8001e86:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001e8a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e8c:	0852      	lsrs	r2, r2, #1
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e94:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9e:	68e3      	ldr	r3, [r4, #12]
 8001ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fba3 	bl	80005f0 <HAL_GetTick>
 8001eaa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	019a      	lsls	r2, r3, #6
 8001eb0:	f53f ae66 	bmi.w	8001b80 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe fb9c 	bl	80005f0 <HAL_GetTick>
 8001eb8:	1b40      	subs	r0, r0, r5
 8001eba:	2802      	cmp	r0, #2
 8001ebc:	d9f6      	bls.n	8001eac <HAL_RCC_OscConfig+0x3f0>
 8001ebe:	e69a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fb96 	bl	80005f0 <HAL_GetTick>
 8001ec4:	1b80      	subs	r0, r0, r6
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d9cb      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3a6>
 8001eca:	e694      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ed2:	bf02      	ittt	eq
 8001ed4:	68e3      	ldreq	r3, [r4, #12]
 8001ed6:	f023 0303 	biceq.w	r3, r3, #3
 8001eda:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001edc:	68e3      	ldr	r3, [r4, #12]
 8001ede:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fb82 	bl	80005f0 <HAL_GetTick>
 8001eec:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	f57f ae45 	bpl.w	8001b80 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7fe fb7b 	bl	80005f0 <HAL_GetTick>
 8001efa:	1b40      	subs	r0, r0, r5
 8001efc:	2802      	cmp	r0, #2
 8001efe:	d9f6      	bls.n	8001eee <HAL_RCC_OscConfig+0x432>
 8001f00:	e679      	b.n	8001bf6 <HAL_RCC_OscConfig+0x13a>
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_RCC_ClockConfig>:
{
 8001f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f0c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001f0e:	4604      	mov	r4, r0
 8001f10:	b910      	cbnz	r0, 8001f18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4a40      	ldr	r2, [pc, #256]	; (800201c <HAL_RCC_ClockConfig+0x114>)
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d329      	bcc.n	8001f78 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	07d9      	lsls	r1, r3, #31
 8001f28:	d431      	bmi.n	8001f8e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2a:	6821      	ldr	r1, [r4, #0]
 8001f2c:	078a      	lsls	r2, r1, #30
 8001f2e:	d45b      	bmi.n	8001fe8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4a3a      	ldr	r2, [pc, #232]	; (800201c <HAL_RCC_ClockConfig+0x114>)
 8001f32:	6813      	ldr	r3, [r2, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	429e      	cmp	r6, r3
 8001f3a:	d35d      	bcc.n	8001ff8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	f011 0f04 	tst.w	r1, #4
 8001f40:	4d37      	ldr	r5, [pc, #220]	; (8002020 <HAL_RCC_ClockConfig+0x118>)
 8001f42:	d164      	bne.n	800200e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	070b      	lsls	r3, r1, #28
 8001f46:	d506      	bpl.n	8001f56 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f48:	68ab      	ldr	r3, [r5, #8]
 8001f4a:	6922      	ldr	r2, [r4, #16]
 8001f4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f54:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f56:	f7ff fd5d 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8001f5a:	68ab      	ldr	r3, [r5, #8]
 8001f5c:	4a31      	ldr	r2, [pc, #196]	; (8002024 <HAL_RCC_ClockConfig+0x11c>)
 8001f5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	40d8      	lsrs	r0, r3
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_RCC_ClockConfig+0x120>)
 8001f70:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe bb0c 	b.w	8000590 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f78:	6813      	ldr	r3, [r2, #0]
 8001f7a:	f023 0307 	bic.w	r3, r3, #7
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	d1c2      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xa>
 8001f8c:	e7ca      	b.n	8001f24 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	4d23      	ldr	r5, [pc, #140]	; (8002020 <HAL_RCC_ClockConfig+0x118>)
 8001f92:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	d11b      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	d0b9      	beq.n	8001f12 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	68ab      	ldr	r3, [r5, #8]
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fb22 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fb0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	68ab      	ldr	r3, [r5, #8]
 8001fb4:	6862      	ldr	r2, [r4, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fbe:	d0b4      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe fb16 	bl	80005f0 <HAL_GetTick>
 8001fc4:	1bc0      	subs	r0, r0, r7
 8001fc6:	4540      	cmp	r0, r8
 8001fc8:	d9f3      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
}
 8001fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	2a02      	cmp	r2, #2
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fd8:	e7e0      	b.n	8001f9c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fda:	b912      	cbnz	r2, 8001fe2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fdc:	f013 0f02 	tst.w	r3, #2
 8001fe0:	e7dc      	b.n	8001f9c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fe6:	e7d9      	b.n	8001f9c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_RCC_ClockConfig+0x118>)
 8001fea:	68a0      	ldr	r0, [r4, #8]
 8001fec:	6893      	ldr	r3, [r2, #8]
 8001fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff2:	4303      	orrs	r3, r0
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e79b      	b.n	8001f30 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	6813      	ldr	r3, [r2, #0]
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	4333      	orrs	r3, r6
 8002000:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	429e      	cmp	r6, r3
 800200a:	d182      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xa>
 800200c:	e796      	b.n	8001f3c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200e:	68ab      	ldr	r3, [r5, #8]
 8002010:	68e2      	ldr	r2, [r4, #12]
 8002012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002016:	4313      	orrs	r3, r2
 8002018:	60ab      	str	r3, [r5, #8]
 800201a:	e793      	b.n	8001f44 <HAL_RCC_ClockConfig+0x3c>
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	080042ff 	.word	0x080042ff
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x18>)
 800202e:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 800203a:	6810      	ldr	r0, [r2, #0]
 800203c:	f003 031f 	and.w	r3, r3, #31
}
 8002040:	40d8      	lsrs	r0, r3
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	0800430f 	.word	0x0800430f
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800205e:	6810      	ldr	r0, [r2, #0]
 8002060:	f003 031f 	and.w	r3, r3, #31
}
 8002064:	40d8      	lsrs	r0, r3
 8002066:	4770      	bx	lr
 8002068:	40021000 	.word	0x40021000
 800206c:	0800430f 	.word	0x0800430f
 8002070:	20000000 	.word	0x20000000

08002074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002076:	4b45      	ldr	r3, [pc, #276]	; (800218c <RCCEx_PLLSAI1_Config+0x118>)
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	f012 0f03 	tst.w	r2, #3
{
 800207e:	4605      	mov	r5, r0
 8002080:	460e      	mov	r6, r1
 8002082:	461c      	mov	r4, r3
 8002084:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002086:	d02a      	beq.n	80020de <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	4282      	cmp	r2, r0
 8002090:	d13c      	bne.n	800210c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002092:	2a00      	cmp	r2, #0
 8002094:	d03a      	beq.n	800210c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002096:	68db      	ldr	r3, [r3, #12]
       ||
 8002098:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800209a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800209e:	3301      	adds	r3, #1
       ||
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d133      	bne.n	800210c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ac:	f7fe faa0 	bl	80005f0 <HAL_GetTick>
 80020b0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	011a      	lsls	r2, r3, #4
 80020b6:	d432      	bmi.n	800211e <RCCEx_PLLSAI1_Config+0xaa>
 80020b8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020ba:	2e00      	cmp	r6, #0
 80020bc:	d036      	beq.n	800212c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020be:	2e01      	cmp	r6, #1
 80020c0:	d150      	bne.n	8002164 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020c2:	6922      	ldr	r2, [r4, #16]
 80020c4:	6928      	ldr	r0, [r5, #16]
 80020c6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020ca:	0840      	lsrs	r0, r0, #1
 80020cc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80020d0:	3801      	subs	r0, #1
 80020d2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80020d6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80020da:	6122      	str	r2, [r4, #16]
 80020dc:	e032      	b.n	8002144 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80020de:	2802      	cmp	r0, #2
 80020e0:	d010      	beq.n	8002104 <RCCEx_PLLSAI1_Config+0x90>
 80020e2:	2803      	cmp	r0, #3
 80020e4:	d014      	beq.n	8002110 <RCCEx_PLLSAI1_Config+0x9c>
 80020e6:	2801      	cmp	r0, #1
 80020e8:	d110      	bne.n	800210c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	079f      	lsls	r7, r3, #30
 80020ee:	d538      	bpl.n	8002162 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020f0:	68e3      	ldr	r3, [r4, #12]
 80020f2:	686a      	ldr	r2, [r5, #4]
 80020f4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80020f8:	3a01      	subs	r2, #1
 80020fa:	4318      	orrs	r0, r3
 80020fc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002100:	60e0      	str	r0, [r4, #12]
 8002102:	e7cf      	b.n	80020a4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800210a:	d1f1      	bne.n	80020f0 <RCCEx_PLLSAI1_Config+0x7c>
 800210c:	2001      	movs	r0, #1
 800210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	0391      	lsls	r1, r2, #14
 8002114:	d4ec      	bmi.n	80020f0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800211c:	e7f5      	b.n	800210a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800211e:	f7fe fa67 	bl	80005f0 <HAL_GetTick>
 8002122:	1bc0      	subs	r0, r0, r7
 8002124:	2802      	cmp	r0, #2
 8002126:	d9c4      	bls.n	80020b2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8002128:	2003      	movs	r0, #3
 800212a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800212c:	6921      	ldr	r1, [r4, #16]
 800212e:	68eb      	ldr	r3, [r5, #12]
 8002130:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002134:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002138:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002142:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fa50 	bl	80005f0 <HAL_GetTick>
 8002150:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	d513      	bpl.n	8002180 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	69aa      	ldr	r2, [r5, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	6123      	str	r3, [r4, #16]
 8002160:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002164:	6923      	ldr	r3, [r4, #16]
 8002166:	6968      	ldr	r0, [r5, #20]
 8002168:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800216c:	0840      	lsrs	r0, r0, #1
 800216e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002172:	3801      	subs	r0, #1
 8002174:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002178:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800217c:	6123      	str	r3, [r4, #16]
 800217e:	e7e1      	b.n	8002144 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002180:	f7fe fa36 	bl	80005f0 <HAL_GetTick>
 8002184:	1b80      	subs	r0, r0, r6
 8002186:	2802      	cmp	r0, #2
 8002188:	d9e3      	bls.n	8002152 <RCCEx_PLLSAI1_Config+0xde>
 800218a:	e7cd      	b.n	8002128 <RCCEx_PLLSAI1_Config+0xb4>
 800218c:	40021000 	.word	0x40021000

08002190 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <RCCEx_PLLSAI2_Config+0xf8>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f012 0f03 	tst.w	r2, #3
{
 800219a:	4605      	mov	r5, r0
 800219c:	460e      	mov	r6, r1
 800219e:	461c      	mov	r4, r3
 80021a0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021a2:	d028      	beq.n	80021f6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	f002 0203 	and.w	r2, r2, #3
 80021aa:	4282      	cmp	r2, r0
 80021ac:	d13a      	bne.n	8002224 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80021ae:	2a00      	cmp	r2, #0
 80021b0:	d038      	beq.n	8002224 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021b2:	68db      	ldr	r3, [r3, #12]
       ||
 80021b4:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80021b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021ba:	3301      	adds	r3, #1
       ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d131      	bne.n	8002224 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fa12 	bl	80005f0 <HAL_GetTick>
 80021cc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	009a      	lsls	r2, r3, #2
 80021d2:	d430      	bmi.n	8002236 <RCCEx_PLLSAI2_Config+0xa6>
 80021d4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021d6:	2e00      	cmp	r6, #0
 80021d8:	d034      	beq.n	8002244 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80021da:	6963      	ldr	r3, [r4, #20]
 80021dc:	6929      	ldr	r1, [r5, #16]
 80021de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021e2:	0849      	lsrs	r1, r1, #1
 80021e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021e8:	3901      	subs	r1, #1
 80021ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80021ee:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80021f2:	6163      	str	r3, [r4, #20]
 80021f4:	e032      	b.n	800225c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d010      	beq.n	800221c <RCCEx_PLLSAI2_Config+0x8c>
 80021fa:	2803      	cmp	r0, #3
 80021fc:	d014      	beq.n	8002228 <RCCEx_PLLSAI2_Config+0x98>
 80021fe:	2801      	cmp	r0, #1
 8002200:	d110      	bne.n	8002224 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	079f      	lsls	r7, r3, #30
 8002206:	d538      	bpl.n	800227a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002208:	68e3      	ldr	r3, [r4, #12]
 800220a:	686a      	ldr	r2, [r5, #4]
 800220c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002210:	3a01      	subs	r2, #1
 8002212:	4318      	orrs	r0, r3
 8002214:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002218:	60e0      	str	r0, [r4, #12]
 800221a:	e7d1      	b.n	80021c0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002222:	d1f1      	bne.n	8002208 <RCCEx_PLLSAI2_Config+0x78>
 8002224:	2001      	movs	r0, #1
 8002226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	0391      	lsls	r1, r2, #14
 800222c:	d4ec      	bmi.n	8002208 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002234:	e7f5      	b.n	8002222 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002236:	f7fe f9db 	bl	80005f0 <HAL_GetTick>
 800223a:	1bc0      	subs	r0, r0, r7
 800223c:	2802      	cmp	r0, #2
 800223e:	d9c6      	bls.n	80021ce <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002240:	2003      	movs	r0, #3
 8002242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002244:	6962      	ldr	r2, [r4, #20]
 8002246:	68eb      	ldr	r3, [r5, #12]
 8002248:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800224c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002250:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800225a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe f9c4 	bl	80005f0 <HAL_GetTick>
 8002268:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	d505      	bpl.n	800227c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002270:	6963      	ldr	r3, [r4, #20]
 8002272:	696a      	ldr	r2, [r5, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	6163      	str	r3, [r4, #20]
 8002278:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800227c:	f7fe f9b8 	bl	80005f0 <HAL_GetTick>
 8002280:	1b80      	subs	r0, r0, r6
 8002282:	2802      	cmp	r0, #2
 8002284:	d9f1      	bls.n	800226a <RCCEx_PLLSAI2_Config+0xda>
 8002286:	e7db      	b.n	8002240 <RCCEx_PLLSAI2_Config+0xb0>
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCCEx_PeriphCLKConfig>:
{
 800228c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002290:	6806      	ldr	r6, [r0, #0]
 8002292:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002296:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002298:	d024      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800229a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800229c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80022a0:	d02c      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x70>
 80022a2:	d802      	bhi.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80022a4:	b1c1      	cbz	r1, 80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80022a6:	2601      	movs	r6, #1
 80022a8:	e01c      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80022aa:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80022ae:	d00d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022b0:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80022b4:	d1f7      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022b6:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80022ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022c2:	430b      	orrs	r3, r1
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022c8:	2600      	movs	r6, #0
 80022ca:	e00b      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022cc:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	68d3      	ldr	r3, [r2, #12]
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d4:	60d3      	str	r3, [r2, #12]
      break;
 80022d6:	e7ee      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d8:	3004      	adds	r0, #4
 80022da:	f7ff fecb 	bl	8002074 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022de:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80022e0:	2800      	cmp	r0, #0
 80022e2:	d0e8      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	04d8      	lsls	r0, r3, #19
 80022e8:	d506      	bpl.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80022ea:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80022ec:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80022f0:	d074      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80022f2:	d808      	bhi.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022f4:	b1a9      	cbz	r1, 8002322 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80022f6:	2601      	movs	r6, #1
 80022f8:	4635      	mov	r5, r6
 80022fa:	e021      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	2100      	movs	r1, #0
 80022fe:	3020      	adds	r0, #32
 8002300:	f7ff ff46 	bl	8002190 <RCCEx_PLLSAI2_Config>
 8002304:	e7eb      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002306:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800230a:	d004      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800230c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002310:	d1f1      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002312:	4635      	mov	r5, r6
 8002314:	e009      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002316:	4a35      	ldr	r2, [pc, #212]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	68d3      	ldr	r3, [r2, #12]
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	60d3      	str	r3, [r2, #12]
 8002320:	e7f7      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002322:	1d20      	adds	r0, r4, #4
 8002324:	f7ff fea6 	bl	8002074 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002328:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800232a:	2d00      	cmp	r5, #0
 800232c:	d15c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002332:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002336:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800233a:	430b      	orrs	r3, r1
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	0399      	lsls	r1, r3, #14
 8002344:	f140 814f 	bpl.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002348:	4f28      	ldr	r7, [pc, #160]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800234c:	00da      	lsls	r2, r3, #3
 800234e:	f140 8176 	bpl.w	800263e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002352:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002356:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80023f0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800235a:	f8d9 3000 	ldr.w	r3, [r9]
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002366:	f7fe f943 	bl	80005f0 <HAL_GetTick>
 800236a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800236c:	f8d9 3000 	ldr.w	r3, [r9]
 8002370:	05db      	lsls	r3, r3, #23
 8002372:	d53f      	bpl.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002374:	2d00      	cmp	r5, #0
 8002376:	d144      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800237c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002380:	d015      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002382:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002386:	4293      	cmp	r3, r2
 8002388:	d011      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800238a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800238e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002392:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002396:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800239a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800239e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023ae:	07d8      	lsls	r0, r3, #31
 80023b0:	d509      	bpl.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80023b2:	f7fe f91d 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023ba:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c0:	0799      	lsls	r1, r3, #30
 80023c2:	f140 8109 	bpl.w	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ca:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023d8:	4635      	mov	r5, r6
 80023da:	e012      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023dc:	2100      	movs	r1, #0
 80023de:	f104 0020 	add.w	r0, r4, #32
 80023e2:	f7ff fed5 	bl	8002190 <RCCEx_PLLSAI2_Config>
 80023e6:	e79f      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80023e8:	462e      	mov	r6, r5
 80023ea:	e7a9      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe f8fc 	bl	80005f0 <HAL_GetTick>
 80023f8:	eba0 000a 	sub.w	r0, r0, sl
 80023fc:	2802      	cmp	r0, #2
 80023fe:	d9b5      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002400:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002402:	f1b8 0f00 	cmp.w	r8, #0
 8002406:	d003      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	07da      	lsls	r2, r3, #31
 8002414:	d508      	bpl.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002416:	4990      	ldr	r1, [pc, #576]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002418:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800241a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800241e:	f022 0203 	bic.w	r2, r2, #3
 8002422:	4302      	orrs	r2, r0
 8002424:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002428:	079f      	lsls	r7, r3, #30
 800242a:	d508      	bpl.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242c:	498a      	ldr	r1, [pc, #552]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800242e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002430:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002434:	f022 020c 	bic.w	r2, r2, #12
 8002438:	4302      	orrs	r2, r0
 800243a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243e:	075e      	lsls	r6, r3, #29
 8002440:	d508      	bpl.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002442:	4985      	ldr	r1, [pc, #532]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002444:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002446:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800244a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800244e:	4302      	orrs	r2, r0
 8002450:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002454:	0718      	lsls	r0, r3, #28
 8002456:	d508      	bpl.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002458:	497f      	ldr	r1, [pc, #508]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800245a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800245c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002460:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002464:	4302      	orrs	r2, r0
 8002466:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800246a:	06d9      	lsls	r1, r3, #27
 800246c:	d508      	bpl.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800246e:	497a      	ldr	r1, [pc, #488]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002470:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002472:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002476:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800247a:	4302      	orrs	r2, r0
 800247c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002480:	069a      	lsls	r2, r3, #26
 8002482:	d508      	bpl.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002484:	4974      	ldr	r1, [pc, #464]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002486:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002488:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800248c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002490:	4302      	orrs	r2, r0
 8002492:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002496:	059f      	lsls	r7, r3, #22
 8002498:	d508      	bpl.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249a:	496f      	ldr	r1, [pc, #444]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800249c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800249e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024a2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80024a6:	4302      	orrs	r2, r0
 80024a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ac:	055e      	lsls	r6, r3, #21
 80024ae:	d508      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024b0:	4969      	ldr	r1, [pc, #420]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024b2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80024b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024bc:	4302      	orrs	r2, r0
 80024be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c2:	0658      	lsls	r0, r3, #25
 80024c4:	d508      	bpl.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c6:	4964      	ldr	r1, [pc, #400]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80024ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024d2:	4302      	orrs	r2, r0
 80024d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d8:	0619      	lsls	r1, r3, #24
 80024da:	d508      	bpl.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024dc:	495e      	ldr	r1, [pc, #376]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80024e8:	4302      	orrs	r2, r0
 80024ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ee:	05da      	lsls	r2, r3, #23
 80024f0:	d508      	bpl.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f2:	4959      	ldr	r1, [pc, #356]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024fa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80024fe:	4302      	orrs	r2, r0
 8002500:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002504:	049b      	lsls	r3, r3, #18
 8002506:	d50f      	bpl.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002508:	4a53      	ldr	r2, [pc, #332]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800250a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800250c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002510:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002514:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002516:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800251e:	d164      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002520:	68d3      	ldr	r3, [r2, #12]
 8002522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002526:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	031f      	lsls	r7, r3, #12
 800252c:	d50f      	bpl.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800252e:	4a4a      	ldr	r2, [pc, #296]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002530:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002532:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002536:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800253a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800253c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002544:	d15c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002546:	68d3      	ldr	r3, [r2, #12]
 8002548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	035e      	lsls	r6, r3, #13
 8002552:	d50f      	bpl.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002554:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002556:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002558:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800255c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002560:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002562:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002566:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800256a:	d154      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	68d3      	ldr	r3, [r2, #12]
 800256e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002572:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	0458      	lsls	r0, r3, #17
 8002578:	d512      	bpl.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800257a:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800257c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800257e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002582:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002586:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002588:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002590:	d14c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002592:	2102      	movs	r1, #2
 8002594:	1d20      	adds	r0, r4, #4
 8002596:	f7ff fd6d 	bl	8002074 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800259a:	2800      	cmp	r0, #0
 800259c:	bf18      	it	ne
 800259e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	0411      	lsls	r1, r2, #16
 80025a4:	d508      	bpl.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025a6:	492c      	ldr	r1, [pc, #176]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80025aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b2:	4303      	orrs	r3, r0
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025b8:	03d3      	lsls	r3, r2, #15
 80025ba:	d509      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025be:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80025c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ca:	430b      	orrs	r3, r1
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80025d0:	4628      	mov	r0, r5
 80025d2:	b002      	add	sp, #8
 80025d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d8:	f7fe f80a 	bl	80005f0 <HAL_GetTick>
 80025dc:	1b40      	subs	r0, r0, r5
 80025de:	4548      	cmp	r0, r9
 80025e0:	f67f aeec 	bls.w	80023bc <HAL_RCCEx_PeriphCLKConfig+0x130>
 80025e4:	e70c      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80025e6:	4635      	mov	r5, r6
 80025e8:	e712      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ea:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80025ee:	d19b      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f0:	2101      	movs	r1, #1
 80025f2:	1d20      	adds	r0, r4, #4
 80025f4:	f7ff fd3e 	bl	8002074 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf18      	it	ne
 80025fc:	4605      	movne	r5, r0
 80025fe:	e793      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002600:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002604:	d1a3      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002606:	2101      	movs	r1, #1
 8002608:	1d20      	adds	r0, r4, #4
 800260a:	f7ff fd33 	bl	8002074 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800260e:	2800      	cmp	r0, #0
 8002610:	bf18      	it	ne
 8002612:	4605      	movne	r5, r0
 8002614:	e79b      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002616:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800261a:	d1ab      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800261c:	2101      	movs	r1, #1
 800261e:	1d20      	adds	r0, r4, #4
 8002620:	f7ff fd28 	bl	8002074 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002624:	2800      	cmp	r0, #0
 8002626:	bf18      	it	ne
 8002628:	4605      	movne	r5, r0
 800262a:	e7a3      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800262c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002630:	d1b6      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002632:	2102      	movs	r1, #2
 8002634:	f104 0020 	add.w	r0, r4, #32
 8002638:	f7ff fdaa 	bl	8002190 <RCCEx_PLLSAI2_Config>
 800263c:	e7ad      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	65bb      	str	r3, [r7, #88]	; 0x58
 8002646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002650:	f04f 0801 	mov.w	r8, #1
 8002654:	e67f      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800265c:	4a02      	ldr	r2, [pc, #8]	; (8002668 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800266c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800266e:	4604      	mov	r4, r0
 8002670:	2800      	cmp	r0, #0
 8002672:	d04a      	beq.n	800270a <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002678:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800267c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002680:	b91b      	cbnz	r3, 800268a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002682:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002686:	f001 f845 	bl	8003714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800268a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800268c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800268e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002692:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002694:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800269a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a4:	d92e      	bls.n	8002704 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026a6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026a8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ac:	bf18      	it	ne
 80026ae:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80026b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026b2:	b92b      	cbnz	r3, 80026c0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026b4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80026b8:	bf8c      	ite	hi
 80026ba:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80026bc:	2301      	movls	r3, #1
 80026be:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80026c0:	68a6      	ldr	r6, [r4, #8]
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	69a5      	ldr	r5, [r4, #24]
 80026c6:	4333      	orrs	r3, r6
 80026c8:	6926      	ldr	r6, [r4, #16]
 80026ca:	4333      	orrs	r3, r6
 80026cc:	6966      	ldr	r6, [r4, #20]
 80026ce:	4333      	orrs	r3, r6
 80026d0:	69e6      	ldr	r6, [r4, #28]
 80026d2:	4333      	orrs	r3, r6
 80026d4:	6a26      	ldr	r6, [r4, #32]
 80026d6:	4333      	orrs	r3, r6
 80026d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026da:	4333      	orrs	r3, r6
 80026dc:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80026e0:	4333      	orrs	r3, r6
 80026e2:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026ea:	0c2d      	lsrs	r5, r5, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	f005 0504 	and.w	r5, r5, #4
 80026f2:	432a      	orrs	r2, r5
 80026f4:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80026f6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80026fa:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026fc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8002702:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002704:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002708:	e7d0      	b.n	80026ac <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
}
 800270c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002710 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002710:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002712:	69c1      	ldr	r1, [r0, #28]
{
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002718:	6883      	ldr	r3, [r0, #8]
 800271a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800271e:	4303      	orrs	r3, r0
 8002720:	6960      	ldr	r0, [r4, #20]
 8002722:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002724:	48ba      	ldr	r0, [pc, #744]	; (8002a10 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002726:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002728:	4028      	ands	r0, r5
 800272a:	4303      	orrs	r3, r0
 800272c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800272e:	6853      	ldr	r3, [r2, #4]
 8002730:	68e0      	ldr	r0, [r4, #12]
 8002732:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002736:	4303      	orrs	r3, r0
 8002738:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800273a:	4bb6      	ldr	r3, [pc, #728]	; (8002a14 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800273c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800273e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002740:	bf1c      	itt	ne
 8002742:	6a23      	ldrne	r3, [r4, #32]
 8002744:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002746:	6893      	ldr	r3, [r2, #8]
 8002748:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800274c:	4303      	orrs	r3, r0
 800274e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002750:	4bb1      	ldr	r3, [pc, #708]	; (8002a18 <UART_SetConfig+0x308>)
 8002752:	429a      	cmp	r2, r3
 8002754:	d119      	bne.n	800278a <UART_SetConfig+0x7a>
 8002756:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800275a:	4ab0      	ldr	r2, [pc, #704]	; (8002a1c <UART_SetConfig+0x30c>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002764:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	f040 8138 	bne.w	80029de <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 800276e:	2b08      	cmp	r3, #8
 8002770:	f200 808f 	bhi.w	8002892 <UART_SetConfig+0x182>
 8002774:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002778:	00ca011a 	.word	0x00ca011a
 800277c:	008d00f9 	.word	0x008d00f9
 8002780:	008d0114 	.word	0x008d0114
 8002784:	008d008d 	.word	0x008d008d
 8002788:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278a:	4ba5      	ldr	r3, [pc, #660]	; (8002a20 <UART_SetConfig+0x310>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <UART_SetConfig+0x90>
 8002790:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002794:	4aa3      	ldr	r2, [pc, #652]	; (8002a24 <UART_SetConfig+0x314>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	e7e1      	b.n	8002764 <UART_SetConfig+0x54>
 80027a0:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <UART_SetConfig+0x318>)
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d123      	bne.n	80027ee <UART_SetConfig+0xde>
 80027a6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027b2:	2b10      	cmp	r3, #16
 80027b4:	f000 80f1 	beq.w	800299a <UART_SetConfig+0x28a>
 80027b8:	d80b      	bhi.n	80027d2 <UART_SetConfig+0xc2>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80f3 	beq.w	80029a6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80027c4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80027c8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027cc:	f000 80f8 	beq.w	80029c0 <UART_SetConfig+0x2b0>
 80027d0:	e0a8      	b.n	8002924 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	f000 80c6 	beq.w	8002964 <UART_SetConfig+0x254>
 80027d8:	2b30      	cmp	r3, #48	; 0x30
 80027da:	d1f1      	bne.n	80027c0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80027e0:	f040 80b8 	bne.w	8002954 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027e4:	6860      	ldr	r0, [r4, #4]
 80027e6:	0843      	lsrs	r3, r0, #1
 80027e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80027ec:	e0c3      	b.n	8002976 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ee:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <UART_SetConfig+0x31c>)
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d11e      	bne.n	8002832 <UART_SetConfig+0x122>
 80027f4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	f000 80bb 	beq.w	800297c <UART_SetConfig+0x26c>
 8002806:	d80a      	bhi.n	800281e <UART_SetConfig+0x10e>
 8002808:	b97b      	cbnz	r3, 800282a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <UART_SetConfig+0x304>)
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 80ca 	bne.w	80029a6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002812:	f7ff fc0b 	bl	800202c <HAL_RCC_GetPCLK1Freq>
        break;
 8002816:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002818:	bbb0      	cbnz	r0, 8002888 <UART_SetConfig+0x178>
 800281a:	4602      	mov	r2, r0
 800281c:	e03a      	b.n	8002894 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	f000 809d 	beq.w	800295e <UART_SetConfig+0x24e>
 8002824:	2bc0      	cmp	r3, #192	; 0xc0
 8002826:	f000 80b0 	beq.w	800298a <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 800282a:	4b7a      	ldr	r3, [pc, #488]	; (8002a14 <UART_SetConfig+0x304>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d1c7      	bne.n	80027c0 <UART_SetConfig+0xb0>
 8002830:	e02f      	b.n	8002892 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002832:	4b7f      	ldr	r3, [pc, #508]	; (8002a30 <UART_SetConfig+0x320>)
 8002834:	429a      	cmp	r2, r3
 8002836:	d111      	bne.n	800285c <UART_SetConfig+0x14c>
 8002838:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002848:	f000 8098 	beq.w	800297c <UART_SetConfig+0x26c>
 800284c:	d9dc      	bls.n	8002808 <UART_SetConfig+0xf8>
 800284e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002852:	f000 8084 	beq.w	800295e <UART_SetConfig+0x24e>
 8002856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800285a:	e7e4      	b.n	8002826 <UART_SetConfig+0x116>
 800285c:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <UART_SetConfig+0x304>)
 800285e:	429a      	cmp	r2, r3
 8002860:	d1ae      	bne.n	80027c0 <UART_SetConfig+0xb0>
 8002862:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	f000 8083 	beq.w	800297c <UART_SetConfig+0x26c>
 8002876:	d9c7      	bls.n	8002808 <UART_SetConfig+0xf8>
 8002878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800287c:	d06f      	beq.n	800295e <UART_SetConfig+0x24e>
 800287e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002882:	e7d0      	b.n	8002826 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002884:	486b      	ldr	r0, [pc, #428]	; (8002a34 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002886:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002888:	6862      	ldr	r2, [r4, #4]
 800288a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800288e:	4281      	cmp	r1, r0
 8002890:	d905      	bls.n	800289e <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002892:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002898:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800289a:	4610      	mov	r0, r2
 800289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 800289e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80028a2:	d8f6      	bhi.n	8002892 <UART_SetConfig+0x182>
        switch (clocksource)
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d82e      	bhi.n	8002906 <UART_SetConfig+0x1f6>
 80028a8:	e8df f003 	tbb	[pc, r3]
 80028ac:	2d1c2d05 	.word	0x2d1c2d05
 80028b0:	2d2d2d24 	.word	0x2d2d2d24
 80028b4:	27          	.byte	0x27
 80028b5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028b6:	f7ff fbb9 	bl	800202c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028ba:	6862      	ldr	r2, [r4, #4]
 80028bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c0:	0856      	lsrs	r6, r2, #1
 80028c2:	2700      	movs	r7, #0
 80028c4:	fbe1 6700 	umlal	r6, r7, r1, r0
 80028c8:	2300      	movs	r3, #0
 80028ca:	4630      	mov	r0, r6
 80028cc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80028ce:	f7fd fcd7 	bl	8000280 <__aeabi_uldivmod>
            break;
 80028d2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <UART_SetConfig+0x328>)
 80028d6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80028da:	4299      	cmp	r1, r3
 80028dc:	d8d9      	bhi.n	8002892 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 80028de:	6823      	ldr	r3, [r4, #0]
 80028e0:	60d8      	str	r0, [r3, #12]
 80028e2:	e7d7      	b.n	8002894 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80028e4:	4855      	ldr	r0, [pc, #340]	; (8002a3c <UART_SetConfig+0x32c>)
 80028e6:	0855      	lsrs	r5, r2, #1
 80028e8:	2300      	movs	r3, #0
 80028ea:	2100      	movs	r1, #0
 80028ec:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80028ee:	f141 0100 	adc.w	r1, r1, #0
 80028f2:	e7ec      	b.n	80028ce <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028f4:	f7ff f88e 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80028f8:	e7df      	b.n	80028ba <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80028fa:	0850      	lsrs	r0, r2, #1
 80028fc:	2100      	movs	r1, #0
 80028fe:	2300      	movs	r3, #0
 8002900:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002904:	e7f3      	b.n	80028ee <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002906:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002908:	2000      	movs	r0, #0
 800290a:	e7e3      	b.n	80028d4 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800290c:	f7ff fba0 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 8002910:	e04e      	b.n	80029b0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002912:	f7ff fb8b 	bl	800202c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800291c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002920:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002922:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002924:	f1a3 0010 	sub.w	r0, r3, #16
 8002928:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800292c:	4288      	cmp	r0, r1
 800292e:	d8b0      	bhi.n	8002892 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002930:	6821      	ldr	r1, [r4, #0]
 8002932:	60cb      	str	r3, [r1, #12]
 8002934:	e7ae      	b.n	8002894 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002936:	f7ff fb8b 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 800293a:	e7ec      	b.n	8002916 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800293c:	6860      	ldr	r0, [r4, #4]
 800293e:	0843      	lsrs	r3, r0, #1
 8002940:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002944:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002948:	fbb3 f3f0 	udiv	r3, r3, r0
 800294c:	e7e8      	b.n	8002920 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800294e:	f7ff f861 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002952:	e7e0      	b.n	8002916 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002954:	6860      	ldr	r0, [r4, #4]
 8002956:	0843      	lsrs	r3, r0, #1
 8002958:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800295c:	e7f4      	b.n	8002948 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <UART_SetConfig+0x304>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d08f      	beq.n	8002884 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002964:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002968:	d1e8      	bne.n	800293c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800296a:	6860      	ldr	r0, [r4, #4]
 800296c:	0843      	lsrs	r3, r0, #1
 800296e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002972:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002976:	fbb3 f3f0 	udiv	r3, r3, r0
 800297a:	e01f      	b.n	80029bc <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <UART_SetConfig+0x304>)
 800297e:	429a      	cmp	r2, r3
 8002980:	d10b      	bne.n	800299a <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002982:	f7ff f847 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
        break;
 8002986:	2304      	movs	r3, #4
 8002988:	e746      	b.n	8002818 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <UART_SetConfig+0x304>)
 800298c:	429a      	cmp	r2, r3
 800298e:	f47f af25 	bne.w	80027dc <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002992:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002996:	2308      	movs	r3, #8
 8002998:	e776      	b.n	8002888 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800299e:	d1d6      	bne.n	800294e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029a0:	f7ff f838 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80029a4:	e004      	b.n	80029b0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80029aa:	d1b2      	bne.n	8002912 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029ac:	f7ff fb3e 	bl	800202c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b0:	6861      	ldr	r1, [r4, #4]
 80029b2:	084a      	lsrs	r2, r1, #1
 80029b4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80029b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80029bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80029be:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c0:	f1a3 0010 	sub.w	r0, r3, #16
 80029c4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80029c8:	4288      	cmp	r0, r1
 80029ca:	f63f af62 	bhi.w	8002892 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 80029ce:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 80029d2:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80029d8:	430b      	orrs	r3, r1
 80029da:	60c3      	str	r3, [r0, #12]
 80029dc:	e75a      	b.n	8002894 <UART_SetConfig+0x184>
    switch (clocksource)
 80029de:	2b08      	cmp	r3, #8
 80029e0:	f63f af57 	bhi.w	8002892 <UART_SetConfig+0x182>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <UART_SetConfig+0x2dc>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	08002913 	.word	0x08002913
 80029f0:	08002937 	.word	0x08002937
 80029f4:	0800293d 	.word	0x0800293d
 80029f8:	08002893 	.word	0x08002893
 80029fc:	0800294f 	.word	0x0800294f
 8002a00:	08002893 	.word	0x08002893
 8002a04:	08002893 	.word	0x08002893
 8002a08:	08002893 	.word	0x08002893
 8002a0c:	08002955 	.word	0x08002955
 8002a10:	efff69f3 	.word	0xefff69f3
 8002a14:	40008000 	.word	0x40008000
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	080042d0 	.word	0x080042d0
 8002a20:	40004400 	.word	0x40004400
 8002a24:	080042d4 	.word	0x080042d4
 8002a28:	40004800 	.word	0x40004800
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40005000 	.word	0x40005000
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	000ffcff 	.word	0x000ffcff
 8002a3c:	f4240000 	.word	0xf4240000

08002a40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a42:	07da      	lsls	r2, r3, #31
{
 8002a44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a46:	d506      	bpl.n	8002a56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002a4c:	684a      	ldr	r2, [r1, #4]
 8002a4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002a52:	4322      	orrs	r2, r4
 8002a54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a56:	079c      	lsls	r4, r3, #30
 8002a58:	d506      	bpl.n	8002a68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a5a:	6801      	ldr	r1, [r0, #0]
 8002a5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002a5e:	684a      	ldr	r2, [r1, #4]
 8002a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a64:	4322      	orrs	r2, r4
 8002a66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a68:	0759      	lsls	r1, r3, #29
 8002a6a:	d506      	bpl.n	8002a7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a6c:	6801      	ldr	r1, [r0, #0]
 8002a6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002a70:	684a      	ldr	r2, [r1, #4]
 8002a72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a76:	4322      	orrs	r2, r4
 8002a78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a7a:	071a      	lsls	r2, r3, #28
 8002a7c:	d506      	bpl.n	8002a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a7e:	6801      	ldr	r1, [r0, #0]
 8002a80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a82:	684a      	ldr	r2, [r1, #4]
 8002a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a88:	4322      	orrs	r2, r4
 8002a8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a8c:	06dc      	lsls	r4, r3, #27
 8002a8e:	d506      	bpl.n	8002a9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a90:	6801      	ldr	r1, [r0, #0]
 8002a92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002a94:	688a      	ldr	r2, [r1, #8]
 8002a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a9a:	4322      	orrs	r2, r4
 8002a9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a9e:	0699      	lsls	r1, r3, #26
 8002aa0:	d506      	bpl.n	8002ab0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002aa2:	6801      	ldr	r1, [r0, #0]
 8002aa4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002aa6:	688a      	ldr	r2, [r1, #8]
 8002aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aac:	4322      	orrs	r2, r4
 8002aae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	065a      	lsls	r2, r3, #25
 8002ab2:	d50f      	bpl.n	8002ad4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ab4:	6801      	ldr	r1, [r0, #0]
 8002ab6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ab8:	684a      	ldr	r2, [r1, #4]
 8002aba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002abe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ac4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac6:	d105      	bne.n	8002ad4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ac8:	684a      	ldr	r2, [r1, #4]
 8002aca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002acc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ad0:	4322      	orrs	r2, r4
 8002ad2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	d506      	bpl.n	8002ae6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad8:	6802      	ldr	r2, [r0, #0]
 8002ada:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002adc:	6853      	ldr	r3, [r2, #4]
 8002ade:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6053      	str	r3, [r2, #4]
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	9d06      	ldr	r5, [sp, #24]
 8002aee:	4604      	mov	r4, r0
 8002af0:	460f      	mov	r7, r1
 8002af2:	4616      	mov	r6, r2
 8002af4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	69ca      	ldr	r2, [r1, #28]
 8002afa:	ea37 0302 	bics.w	r3, r7, r2
 8002afe:	bf0c      	ite	eq
 8002b00:	2201      	moveq	r2, #1
 8002b02:	2200      	movne	r2, #0
 8002b04:	42b2      	cmp	r2, r6
 8002b06:	d002      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002b08:	2000      	movs	r0, #0
}
 8002b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	1c6b      	adds	r3, r5, #1
 8002b10:	d0f2      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b12:	b99d      	cbnz	r5, 8002b3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002b26:	2320      	movs	r3, #32
 8002b28:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002b30:	2300      	movs	r3, #0
 8002b32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002b36:	2003      	movs	r0, #3
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b3c:	f7fd fd58 	bl	80005f0 <HAL_GetTick>
 8002b40:	eba0 0008 	sub.w	r0, r0, r8
 8002b44:	4285      	cmp	r5, r0
 8002b46:	d2d6      	bcs.n	8002af6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002b48:	e7e4      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x2c>

08002b4a <HAL_UART_Transmit>:
{
 8002b4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002b4e:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b50:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002b54:	2b20      	cmp	r3, #32
{
 8002b56:	4604      	mov	r4, r0
 8002b58:	460d      	mov	r5, r1
 8002b5a:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002b5c:	d14a      	bne.n	8002bf4 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	2900      	cmp	r1, #0
 8002b60:	d046      	beq.n	8002bf0 <HAL_UART_Transmit+0xa6>
 8002b62:	2a00      	cmp	r2, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002b66:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d042      	beq.n	8002bf4 <HAL_UART_Transmit+0xaa>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b78:	2321      	movs	r3, #33	; 0x21
 8002b7a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002b7e:	f7fd fd37 	bl	80005f0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002b82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002b86:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002b88:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b8c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b90:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002b92:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b94:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8002b96:	b952      	cbnz	r2, 8002bae <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ffa4 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002ba0:	b958      	cbnz	r0, 8002bba <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002ba8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002bac:	e006      	b.n	8002bbc <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	f7ff ff98 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002bb8:	b118      	cbz	r0, 8002bc2 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002bba:	2003      	movs	r0, #3
}
 8002bbc:	b002      	add	sp, #8
 8002bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc2:	68a3      	ldr	r3, [r4, #8]
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d10d      	bne.n	8002be8 <HAL_UART_Transmit+0x9e>
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	b95b      	cbnz	r3, 8002be8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002bd0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002bda:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002be6:	e7d1      	b.n	8002b8c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002be8:	782b      	ldrb	r3, [r5, #0]
 8002bea:	8513      	strh	r3, [r2, #40]	; 0x28
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7f4      	b.n	8002bda <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	e7e3      	b.n	8002bbc <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	e7e1      	b.n	8002bbc <HAL_UART_Transmit+0x72>

08002bf8 <UART_CheckIdleState>:
{
 8002bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bfa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002c00:	f7fd fcf6 	bl	80005f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002c0a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0c:	d417      	bmi.n	8002c3e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	075b      	lsls	r3, r3, #29
 8002c14:	d50a      	bpl.n	8002c2c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	462b      	mov	r3, r5
 8002c20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ff5f 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002c2a:	b9a0      	cbnz	r0, 8002c56 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c2e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c30:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002c34:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002c38:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002c3c:	e00c      	b.n	8002c58 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4632      	mov	r2, r6
 8002c46:	4603      	mov	r3, r0
 8002c48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7ff ff4b 	bl	8002ae8 <UART_WaitOnFlagUntilTimeout>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0db      	beq.n	8002c0e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c56:	2003      	movs	r0, #3
}
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}

08002c5c <HAL_UART_Init>:
{
 8002c5c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002c5e:	4604      	mov	r4, r0
 8002c60:	b360      	cbz	r0, 8002cbc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002c66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c6a:	b91b      	cbnz	r3, 8002c74 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c6c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002c70:	f000 fd84 	bl	800377c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c76:	2324      	movs	r3, #36	; 0x24
 8002c78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff fd43 	bl	8002710 <UART_SetConfig>
 8002c8a:	2801      	cmp	r0, #1
 8002c8c:	d016      	beq.n	8002cbc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c90:	b113      	cbz	r3, 8002c98 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c92:	4620      	mov	r0, r4
 8002c94:	f7ff fed4 	bl	8002a40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002cb0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002cb2:	601a      	str	r2, [r3, #0]
}
 8002cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002cb8:	f7ff bf9e 	b.w	8002bf8 <UART_CheckIdleState>
}
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	d101      	bne.n	8002cca <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cca:	6902      	ldr	r2, [r0, #16]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	daf8      	bge.n	8002cc2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002cd0:	6903      	ldr	r3, [r0, #16]
 8002cd2:	4a06      	ldr	r2, [pc, #24]	; (8002cec <USB_CoreReset+0x2c>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002cda:	3a01      	subs	r2, #1
 8002cdc:	d0f3      	beq.n	8002cc6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002cde:	6903      	ldr	r3, [r0, #16]
 8002ce0:	f013 0301 	ands.w	r3, r3, #1
 8002ce4:	d1f9      	bne.n	8002cda <USB_CoreReset+0x1a>

  return HAL_OK;
 8002ce6:	4618      	mov	r0, r3
}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	00030d41 	.word	0x00030d41

08002cf0 <USB_CoreInit>:
{
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	b538      	push	{r3, r4, r5, lr}
 8002cf4:	ad05      	add	r5, sp, #20
 8002cf6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cfc:	2b01      	cmp	r3, #1
{
 8002cfe:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d00:	d11b      	bne.n	8002d3a <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d0a:	68c3      	ldr	r3, [r0, #12]
 8002d0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d14:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d16:	68c3      	ldr	r3, [r0, #12]
 8002d18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d1c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d20:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d22:	bf02      	ittt	eq
 8002d24:	68c3      	ldreq	r3, [r0, #12]
 8002d26:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002d2a:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002d2c:	f7ff ffc8 	bl	8002cc0 <USB_CoreReset>
}
 8002d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d34:	2000      	movs	r0, #0
 8002d36:	b004      	add	sp, #16
 8002d38:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d3a:	68c3      	ldr	r3, [r0, #12]
 8002d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d40:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002d42:	f7ff ffbd 	bl	8002cc0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d4c:	e7f0      	b.n	8002d30 <USB_CoreInit+0x40>

08002d4e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d4e:	6883      	ldr	r3, [r0, #8]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6083      	str	r3, [r0, #8]
}
 8002d56:	2000      	movs	r0, #0
 8002d58:	4770      	bx	lr

08002d5a <USB_SetCurrentMode>:
{
 8002d5a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d5c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002d5e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002d64:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002d66:	d108      	bne.n	8002d7a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d68:	68c3      	ldr	r3, [r0, #12]
 8002d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d6e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002d70:	2032      	movs	r0, #50	; 0x32
 8002d72:	f7fd fc43 	bl	80005fc <HAL_Delay>
  return HAL_OK;
 8002d76:	2000      	movs	r0, #0
 8002d78:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002d7a:	b919      	cbnz	r1, 8002d84 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d7c:	68c3      	ldr	r3, [r0, #12]
 8002d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	e7f4      	b.n	8002d6e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
}
 8002d86:	bd08      	pop	{r3, pc}

08002d88 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002d88:	0189      	lsls	r1, r1, #6
 8002d8a:	f041 0120 	orr.w	r1, r1, #32
 8002d8e:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <USB_FlushTxFifo+0x20>)
 8002d90:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002d92:	3a01      	subs	r2, #1
 8002d94:	d005      	beq.n	8002da2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d96:	6903      	ldr	r3, [r0, #16]
 8002d98:	f013 0320 	ands.w	r3, r3, #32
 8002d9c:	d1f9      	bne.n	8002d92 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002d9e:	4618      	mov	r0, r3
 8002da0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	00030d41 	.word	0x00030d41

08002dac <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002dac:	2310      	movs	r3, #16
 8002dae:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <USB_FlushRxFifo+0x1c>)
 8002db0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002db2:	3a01      	subs	r2, #1
 8002db4:	d005      	beq.n	8002dc2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002db6:	6903      	ldr	r3, [r0, #16]
 8002db8:	f013 0310 	ands.w	r3, r3, #16
 8002dbc:	d1f9      	bne.n	8002db2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dc2:	2003      	movs	r0, #3
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	00030d41 	.word	0x00030d41

08002dcc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002dcc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002dd0:	4319      	orrs	r1, r3
 8002dd2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	4770      	bx	lr
	...

08002ddc <USB_DevInit>:
{
 8002ddc:	b084      	sub	sp, #16
 8002dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	a807      	add	r0, sp, #28
 8002de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002dee:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8002df0:	4619      	mov	r1, r3
 8002df2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002df6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002dfe:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002e00:	d1f7      	bne.n	8002df2 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e08:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002e0a:	b95f      	cbnz	r7, 8002e24 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e12:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002e24:	2500      	movs	r5, #0
 8002e26:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e2a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002e2e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e32:	2103      	movs	r1, #3
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff ffc9 	bl	8002dcc <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e3a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002e3e:	2110      	movs	r1, #16
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff ffa1 	bl	8002d88 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff ffb0 	bl	8002dac <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8002e4c:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e4e:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8002e50:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e52:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8002e54:	61f5      	str	r5, [r6, #28]
 8002e56:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e5e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e62:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e66:	4543      	cmp	r3, r8
 8002e68:	d12f      	bne.n	8002eca <USB_DevInit+0xee>
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e70:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e72:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e76:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e7a:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d134      	bne.n	8002eec <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e82:	6933      	ldr	r3, [r6, #16]
 8002e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e88:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e8e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002e92:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e94:	69a3      	ldr	r3, [r4, #24]
 8002e96:	f043 0310 	orr.w	r3, r3, #16
 8002e9a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e9c:	69a2      	ldr	r2, [r4, #24]
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <USB_DevInit+0x134>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ea6:	b11b      	cbz	r3, 8002eb0 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ea8:	69a3      	ldr	r3, [r4, #24]
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002eb0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002eb2:	bf01      	itttt	eq
 8002eb4:	69a3      	ldreq	r3, [r4, #24]
 8002eb6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002eba:	f043 0304 	orreq.w	r3, r3, #4
 8002ebe:	61a3      	streq	r3, [r4, #24]
}
 8002ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	b004      	add	sp, #16
 8002ec8:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002eca:	f8d2 c000 	ldr.w	ip, [r2]
 8002ece:	f1bc 0f00 	cmp.w	ip, #0
 8002ed2:	da09      	bge.n	8002ee8 <USB_DevInit+0x10c>
      if (i == 0U)
 8002ed4:	b933      	cbnz	r3, 8002ee4 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ed6:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ed8:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eda:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002edc:	f8c2 e008 	str.w	lr, [r2, #8]
 8002ee0:	3220      	adds	r2, #32
 8002ee2:	e7c0      	b.n	8002e66 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ee4:	6010      	str	r0, [r2, #0]
 8002ee6:	e7f7      	b.n	8002ed8 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	e7f5      	b.n	8002ed8 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002eec:	f8d2 8000 	ldr.w	r8, [r2]
 8002ef0:	f1b8 0f00 	cmp.w	r8, #0
 8002ef4:	da0a      	bge.n	8002f0c <USB_DevInit+0x130>
      if (i == 0U)
 8002ef6:	b939      	cbnz	r1, 8002f08 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ef8:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002efc:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002efe:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f00:	f8c2 c008 	str.w	ip, [r2, #8]
 8002f04:	3220      	adds	r2, #32
 8002f06:	e7ba      	b.n	8002e7e <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f08:	6015      	str	r5, [r2, #0]
 8002f0a:	e7f7      	b.n	8002efc <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f0c:	6010      	str	r0, [r2, #0]
 8002f0e:	e7f5      	b.n	8002efc <USB_DevInit+0x120>
 8002f10:	803c3800 	.word	0x803c3800

08002f14 <USB_DevDisconnect>:
{
 8002f14:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f16:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f7fd fb6a 	bl	80005fc <HAL_Delay>
}
 8002f28:	2000      	movs	r0, #0
 8002f2a:	bd08      	pop	{r3, pc}

08002f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2e:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f30:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f32:	2244      	movs	r2, #68	; 0x44
 8002f34:	2100      	movs	r1, #0
 8002f36:	a805      	add	r0, sp, #20
 8002f38:	f000 fd98 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4668      	mov	r0, sp
 8002f42:	f000 fd93 	bl	8003a6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f46:	2100      	movs	r1, #0
 8002f48:	2288      	movs	r2, #136	; 0x88
 8002f4a:	a816      	add	r0, sp, #88	; 0x58
 8002f4c:	f000 fd8e 	bl	8003a6c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002f50:	f7fe fc52 	bl	80017f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <SystemClock_Config+0xb8>)
 8002f56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f5a:	f023 0318 	bic.w	r3, r3, #24
 8002f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f62:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f64:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f66:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002f68:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002f6a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f6c:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f6e:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f70:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f72:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002f74:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f76:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f78:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f7a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7c:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002f7e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002f80:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002f82:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f84:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f86:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f88:	f7fe fd98 	bl	8001abc <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f8e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f90:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f92:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f94:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f98:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f9a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f9c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f9e:	f7fe ffb3 	bl	8001f08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <SystemClock_Config+0xbc>)
 8002fa4:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002faa:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002fac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fb0:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002fb2:	2318      	movs	r3, #24
 8002fb4:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb6:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8002fb8:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8002fbc:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fbe:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fc0:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002fc2:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002fc4:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fc6:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fc8:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fca:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fcc:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fce:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd0:	f7ff f95c 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fd8:	f7fe fc1e 	bl	8001818 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002fdc:	f7ff fb3e 	bl	800265c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002fe0:	b039      	add	sp, #228	; 0xe4
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	00016085 	.word	0x00016085

08002fec <main>:
{
 8002fec:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ff0:	4db9      	ldr	r5, [pc, #740]	; (80032d8 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff2:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8003300 <main+0x314>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ff6:	f8df a30c 	ldr.w	sl, [pc, #780]	; 8003304 <main+0x318>
{
 8002ffa:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 8002ffc:	f7fd fae0 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 8003000:	f7ff ff94 	bl	8002f2c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	2214      	movs	r2, #20
 8003006:	2100      	movs	r1, #0
 8003008:	a80c      	add	r0, sp, #48	; 0x30
 800300a:	f000 fd2f 	bl	8003a6c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800300e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003010:	48b2      	ldr	r0, [pc, #712]	; (80032dc <main+0x2f0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003012:	f043 0310 	orr.w	r3, r3, #16
 8003016:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003018:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	64eb      	str	r3, [r5, #76]	; 0x4c
 800302a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	9305      	str	r3, [sp, #20]
 8003032:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800303c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	9306      	str	r3, [sp, #24]
 8003044:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800304e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	9307      	str	r3, [sp, #28]
 8003056:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003058:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800305a:	f043 0308 	orr.w	r3, r3, #8
 800305e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003060:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8003070:	f7fe fa7a 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	f248 1104 	movw	r1, #33028	; 0x8104
 800307a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307e:	f7fe fa73 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003082:	2200      	movs	r2, #0
 8003084:	f24f 0114 	movw	r1, #61460	; 0xf014
 8003088:	4895      	ldr	r0, [pc, #596]	; (80032e0 <main+0x2f4>)
 800308a:	f7fe fa6d 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800308e:	2200      	movs	r2, #0
 8003090:	f241 0181 	movw	r1, #4225	; 0x1081
 8003094:	4893      	ldr	r0, [pc, #588]	; (80032e4 <main+0x2f8>)
 8003096:	f7fe fa67 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a0:	4890      	ldr	r0, [pc, #576]	; (80032e4 <main+0x2f8>)
 80030a2:	f7fe fa61 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80030a6:	2200      	movs	r2, #0
 80030a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80030ac:	488e      	ldr	r0, [pc, #568]	; (80032e8 <main+0x2fc>)
 80030ae:	f7fe fa5b 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80030b2:	2201      	movs	r2, #1
 80030b4:	2120      	movs	r1, #32
 80030b6:	488a      	ldr	r0, [pc, #552]	; (80032e0 <main+0x2f4>)
 80030b8:	f7fe fa56 	bl	8001568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80030bc:	2201      	movs	r2, #1
 80030be:	4611      	mov	r1, r2
 80030c0:	4886      	ldr	r0, [pc, #536]	; (80032dc <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80030c4:	f7fe fa50 	bl	8001568 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80030ca:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ce:	a90c      	add	r1, sp, #48	; 0x30
 80030d0:	4882      	ldr	r0, [pc, #520]	; (80032dc <main+0x2f0>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80030d2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d4:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030da:	f7fe f969 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80030de:	236a      	movs	r3, #106	; 0x6a
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030e0:	a90c      	add	r1, sp, #48	; 0x30
 80030e2:	487e      	ldr	r0, [pc, #504]	; (80032dc <main+0x2f0>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80030e4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ec:	f7fe f960 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80030f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80030f4:	a90c      	add	r1, sp, #48	; 0x30
 80030f6:	487c      	ldr	r0, [pc, #496]	; (80032e8 <main+0x2fc>)
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80030f8:	930c      	str	r3, [sp, #48]	; 0x30

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80030fc:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003100:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003104:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800310a:	f7fe f951 	bl	80013b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	a90c      	add	r1, sp, #48	; 0x30
 8003110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003114:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003120:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f7fe f944 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003128:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	a90c      	add	r1, sp, #48	; 0x30
 800312e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8003132:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003134:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	f7fe f939 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800313e:	a90c      	add	r1, sp, #48	; 0x30
 8003140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003148:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800314a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003150:	f7fe f92e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SW_Pin */
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 8003154:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8003156:	a90c      	add	r1, sp, #48	; 0x30
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = JOY_SW_Pin;
 800315c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800315e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003162:	960e      	str	r6, [sp, #56]	; 0x38
  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003164:	f04f 0a05 	mov.w	sl, #5
  HAL_GPIO_Init(JOY_SW_GPIO_Port, &GPIO_InitStruct);
 8003168:	f7fe f922 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800316c:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	a90c      	add	r1, sp, #48	; 0x30
 8003170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003174:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f7fe f915 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003186:	a90c      	add	r1, sp, #48	; 0x30
 8003188:	4855      	ldr	r0, [pc, #340]	; (80032e0 <main+0x2f4>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800318a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003192:	f7fe f90d 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8003196:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	a90c      	add	r1, sp, #48	; 0x30
 800319c:	4850      	ldr	r0, [pc, #320]	; (80032e0 <main+0x2f4>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800319e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f7fe f903 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80031aa:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ae:	a90c      	add	r1, sp, #48	; 0x30
 80031b0:	484c      	ldr	r0, [pc, #304]	; (80032e4 <main+0x2f8>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80031b2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031b4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ba:	f7fe f8f9 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80031be:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c2:	a90c      	add	r1, sp, #48	; 0x30
 80031c4:	4847      	ldr	r0, [pc, #284]	; (80032e4 <main+0x2f8>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80031c6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ce:	f7fe f8ef 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80031d2:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d6:	a90c      	add	r1, sp, #48	; 0x30
 80031d8:	4843      	ldr	r0, [pc, #268]	; (80032e8 <main+0x2fc>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80031da:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031dc:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e2:	f7fe f8e5 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80031e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	a90c      	add	r1, sp, #48	; 0x30
 80031ec:	483e      	ldr	r0, [pc, #248]	; (80032e8 <main+0x2fc>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80031ee:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f6:	f7fe f8db 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80031fa:	a90c      	add	r1, sp, #48	; 0x30
 80031fc:	4839      	ldr	r0, [pc, #228]	; (80032e4 <main+0x2f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	940e      	str	r4, [sp, #56]	; 0x38
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003200:	f04f 0b07 	mov.w	fp, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003204:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003208:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800320c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003210:	f7fe f8ce 	bl	80013b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003214:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003216:	a90c      	add	r1, sp, #48	; 0x30
 8003218:	4832      	ldr	r0, [pc, #200]	; (80032e4 <main+0x2f8>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800321a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003222:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003228:	f7fe f8c2 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800322c:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003230:	2212      	movs	r2, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003232:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003238:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323c:	4828      	ldr	r0, [pc, #160]	; (80032e0 <main+0x2f4>)
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800323e:	930c      	str	r3, [sp, #48]	; 0x30
 8003240:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003242:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003244:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003246:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	f7fe f8b1 	bl	80013b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800324e:	4622      	mov	r2, r4
 8003250:	4621      	mov	r1, r4
 8003252:	200a      	movs	r0, #10
 8003254:	f7fd feca 	bl	8000fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003258:	200a      	movs	r0, #10
 800325a:	f7fd fefb 	bl	8001054 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800325e:	4622      	mov	r2, r4
 8003260:	4621      	mov	r1, r4
 8003262:	2017      	movs	r0, #23
 8003264:	f7fd fec2 	bl	8000fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003268:	2017      	movs	r0, #23
 800326a:	f7fd fef3 	bl	8001054 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800326e:	4622      	mov	r2, r4
 8003270:	4621      	mov	r1, r4
 8003272:	2028      	movs	r0, #40	; 0x28
 8003274:	f7fd feba 	bl	8000fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003278:	2028      	movs	r0, #40	; 0x28
 800327a:	f7fd feeb 	bl	8001054 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800327e:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8003280:	4332      	orrs	r2, r6
 8003282:	64aa      	str	r2, [r5, #72]	; 0x48
 8003284:	6caa      	ldr	r2, [r5, #72]	; 0x48
  hi2c2.Instance = I2C2;
 8003286:	4d19      	ldr	r5, [pc, #100]	; (80032ec <main+0x300>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003288:	4032      	ands	r2, r6
 800328a:	9203      	str	r2, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800328c:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800328e:	9a03      	ldr	r2, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003290:	200b      	movs	r0, #11
 8003292:	4622      	mov	r2, r4
 8003294:	f7fd feaa 	bl	8000fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003298:	200b      	movs	r0, #11
 800329a:	f7fd fedb 	bl	8001054 <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800329e:	4814      	ldr	r0, [pc, #80]	; (80032f0 <main+0x304>)
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <main+0x308>)
 80032a2:	6002      	str	r2, [r0, #0]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80032a4:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80032a8:	7106      	strb	r6, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80032aa:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80032ac:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80032ae:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80032b0:	6182      	str	r2, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80032b2:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80032b4:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80032b6:	6286      	str	r6, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80032b8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80032ba:	6304      	str	r4, [r0, #48]	; 0x30
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80032bc:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80032be:	f8c0 8020 	str.w	r8, [r0, #32]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80032c2:	f7fd ff15 	bl	80010f0 <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <main+0x30c>)
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <main+0x310>)
  hi2c2.Init.OwnAddress1 = 0;
 80032ca:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80032cc:	4628      	mov	r0, r5
  hi2c2.Init.Timing = 0x10909CEC;
 80032ce:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d2:	60ee      	str	r6, [r5, #12]
 80032d4:	e018      	b.n	8003308 <main+0x31c>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	48001000 	.word	0x48001000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000c00 	.word	0x48000c00
 80032e8:	48000800 	.word	0x48000800
 80032ec:	20000578 	.word	0x20000578
 80032f0:	200000c0 	.word	0x200000c0
 80032f4:	40016020 	.word	0x40016020
 80032f8:	10909cec 	.word	0x10909cec
 80032fc:	40005800 	.word	0x40005800
 8003300:	10110000 	.word	0x10110000
 8003304:	10210000 	.word	0x10210000
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003308:	612c      	str	r4, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800330a:	616c      	str	r4, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800330c:	61ac      	str	r4, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330e:	61ec      	str	r4, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003310:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003312:	f7fe f93b 	bl	800158c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	f7fe f988 	bl	800162e <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800331e:	4621      	mov	r1, r4
 8003320:	4628      	mov	r0, r5
 8003322:	f7fe f9aa 	bl	800167a <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8003326:	485e      	ldr	r0, [pc, #376]	; (80034a0 <main+0x4b4>)
  hqspi.Init.ClockPrescaler = 255;
 8003328:	495e      	ldr	r1, [pc, #376]	; (80034a4 <main+0x4b8>)
  hqspi.Init.FifoThreshold = 1;
 800332a:	6086      	str	r6, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	e880 0006 	stmia.w	r0, {r1, r2}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003332:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8003334:	6106      	str	r6, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003336:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003338:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800333a:	f7fe fad1 	bl	80018e0 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 800333e:	485a      	ldr	r0, [pc, #360]	; (80034a8 <main+0x4bc>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003340:	4a5a      	ldr	r2, [pc, #360]	; (80034ac <main+0x4c0>)
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003342:	9b01      	ldr	r3, [sp, #4]
 8003344:	60c3      	str	r3, [r0, #12]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003346:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800334a:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800334e:	e880 0024 	stmia.w	r0, {r2, r5}
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003352:	6084      	str	r4, [r0, #8]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003354:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003356:	6144      	str	r4, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003358:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800335a:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800335c:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800335e:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003360:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003362:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003366:	6304      	str	r4, [r0, #48]	; 0x30
  huart1.Instance = USART1;
 8003368:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80034d8 <main+0x4ec>
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800336c:	f8c0 9034 	str.w	r9, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003370:	f7ff f97c 	bl	800266c <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 8003374:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <main+0x4c4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003376:	f8cb 4008 	str.w	r4, [fp, #8]
  huart1.Init.BaudRate = 115200;
 800337a:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 800337e:	e88b 0028 	stmia.w	fp, {r3, r5}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003382:	4658      	mov	r0, fp
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003384:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003386:	f8cb 400c 	str.w	r4, [fp, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800338a:	f8cb 4010 	str.w	r4, [fp, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800338e:	f8cb 3014 	str.w	r3, [fp, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003392:	f8cb 4018 	str.w	r4, [fp, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003396:	f8cb 401c 	str.w	r4, [fp, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800339a:	f8cb 4020 	str.w	r4, [fp, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800339e:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033a2:	f7ff fc5b 	bl	8002c5c <HAL_UART_Init>
  huart3.Instance = USART3;
 80033a6:	4843      	ldr	r0, [pc, #268]	; (80034b4 <main+0x4c8>)
 80033a8:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <main+0x4cc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	6084      	str	r4, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033ac:	230c      	movs	r3, #12
  huart3.Init.BaudRate = 115200;
 80033ae:	e880 0024 	stmia.w	r0, {r2, r5}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033b2:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033b4:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033b6:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b8:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ba:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033bc:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033be:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c0:	f7ff fc4c 	bl	8002c5c <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80033c4:	483d      	ldr	r0, [pc, #244]	; (80034bc <main+0x4d0>)
  hadc1.Instance = ADC1;
 80033c6:	4d3e      	ldr	r5, [pc, #248]	; (80034c0 <main+0x4d4>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80033c8:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80033ca:	2306      	movs	r3, #6
 80033cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80033d0:	e880 000c 	stmia.w	r0, {r2, r3}
 80033d4:	9301      	str	r3, [sp, #4]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80033d6:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80033d8:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80033da:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80033dc:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80033de:	62c4      	str	r4, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80033e0:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033e2:	6187      	str	r7, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80033e4:	f7fe f96e 	bl	80016c4 <HAL_PCD_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80033e8:	4621      	mov	r1, r4
 80033ea:	2218      	movs	r2, #24
 80033ec:	a80c      	add	r0, sp, #48	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80033ee:	9409      	str	r4, [sp, #36]	; 0x24
 80033f0:	940a      	str	r4, [sp, #40]	; 0x28
 80033f2:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80033f4:	f000 fb3a 	bl	8003a6c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80033f8:	4a32      	ldr	r2, [pc, #200]	; (80034c4 <main+0x4d8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033fa:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80033fc:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003400:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003402:	e885 4004 	stmia.w	r5, {r2, lr}
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003406:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003408:	612e      	str	r6, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800340a:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800340c:	766e      	strb	r6, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800340e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003412:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003414:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003416:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800341a:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800341c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003420:	f8c5 9014 	str.w	r9, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 8003424:	61ef      	str	r7, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003426:	f7fd f911 	bl	800064c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800342a:	a909      	add	r1, sp, #36	; 0x24
 800342c:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800342e:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003430:	267f      	movs	r6, #127	; 0x7f
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003432:	f7fd fd51 	bl	8000ed8 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 8003436:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <main+0x4dc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003438:	9b01      	ldr	r3, [sp, #4]
  sConfig.Channel = ADC_CHANNEL_14;
 800343a:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800343c:	a90c      	add	r1, sp, #48	; 0x30
 800343e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003440:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Offset = 0;
 8003442:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8003444:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003448:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800344a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800344e:	f7fd fa27 	bl	80008a0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <main+0x4e0>)
 8003454:	920c      	str	r2, [sp, #48]	; 0x30
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003456:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003458:	a90c      	add	r1, sp, #48	; 0x30
 800345a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800345c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800345e:	f7fd fa1f 	bl	80008a0 <HAL_ADC_ConfigChannel>
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8003462:	4631      	mov	r1, r6
 8003464:	4628      	mov	r0, r5
 8003466:	f7fd fcef 	bl	8000e48 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)Joy_Value, 2);
 800346a:	4628      	mov	r0, r5
 800346c:	463a      	mov	r2, r7
 800346e:	4918      	ldr	r1, [pc, #96]	; (80034d0 <main+0x4e4>)
	  sprintf(msg, "X Value: %hu - Y Value: %hu\r\n", Joy_Value[0], Joy_Value[1]);
 8003470:	4c17      	ldr	r4, [pc, #92]	; (80034d0 <main+0x4e4>)
 8003472:	4d18      	ldr	r5, [pc, #96]	; (80034d4 <main+0x4e8>)
  HAL_ADC_Start_DMA(&hadc1, (uint16_t*)Joy_Value, 2);
 8003474:	f7fd fc2e 	bl	8000cd4 <HAL_ADC_Start_DMA>
	  sprintf(msg, "X Value: %hu - Y Value: %hu\r\n", Joy_Value[0], Joy_Value[1]);
 8003478:	8863      	ldrh	r3, [r4, #2]
 800347a:	8822      	ldrh	r2, [r4, #0]
 800347c:	4629      	mov	r1, r5
 800347e:	a80c      	add	r0, sp, #48	; 0x30
 8003480:	f000 fafc 	bl	8003a7c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8003484:	a80c      	add	r0, sp, #48	; 0x30
 8003486:	f7fc fea3 	bl	80001d0 <strlen>
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	b282      	uxth	r2, r0
 8003490:	a90c      	add	r1, sp, #48	; 0x30
 8003492:	4658      	mov	r0, fp
 8003494:	f7ff fb59 	bl	8002b4a <HAL_UART_Transmit>
	  HAL_Delay(100);
 8003498:	2064      	movs	r0, #100	; 0x64
 800349a:	f7fd f8af 	bl	80005fc <HAL_Delay>
 800349e:	e7eb      	b.n	8003478 <main+0x48c>
 80034a0:	2000074c 	.word	0x2000074c
 80034a4:	a0001000 	.word	0xa0001000
 80034a8:	200005c4 	.word	0x200005c4
 80034ac:	40003c00 	.word	0x40003c00
 80034b0:	40013800 	.word	0x40013800
 80034b4:	200000f8 	.word	0x200000f8
 80034b8:	40004800 	.word	0x40004800
 80034bc:	20000170 	.word	0x20000170
 80034c0:	20000628 	.word	0x20000628
 80034c4:	50040000 	.word	0x50040000
 80034c8:	3ac04000 	.word	0x3ac04000
 80034cc:	36902000 	.word	0x36902000
 80034d0:	200000bc 	.word	0x200000bc
 80034d4:	080042e1 	.word	0x080042e1
 80034d8:	2000068c 	.word	0x2000068c

080034dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_MspInit+0x2c>)
 80034e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
 80034ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80034ec:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	f002 0201 	and.w	r2, r2, #1
 80034f2:	9200      	str	r2, [sp, #0]
 80034f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034fc:	659a      	str	r2, [r3, #88]	; 0x58
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003508:	b002      	add	sp, #8
 800350a:	4770      	bx	lr
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4606      	mov	r6, r0
 8003514:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	2214      	movs	r2, #20
 8003518:	2100      	movs	r1, #0
 800351a:	a803      	add	r0, sp, #12
 800351c:	f000 faa6 	bl	8003a6c <memset>
  if(hadc->Instance==ADC1)
 8003520:	6832      	ldr	r2, [r6, #0]
 8003522:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_ADC_MspInit+0xb4>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d14a      	bne.n	80035be <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003528:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800352c:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ADC_Y_Pin|ADC_X_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003530:	240b      	movs	r4, #11
    __HAL_RCC_ADC_CLK_ENABLE();
 8003532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	4824      	ldr	r0, [pc, #144]	; (80035c8 <HAL_ADC_MspInit+0xb8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8003536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353a:	64da      	str	r2, [r3, #76]	; 0x4c
 800353c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800353e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003542:	9200      	str	r2, [sp, #0]
 8003544:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003548:	f042 0204 	orr.w	r2, r2, #4
 800354c:	64da      	str	r2, [r3, #76]	; 0x4c
 800354e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003550:	f002 0204 	and.w	r2, r2, #4
 8003554:	9201      	str	r2, [sp, #4]
 8003556:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800355a:	f042 0202 	orr.w	r2, r2, #2
 800355e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003562:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800356e:	233f      	movs	r3, #63	; 0x3f

    GPIO_InitStruct.Pin = ARD_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8003572:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003574:	f7fd ff1c 	bl	80013b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003578:	2302      	movs	r3, #2
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800357a:	4814      	ldr	r0, [pc, #80]	; (80035cc <HAL_ADC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800357c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800357e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003580:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	9505      	str	r5, [sp, #20]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003584:	4c12      	ldr	r4, [pc, #72]	; (80035d0 <HAL_ADC_MspInit+0xc0>)
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003586:	f7fd ff13 	bl	80013b0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800358c:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800358e:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359a:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800359c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a0:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035a2:	2320      	movs	r3, #32
 80035a4:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035a6:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ac:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035ae:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035b0:	f7fd fe12 	bl	80011d8 <HAL_DMA_Init>
 80035b4:	b108      	cbz	r0, 80035ba <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80035b6:	f7ff ff91 	bl	80034dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035ba:	64f4      	str	r4, [r6, #76]	; 0x4c
 80035bc:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035be:	b008      	add	sp, #32
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	bf00      	nop
 80035c4:	50040000 	.word	0x50040000
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000400 	.word	0x48000400
 80035d0:	20000704 	.word	0x20000704
 80035d4:	40020008 	.word	0x40020008

080035d8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80035d8:	b500      	push	{lr}
 80035da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	2214      	movs	r2, #20
 80035de:	2100      	movs	r1, #0
 80035e0:	a803      	add	r0, sp, #12
 80035e2:	f000 fa43 	bl	8003a6c <memset>
  if(DFSDM1_Init == 0)
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_DFSDM_ChannelMspInit+0x5c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	bb03      	cbnz	r3, 800362e <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f4:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f8:	480f      	ldr	r0, [pc, #60]	; (8003638 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
 8003600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003602:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8003606:	9201      	str	r2, [sp, #4]
 8003608:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800360a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360c:	f042 0210 	orr.w	r2, r2, #16
 8003610:	64da      	str	r2, [r3, #76]	; 0x4c
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800361c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003626:	2306      	movs	r3, #6
 8003628:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800362a:	f7fd fec1 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800362e:	b009      	add	sp, #36	; 0x24
 8003630:	f85d fb04 	ldr.w	pc, [sp], #4
 8003634:	200000a8 	.word	0x200000a8
 8003638:	48001000 	.word	0x48001000

0800363c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003642:	2214      	movs	r2, #20
 8003644:	2100      	movs	r1, #0
 8003646:	a803      	add	r0, sp, #12
 8003648:	f000 fa10 	bl	8003a6c <memset>
  if(hi2c->Instance==I2C2)
 800364c:	6822      	ldr	r2, [r4, #0]
 800364e:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_I2C_MspInit+0x60>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003654:	4c12      	ldr	r4, [pc, #72]	; (80036a0 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	4813      	ldr	r0, [pc, #76]	; (80036a4 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003658:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003660:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800366a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800366e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003670:	2312      	movs	r3, #18
 8003672:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003674:	2301      	movs	r3, #1
 8003676:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800367e:	2304      	movs	r3, #4
 8003680:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f7fd fe95 	bl	80013b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800368c:	65a3      	str	r3, [r4, #88]	; 0x58
 800368e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003698:	b008      	add	sp, #32
 800369a:	bd10      	pop	{r4, pc}
 800369c:	40005800 	.word	0x40005800
 80036a0:	40021000 	.word	0x40021000
 80036a4:	48000400 	.word	0x48000400

080036a8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4604      	mov	r4, r0
 80036ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ae:	2214      	movs	r2, #20
 80036b0:	2100      	movs	r1, #0
 80036b2:	a803      	add	r0, sp, #12
 80036b4:	f000 f9da 	bl	8003a6c <memset>
  if(hqspi->Instance==QUADSPI)
 80036b8:	6822      	ldr	r2, [r4, #0]
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_QSPI_MspInit+0x64>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d122      	bne.n	8003706 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80036c0:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 80036c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c8:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 80036ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036cc:	4810      	ldr	r0, [pc, #64]	; (8003710 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 80036ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d2:	651a      	str	r2, [r3, #80]	; 0x50
 80036d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80036da:	9201      	str	r2, [sp, #4]
 80036dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e0:	f042 0210 	orr.w	r2, r2, #16
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 80036f0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80036f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fa:	2303      	movs	r3, #3
 80036fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80036fe:	230a      	movs	r3, #10
 8003700:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003702:	f7fd fe55 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003706:	b008      	add	sp, #32
 8003708:	bd10      	pop	{r4, pc}
 800370a:	bf00      	nop
 800370c:	a0001000 	.word	0xa0001000
 8003710:	48001000 	.word	0x48001000

08003714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003714:	b510      	push	{r4, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371a:	2214      	movs	r2, #20
 800371c:	2100      	movs	r1, #0
 800371e:	a803      	add	r0, sp, #12
 8003720:	f000 f9a4 	bl	8003a6c <memset>
  if(hspi->Instance==SPI3)
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_SPI_MspInit+0x60>)
 8003728:	429a      	cmp	r2, r3
 800372a:	d120      	bne.n	800376e <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800372c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003730:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003732:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	4810      	ldr	r0, [pc, #64]	; (8003778 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	659a      	str	r2, [r3, #88]	; 0x58
 800373c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800373e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003742:	9201      	str	r2, [sp, #4]
 8003744:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003748:	f042 0204 	orr.w	r2, r2, #4
 800374c:	64da      	str	r2, [r3, #76]	; 0x4c
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	9302      	str	r3, [sp, #8]
 8003756:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003758:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800375c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2302      	movs	r3, #2
 8003760:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003762:	2303      	movs	r3, #3
 8003764:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003766:	2306      	movs	r3, #6
 8003768:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376a:	f7fd fe21 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800376e:	b008      	add	sp, #32
 8003770:	bd10      	pop	{r4, pc}
 8003772:	bf00      	nop
 8003774:	40003c00 	.word	0x40003c00
 8003778:	48000800 	.word	0x48000800

0800377c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800377c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377e:	2214      	movs	r2, #20
{
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	2100      	movs	r1, #0
 8003786:	eb0d 0002 	add.w	r0, sp, r2
 800378a:	f000 f96f 	bl	8003a6c <memset>
  if(huart->Instance==USART1)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_UART_MspInit+0xa0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d120      	bne.n	80037d8 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	4822      	ldr	r0, [pc, #136]	; (8003824 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800379a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800379c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a0:	661a      	str	r2, [r3, #96]	; 0x60
 80037a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037a8:	9201      	str	r2, [sp, #4]
 80037aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	f042 0202 	orr.w	r2, r2, #2
 80037b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c6:	2303      	movs	r3, #3
 80037c8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037ca:	2307      	movs	r3, #7
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ce:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d0:	f7fd fdee 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037d4:	b00a      	add	sp, #40	; 0x28
 80037d6:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_UART_MspInit+0xac>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d1fa      	bne.n	80037d4 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037e0:	4812      	ldr	r0, [pc, #72]	; (800382c <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80037e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037e8:	659a      	str	r2, [r3, #88]	; 0x58
 80037ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80037f0:	9203      	str	r2, [sp, #12]
 80037f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	9304      	str	r3, [sp, #16]
 8003804:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800380a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003814:	2307      	movs	r3, #7
 8003816:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003818:	a905      	add	r1, sp, #20
 800381a:	e7d9      	b.n	80037d0 <HAL_UART_MspInit+0x54>
 800381c:	40013800 	.word	0x40013800
 8003820:	40021000 	.word	0x40021000
 8003824:	48000400 	.word	0x48000400
 8003828:	40004800 	.word	0x40004800
 800382c:	48000c00 	.word	0x48000c00

08003830 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003830:	b510      	push	{r4, lr}
 8003832:	4604      	mov	r4, r0
 8003834:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003836:	2214      	movs	r2, #20
 8003838:	2100      	movs	r1, #0
 800383a:	a803      	add	r0, sp, #12
 800383c:	f000 f916 	bl	8003a6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003846:	d13c      	bne.n	80038c2 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003848:	4c20      	ldr	r4, [pc, #128]	; (80038cc <HAL_PCD_MspInit+0x9c>)
 800384a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003852:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800385c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800385e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003866:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003868:	f7fd fda2 	bl	80013b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800386c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003870:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387a:	2303      	movs	r3, #3
 800387c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003880:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003886:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	f7fd fd92 	bl	80013b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800388c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800388e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003892:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003894:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	d410      	bmi.n	80038c6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	9302      	str	r3, [sp, #8]
 80038b4:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80038b6:	f7fd ffe5 	bl	8001884 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80038c2:	b008      	add	sp, #32
 80038c4:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80038c6:	f7fd ffdd 	bl	8001884 <HAL_PWREx_EnableVddUSB>
}
 80038ca:	e7fa      	b.n	80038c2 <HAL_PCD_MspInit+0x92>
 80038cc:	40021000 	.word	0x40021000

080038d0 <NMI_Handler>:
 80038d0:	4770      	bx	lr

080038d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d2:	e7fe      	b.n	80038d2 <HardFault_Handler>

080038d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d4:	e7fe      	b.n	80038d4 <MemManage_Handler>

080038d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038d6:	e7fe      	b.n	80038d6 <BusFault_Handler>

080038d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038d8:	e7fe      	b.n	80038d8 <UsageFault_Handler>

080038da <SVC_Handler>:
 80038da:	4770      	bx	lr

080038dc <DebugMon_Handler>:
 80038dc:	4770      	bx	lr

080038de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038de:	4770      	bx	lr

080038e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e0:	f7fc be7e 	b.w	80005e0 <HAL_IncTick>

080038e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80038e4:	2010      	movs	r0, #16
 80038e6:	f7fd be45 	b.w	8001574 <HAL_GPIO_EXTI_IRQHandler>
	...

080038ec <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <DMA1_Channel1_IRQHandler+0x8>)
 80038ee:	f7fd bd15 	b.w	800131c <HAL_DMA_IRQHandler>
 80038f2:	bf00      	nop
 80038f4:	20000704 	.word	0x20000704

080038f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80038fa:	2020      	movs	r0, #32
 80038fc:	f7fd fe3a 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003900:	2040      	movs	r0, #64	; 0x40
 8003902:	f7fd fe37 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003906:	2080      	movs	r0, #128	; 0x80
 8003908:	f7fd fe34 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800390c:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003914:	f7fd be2e 	b.w	8001574 <HAL_GPIO_EXTI_IRQHandler>

08003918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003918:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800391a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800391e:	f7fd fe29 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003922:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003926:	f7fd fe25 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800392a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800392e:	f7fd fe21 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003932:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003936:	f7fd fe1d 	bl	8001574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800393a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800393e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003942:	f7fd be17 	b.w	8001574 <HAL_GPIO_EXTI_IRQHandler>
	...

08003948 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003948:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <_sbrk+0x2c>)
 800394c:	6819      	ldr	r1, [r3, #0]
{
 800394e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003950:	b909      	cbnz	r1, 8003956 <_sbrk+0xe>
		heap_end = &end;
 8003952:	4909      	ldr	r1, [pc, #36]	; (8003978 <_sbrk+0x30>)
 8003954:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003956:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003958:	4669      	mov	r1, sp
 800395a:	4402      	add	r2, r0
 800395c:	428a      	cmp	r2, r1
 800395e:	d906      	bls.n	800396e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003960:	f000 f85a 	bl	8003a18 <__errno>
 8003964:	230c      	movs	r3, #12
 8003966:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800396e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003970:	bd08      	pop	{r3, pc}
 8003972:	bf00      	nop
 8003974:	200000ac 	.word	0x200000ac
 8003978:	20000794 	.word	0x20000794

0800397c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800397c:	490f      	ldr	r1, [pc, #60]	; (80039bc <SystemInit+0x40>)
 800397e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003982:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <SystemInit+0x44>)
 800398c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800398e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003996:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800399e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80039a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80039a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80039b2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039b8:	608b      	str	r3, [r1, #8]
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00
 80039c0:	40021000 	.word	0x40021000

080039c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80039c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80039ca:	e003      	b.n	80039d4 <LoopCopyDataInit>

080039cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039d2:	3104      	adds	r1, #4

080039d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <LoopForever+0xa>)
	ldr	r3, =_edata
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <LoopForever+0xe>)
	adds	r2, r0, r1
 80039d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80039da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039dc:	d3f6      	bcc.n	80039cc <CopyDataInit>
	ldr	r2, =_sbss
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <LoopForever+0x12>)
	b	LoopFillZerobss
 80039e0:	e002      	b.n	80039e8 <LoopFillZerobss>

080039e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039e4:	f842 3b04 	str.w	r3, [r2], #4

080039e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <LoopForever+0x16>)
	cmp	r2, r3
 80039ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039ec:	d3f9      	bcc.n	80039e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039ee:	f7ff ffc5 	bl	800397c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039f2:	f000 f817 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039f6:	f7ff faf9 	bl	8002fec <main>

080039fa <LoopForever>:

LoopForever:
    b LoopForever
 80039fa:	e7fe      	b.n	80039fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003a00:	0800438c 	.word	0x0800438c
	ldr	r0, =_sdata
 8003a04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a08:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8003a0c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8003a10:	20000794 	.word	0x20000794

08003a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC1_2_IRQHandler>
	...

08003a18 <__errno>:
 8003a18:	4b01      	ldr	r3, [pc, #4]	; (8003a20 <__errno+0x8>)
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20000004 	.word	0x20000004

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4e0d      	ldr	r6, [pc, #52]	; (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1ba4      	subs	r4, r4, r6
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2500      	movs	r5, #0
 8003a30:	42a5      	cmp	r5, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4e0b      	ldr	r6, [pc, #44]	; (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	; (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 fc3e 	bl	80042b8 <_init>
 8003a3c:	1ba4      	subs	r4, r4, r6
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2500      	movs	r5, #0
 8003a42:	42a5      	cmp	r5, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a4c:	4798      	blx	r3
 8003a4e:	3501      	adds	r5, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a56:	4798      	blx	r3
 8003a58:	3501      	adds	r5, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08004384 	.word	0x08004384
 8003a60:	08004384 	.word	0x08004384
 8003a64:	08004384 	.word	0x08004384
 8003a68:	08004388 	.word	0x08004388

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <siprintf>:
 8003a7c:	b40e      	push	{r1, r2, r3}
 8003a7e:	b500      	push	{lr}
 8003a80:	b09c      	sub	sp, #112	; 0x70
 8003a82:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003a86:	ab1d      	add	r3, sp, #116	; 0x74
 8003a88:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003a8c:	9002      	str	r0, [sp, #8]
 8003a8e:	9006      	str	r0, [sp, #24]
 8003a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <siprintf+0x44>)
 8003a96:	9104      	str	r1, [sp, #16]
 8003a98:	9107      	str	r1, [sp, #28]
 8003a9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aa2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003aa6:	6800      	ldr	r0, [r0, #0]
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	a902      	add	r1, sp, #8
 8003aac:	f000 f866 	bl	8003b7c <_svfiprintf_r>
 8003ab0:	9b02      	ldr	r3, [sp, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	b01c      	add	sp, #112	; 0x70
 8003ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003abc:	b003      	add	sp, #12
 8003abe:	4770      	bx	lr
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <__ssputs_r>:
 8003ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac8:	688e      	ldr	r6, [r1, #8]
 8003aca:	429e      	cmp	r6, r3
 8003acc:	4682      	mov	sl, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	4691      	mov	r9, r2
 8003ad2:	4698      	mov	r8, r3
 8003ad4:	d835      	bhi.n	8003b42 <__ssputs_r+0x7e>
 8003ad6:	898a      	ldrh	r2, [r1, #12]
 8003ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003adc:	d031      	beq.n	8003b42 <__ssputs_r+0x7e>
 8003ade:	6825      	ldr	r5, [r4, #0]
 8003ae0:	6909      	ldr	r1, [r1, #16]
 8003ae2:	1a6f      	subs	r7, r5, r1
 8003ae4:	6965      	ldr	r5, [r4, #20]
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aec:	fb95 f5f3 	sdiv	r5, r5, r3
 8003af0:	f108 0301 	add.w	r3, r8, #1
 8003af4:	443b      	add	r3, r7
 8003af6:	429d      	cmp	r5, r3
 8003af8:	bf38      	it	cc
 8003afa:	461d      	movcc	r5, r3
 8003afc:	0553      	lsls	r3, r2, #21
 8003afe:	d531      	bpl.n	8003b64 <__ssputs_r+0xa0>
 8003b00:	4629      	mov	r1, r5
 8003b02:	f000 fb39 	bl	8004178 <_malloc_r>
 8003b06:	4606      	mov	r6, r0
 8003b08:	b950      	cbnz	r0, 8003b20 <__ssputs_r+0x5c>
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	f8ca 3000 	str.w	r3, [sl]
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b20:	463a      	mov	r2, r7
 8003b22:	6921      	ldr	r1, [r4, #16]
 8003b24:	f000 fab4 	bl	8004090 <memcpy>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b32:	81a3      	strh	r3, [r4, #12]
 8003b34:	6126      	str	r6, [r4, #16]
 8003b36:	6165      	str	r5, [r4, #20]
 8003b38:	443e      	add	r6, r7
 8003b3a:	1bed      	subs	r5, r5, r7
 8003b3c:	6026      	str	r6, [r4, #0]
 8003b3e:	60a5      	str	r5, [r4, #8]
 8003b40:	4646      	mov	r6, r8
 8003b42:	4546      	cmp	r6, r8
 8003b44:	bf28      	it	cs
 8003b46:	4646      	movcs	r6, r8
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	6820      	ldr	r0, [r4, #0]
 8003b4e:	f000 faaa 	bl	80040a6 <memmove>
 8003b52:	68a3      	ldr	r3, [r4, #8]
 8003b54:	1b9b      	subs	r3, r3, r6
 8003b56:	60a3      	str	r3, [r4, #8]
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	441e      	add	r6, r3
 8003b5c:	6026      	str	r6, [r4, #0]
 8003b5e:	2000      	movs	r0, #0
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	462a      	mov	r2, r5
 8003b66:	f000 fb65 	bl	8004234 <_realloc_r>
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d1e1      	bne.n	8003b34 <__ssputs_r+0x70>
 8003b70:	6921      	ldr	r1, [r4, #16]
 8003b72:	4650      	mov	r0, sl
 8003b74:	f000 fab2 	bl	80040dc <_free_r>
 8003b78:	e7c7      	b.n	8003b0a <__ssputs_r+0x46>
	...

08003b7c <_svfiprintf_r>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	b09d      	sub	sp, #116	; 0x74
 8003b82:	4680      	mov	r8, r0
 8003b84:	9303      	str	r3, [sp, #12]
 8003b86:	898b      	ldrh	r3, [r1, #12]
 8003b88:	061c      	lsls	r4, r3, #24
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	d50f      	bpl.n	8003bb0 <_svfiprintf_r+0x34>
 8003b90:	690b      	ldr	r3, [r1, #16]
 8003b92:	b96b      	cbnz	r3, 8003bb0 <_svfiprintf_r+0x34>
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	f000 faef 	bl	8004178 <_malloc_r>
 8003b9a:	6028      	str	r0, [r5, #0]
 8003b9c:	6128      	str	r0, [r5, #16]
 8003b9e:	b928      	cbnz	r0, 8003bac <_svfiprintf_r+0x30>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	f8c8 3000 	str.w	r3, [r8]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e0c5      	b.n	8003d38 <_svfiprintf_r+0x1bc>
 8003bac:	2340      	movs	r3, #64	; 0x40
 8003bae:	616b      	str	r3, [r5, #20]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bba:	2330      	movs	r3, #48	; 0x30
 8003bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bc0:	f04f 0b01 	mov.w	fp, #1
 8003bc4:	4637      	mov	r7, r6
 8003bc6:	463c      	mov	r4, r7
 8003bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d13c      	bne.n	8003c4a <_svfiprintf_r+0xce>
 8003bd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003bd4:	d00b      	beq.n	8003bee <_svfiprintf_r+0x72>
 8003bd6:	4653      	mov	r3, sl
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4640      	mov	r0, r8
 8003bde:	f7ff ff71 	bl	8003ac4 <__ssputs_r>
 8003be2:	3001      	adds	r0, #1
 8003be4:	f000 80a3 	beq.w	8003d2e <_svfiprintf_r+0x1b2>
 8003be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bea:	4453      	add	r3, sl
 8003bec:	9309      	str	r3, [sp, #36]	; 0x24
 8003bee:	783b      	ldrb	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 809c 	beq.w	8003d2e <_svfiprintf_r+0x1b2>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	9307      	str	r3, [sp, #28]
 8003c00:	9205      	str	r2, [sp, #20]
 8003c02:	9306      	str	r3, [sp, #24]
 8003c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c08:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	4850      	ldr	r0, [pc, #320]	; (8003d50 <_svfiprintf_r+0x1d4>)
 8003c10:	f7fc fae6 	bl	80001e0 <memchr>
 8003c14:	1c67      	adds	r7, r4, #1
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	b9d8      	cbnz	r0, 8003c52 <_svfiprintf_r+0xd6>
 8003c1a:	06d9      	lsls	r1, r3, #27
 8003c1c:	bf44      	itt	mi
 8003c1e:	2220      	movmi	r2, #32
 8003c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c24:	071a      	lsls	r2, r3, #28
 8003c26:	bf44      	itt	mi
 8003c28:	222b      	movmi	r2, #43	; 0x2b
 8003c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c2e:	7822      	ldrb	r2, [r4, #0]
 8003c30:	2a2a      	cmp	r2, #42	; 0x2a
 8003c32:	d016      	beq.n	8003c62 <_svfiprintf_r+0xe6>
 8003c34:	9a07      	ldr	r2, [sp, #28]
 8003c36:	2100      	movs	r1, #0
 8003c38:	200a      	movs	r0, #10
 8003c3a:	4627      	mov	r7, r4
 8003c3c:	3401      	adds	r4, #1
 8003c3e:	783b      	ldrb	r3, [r7, #0]
 8003c40:	3b30      	subs	r3, #48	; 0x30
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d951      	bls.n	8003cea <_svfiprintf_r+0x16e>
 8003c46:	b1c9      	cbz	r1, 8003c7c <_svfiprintf_r+0x100>
 8003c48:	e011      	b.n	8003c6e <_svfiprintf_r+0xf2>
 8003c4a:	2b25      	cmp	r3, #37	; 0x25
 8003c4c:	d0c0      	beq.n	8003bd0 <_svfiprintf_r+0x54>
 8003c4e:	4627      	mov	r7, r4
 8003c50:	e7b9      	b.n	8003bc6 <_svfiprintf_r+0x4a>
 8003c52:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <_svfiprintf_r+0x1d4>)
 8003c54:	1a80      	subs	r0, r0, r2
 8003c56:	fa0b f000 	lsl.w	r0, fp, r0
 8003c5a:	4318      	orrs	r0, r3
 8003c5c:	9004      	str	r0, [sp, #16]
 8003c5e:	463c      	mov	r4, r7
 8003c60:	e7d3      	b.n	8003c0a <_svfiprintf_r+0x8e>
 8003c62:	9a03      	ldr	r2, [sp, #12]
 8003c64:	1d11      	adds	r1, r2, #4
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	9103      	str	r1, [sp, #12]
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	db01      	blt.n	8003c72 <_svfiprintf_r+0xf6>
 8003c6e:	9207      	str	r2, [sp, #28]
 8003c70:	e004      	b.n	8003c7c <_svfiprintf_r+0x100>
 8003c72:	4252      	negs	r2, r2
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	9207      	str	r2, [sp, #28]
 8003c7a:	9304      	str	r3, [sp, #16]
 8003c7c:	783b      	ldrb	r3, [r7, #0]
 8003c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c80:	d10e      	bne.n	8003ca0 <_svfiprintf_r+0x124>
 8003c82:	787b      	ldrb	r3, [r7, #1]
 8003c84:	2b2a      	cmp	r3, #42	; 0x2a
 8003c86:	f107 0101 	add.w	r1, r7, #1
 8003c8a:	d132      	bne.n	8003cf2 <_svfiprintf_r+0x176>
 8003c8c:	9b03      	ldr	r3, [sp, #12]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	9203      	str	r2, [sp, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bfb8      	it	lt
 8003c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c9c:	3702      	adds	r7, #2
 8003c9e:	9305      	str	r3, [sp, #20]
 8003ca0:	4c2c      	ldr	r4, [pc, #176]	; (8003d54 <_svfiprintf_r+0x1d8>)
 8003ca2:	7839      	ldrb	r1, [r7, #0]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fc fa9a 	bl	80001e0 <memchr>
 8003cac:	b138      	cbz	r0, 8003cbe <_svfiprintf_r+0x142>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	1b00      	subs	r0, r0, r4
 8003cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	4303      	orrs	r3, r0
 8003cba:	9304      	str	r3, [sp, #16]
 8003cbc:	3701      	adds	r7, #1
 8003cbe:	7839      	ldrb	r1, [r7, #0]
 8003cc0:	4825      	ldr	r0, [pc, #148]	; (8003d58 <_svfiprintf_r+0x1dc>)
 8003cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cc6:	2206      	movs	r2, #6
 8003cc8:	1c7e      	adds	r6, r7, #1
 8003cca:	f7fc fa89 	bl	80001e0 <memchr>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d035      	beq.n	8003d3e <_svfiprintf_r+0x1c2>
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <_svfiprintf_r+0x1e0>)
 8003cd4:	b9fb      	cbnz	r3, 8003d16 <_svfiprintf_r+0x19a>
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	3307      	adds	r3, #7
 8003cda:	f023 0307 	bic.w	r3, r3, #7
 8003cde:	3308      	adds	r3, #8
 8003ce0:	9303      	str	r3, [sp, #12]
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	444b      	add	r3, r9
 8003ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce8:	e76c      	b.n	8003bc4 <_svfiprintf_r+0x48>
 8003cea:	fb00 3202 	mla	r2, r0, r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	e7a3      	b.n	8003c3a <_svfiprintf_r+0xbe>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9305      	str	r3, [sp, #20]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	240a      	movs	r4, #10
 8003cfa:	460f      	mov	r7, r1
 8003cfc:	3101      	adds	r1, #1
 8003cfe:	783a      	ldrb	r2, [r7, #0]
 8003d00:	3a30      	subs	r2, #48	; 0x30
 8003d02:	2a09      	cmp	r2, #9
 8003d04:	d903      	bls.n	8003d0e <_svfiprintf_r+0x192>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ca      	beq.n	8003ca0 <_svfiprintf_r+0x124>
 8003d0a:	9005      	str	r0, [sp, #20]
 8003d0c:	e7c8      	b.n	8003ca0 <_svfiprintf_r+0x124>
 8003d0e:	fb04 2000 	mla	r0, r4, r0, r2
 8003d12:	2301      	movs	r3, #1
 8003d14:	e7f1      	b.n	8003cfa <_svfiprintf_r+0x17e>
 8003d16:	ab03      	add	r3, sp, #12
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	462a      	mov	r2, r5
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <_svfiprintf_r+0x1e4>)
 8003d1e:	a904      	add	r1, sp, #16
 8003d20:	4640      	mov	r0, r8
 8003d22:	f3af 8000 	nop.w
 8003d26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d2a:	4681      	mov	r9, r0
 8003d2c:	d1d9      	bne.n	8003ce2 <_svfiprintf_r+0x166>
 8003d2e:	89ab      	ldrh	r3, [r5, #12]
 8003d30:	065b      	lsls	r3, r3, #25
 8003d32:	f53f af38 	bmi.w	8003ba6 <_svfiprintf_r+0x2a>
 8003d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d38:	b01d      	add	sp, #116	; 0x74
 8003d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3e:	ab03      	add	r3, sp, #12
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	462a      	mov	r2, r5
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <_svfiprintf_r+0x1e4>)
 8003d46:	a904      	add	r1, sp, #16
 8003d48:	4640      	mov	r0, r8
 8003d4a:	f000 f881 	bl	8003e50 <_printf_i>
 8003d4e:	e7ea      	b.n	8003d26 <_svfiprintf_r+0x1aa>
 8003d50:	08004348 	.word	0x08004348
 8003d54:	0800434e 	.word	0x0800434e
 8003d58:	08004352 	.word	0x08004352
 8003d5c:	00000000 	.word	0x00000000
 8003d60:	08003ac5 	.word	0x08003ac5

08003d64 <_printf_common>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	4691      	mov	r9, r2
 8003d6a:	461f      	mov	r7, r3
 8003d6c:	688a      	ldr	r2, [r1, #8]
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfb8      	it	lt
 8003d78:	4613      	movlt	r3, r2
 8003d7a:	f8c9 3000 	str.w	r3, [r9]
 8003d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d82:	4606      	mov	r6, r0
 8003d84:	460c      	mov	r4, r1
 8003d86:	b112      	cbz	r2, 8003d8e <_printf_common+0x2a>
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f8c9 3000 	str.w	r3, [r9]
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	0699      	lsls	r1, r3, #26
 8003d92:	bf42      	ittt	mi
 8003d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d98:	3302      	addmi	r3, #2
 8003d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	f015 0506 	ands.w	r5, r5, #6
 8003da4:	d107      	bne.n	8003db6 <_printf_common+0x52>
 8003da6:	f104 0a19 	add.w	sl, r4, #25
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	f8d9 2000 	ldr.w	r2, [r9]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	429d      	cmp	r5, r3
 8003db4:	db29      	blt.n	8003e0a <_printf_common+0xa6>
 8003db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	3300      	adds	r3, #0
 8003dbe:	bf18      	it	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	0692      	lsls	r2, r2, #26
 8003dc4:	d42e      	bmi.n	8003e24 <_printf_common+0xc0>
 8003dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dca:	4639      	mov	r1, r7
 8003dcc:	4630      	mov	r0, r6
 8003dce:	47c0      	blx	r8
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d021      	beq.n	8003e18 <_printf_common+0xb4>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	68e5      	ldr	r5, [r4, #12]
 8003dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8003ddc:	f003 0306 	and.w	r3, r3, #6
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	bf08      	it	eq
 8003de4:	1aad      	subeq	r5, r5, r2
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	6922      	ldr	r2, [r4, #16]
 8003dea:	bf0c      	ite	eq
 8003dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df0:	2500      	movne	r5, #0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	bfc4      	itt	gt
 8003df6:	1a9b      	subgt	r3, r3, r2
 8003df8:	18ed      	addgt	r5, r5, r3
 8003dfa:	f04f 0900 	mov.w	r9, #0
 8003dfe:	341a      	adds	r4, #26
 8003e00:	454d      	cmp	r5, r9
 8003e02:	d11b      	bne.n	8003e3c <_printf_common+0xd8>
 8003e04:	2000      	movs	r0, #0
 8003e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4652      	mov	r2, sl
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4630      	mov	r0, r6
 8003e12:	47c0      	blx	r8
 8003e14:	3001      	adds	r0, #1
 8003e16:	d103      	bne.n	8003e20 <_printf_common+0xbc>
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	3501      	adds	r5, #1
 8003e22:	e7c2      	b.n	8003daa <_printf_common+0x46>
 8003e24:	18e1      	adds	r1, r4, r3
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	2030      	movs	r0, #48	; 0x30
 8003e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e2e:	4422      	add	r2, r4
 8003e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e38:	3302      	adds	r3, #2
 8003e3a:	e7c4      	b.n	8003dc6 <_printf_common+0x62>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4622      	mov	r2, r4
 8003e40:	4639      	mov	r1, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	47c0      	blx	r8
 8003e46:	3001      	adds	r0, #1
 8003e48:	d0e6      	beq.n	8003e18 <_printf_common+0xb4>
 8003e4a:	f109 0901 	add.w	r9, r9, #1
 8003e4e:	e7d7      	b.n	8003e00 <_printf_common+0x9c>

08003e50 <_printf_i>:
 8003e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e54:	4617      	mov	r7, r2
 8003e56:	7e0a      	ldrb	r2, [r1, #24]
 8003e58:	b085      	sub	sp, #20
 8003e5a:	2a6e      	cmp	r2, #110	; 0x6e
 8003e5c:	4698      	mov	r8, r3
 8003e5e:	4606      	mov	r6, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003e68:	f000 80bc 	beq.w	8003fe4 <_printf_i+0x194>
 8003e6c:	d81a      	bhi.n	8003ea4 <_printf_i+0x54>
 8003e6e:	2a63      	cmp	r2, #99	; 0x63
 8003e70:	d02e      	beq.n	8003ed0 <_printf_i+0x80>
 8003e72:	d80a      	bhi.n	8003e8a <_printf_i+0x3a>
 8003e74:	2a00      	cmp	r2, #0
 8003e76:	f000 80c8 	beq.w	800400a <_printf_i+0x1ba>
 8003e7a:	2a58      	cmp	r2, #88	; 0x58
 8003e7c:	f000 808a 	beq.w	8003f94 <_printf_i+0x144>
 8003e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003e88:	e02a      	b.n	8003ee0 <_printf_i+0x90>
 8003e8a:	2a64      	cmp	r2, #100	; 0x64
 8003e8c:	d001      	beq.n	8003e92 <_printf_i+0x42>
 8003e8e:	2a69      	cmp	r2, #105	; 0x69
 8003e90:	d1f6      	bne.n	8003e80 <_printf_i+0x30>
 8003e92:	6821      	ldr	r1, [r4, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e9a:	d023      	beq.n	8003ee4 <_printf_i+0x94>
 8003e9c:	1d11      	adds	r1, r2, #4
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	6813      	ldr	r3, [r2, #0]
 8003ea2:	e027      	b.n	8003ef4 <_printf_i+0xa4>
 8003ea4:	2a73      	cmp	r2, #115	; 0x73
 8003ea6:	f000 80b4 	beq.w	8004012 <_printf_i+0x1c2>
 8003eaa:	d808      	bhi.n	8003ebe <_printf_i+0x6e>
 8003eac:	2a6f      	cmp	r2, #111	; 0x6f
 8003eae:	d02a      	beq.n	8003f06 <_printf_i+0xb6>
 8003eb0:	2a70      	cmp	r2, #112	; 0x70
 8003eb2:	d1e5      	bne.n	8003e80 <_printf_i+0x30>
 8003eb4:	680a      	ldr	r2, [r1, #0]
 8003eb6:	f042 0220 	orr.w	r2, r2, #32
 8003eba:	600a      	str	r2, [r1, #0]
 8003ebc:	e003      	b.n	8003ec6 <_printf_i+0x76>
 8003ebe:	2a75      	cmp	r2, #117	; 0x75
 8003ec0:	d021      	beq.n	8003f06 <_printf_i+0xb6>
 8003ec2:	2a78      	cmp	r2, #120	; 0x78
 8003ec4:	d1dc      	bne.n	8003e80 <_printf_i+0x30>
 8003ec6:	2278      	movs	r2, #120	; 0x78
 8003ec8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003ecc:	496e      	ldr	r1, [pc, #440]	; (8004088 <_printf_i+0x238>)
 8003ece:	e064      	b.n	8003f9a <_printf_i+0x14a>
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ed6:	1d11      	adds	r1, r2, #4
 8003ed8:	6019      	str	r1, [r3, #0]
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a3      	b.n	800402c <_printf_i+0x1dc>
 8003ee4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ee8:	f102 0104 	add.w	r1, r2, #4
 8003eec:	6019      	str	r1, [r3, #0]
 8003eee:	d0d7      	beq.n	8003ea0 <_printf_i+0x50>
 8003ef0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da03      	bge.n	8003f00 <_printf_i+0xb0>
 8003ef8:	222d      	movs	r2, #45	; 0x2d
 8003efa:	425b      	negs	r3, r3
 8003efc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f00:	4962      	ldr	r1, [pc, #392]	; (800408c <_printf_i+0x23c>)
 8003f02:	220a      	movs	r2, #10
 8003f04:	e017      	b.n	8003f36 <_printf_i+0xe6>
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003f0e:	d003      	beq.n	8003f18 <_printf_i+0xc8>
 8003f10:	1d08      	adds	r0, r1, #4
 8003f12:	6018      	str	r0, [r3, #0]
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	e006      	b.n	8003f26 <_printf_i+0xd6>
 8003f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f1c:	f101 0004 	add.w	r0, r1, #4
 8003f20:	6018      	str	r0, [r3, #0]
 8003f22:	d0f7      	beq.n	8003f14 <_printf_i+0xc4>
 8003f24:	880b      	ldrh	r3, [r1, #0]
 8003f26:	4959      	ldr	r1, [pc, #356]	; (800408c <_printf_i+0x23c>)
 8003f28:	2a6f      	cmp	r2, #111	; 0x6f
 8003f2a:	bf14      	ite	ne
 8003f2c:	220a      	movne	r2, #10
 8003f2e:	2208      	moveq	r2, #8
 8003f30:	2000      	movs	r0, #0
 8003f32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003f36:	6865      	ldr	r5, [r4, #4]
 8003f38:	60a5      	str	r5, [r4, #8]
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	f2c0 809c 	blt.w	8004078 <_printf_i+0x228>
 8003f40:	6820      	ldr	r0, [r4, #0]
 8003f42:	f020 0004 	bic.w	r0, r0, #4
 8003f46:	6020      	str	r0, [r4, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13f      	bne.n	8003fcc <_printf_i+0x17c>
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	f040 8095 	bne.w	800407c <_printf_i+0x22c>
 8003f52:	4675      	mov	r5, lr
 8003f54:	2a08      	cmp	r2, #8
 8003f56:	d10b      	bne.n	8003f70 <_printf_i+0x120>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	07da      	lsls	r2, r3, #31
 8003f5c:	d508      	bpl.n	8003f70 <_printf_i+0x120>
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	6862      	ldr	r2, [r4, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	bfde      	ittt	le
 8003f66:	2330      	movle	r3, #48	; 0x30
 8003f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f70:	ebae 0305 	sub.w	r3, lr, r5
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	f8cd 8000 	str.w	r8, [sp]
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	aa03      	add	r2, sp, #12
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4630      	mov	r0, r6
 8003f82:	f7ff feef 	bl	8003d64 <_printf_common>
 8003f86:	3001      	adds	r0, #1
 8003f88:	d155      	bne.n	8004036 <_printf_i+0x1e6>
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8e:	b005      	add	sp, #20
 8003f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003f98:	493c      	ldr	r1, [pc, #240]	; (800408c <_printf_i+0x23c>)
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fa2:	f100 0504 	add.w	r5, r0, #4
 8003fa6:	601d      	str	r5, [r3, #0]
 8003fa8:	d001      	beq.n	8003fae <_printf_i+0x15e>
 8003faa:	6803      	ldr	r3, [r0, #0]
 8003fac:	e002      	b.n	8003fb4 <_printf_i+0x164>
 8003fae:	0655      	lsls	r5, r2, #25
 8003fb0:	d5fb      	bpl.n	8003faa <_printf_i+0x15a>
 8003fb2:	8803      	ldrh	r3, [r0, #0]
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	bf44      	itt	mi
 8003fb8:	f042 0220 	orrmi.w	r2, r2, #32
 8003fbc:	6022      	strmi	r2, [r4, #0]
 8003fbe:	b91b      	cbnz	r3, 8003fc8 <_printf_i+0x178>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	f022 0220 	bic.w	r2, r2, #32
 8003fc6:	6022      	str	r2, [r4, #0]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	e7b1      	b.n	8003f30 <_printf_i+0xe0>
 8003fcc:	4675      	mov	r5, lr
 8003fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fd2:	fb02 3310 	mls	r3, r2, r0, r3
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d1f5      	bne.n	8003fce <_printf_i+0x17e>
 8003fe2:	e7b7      	b.n	8003f54 <_printf_i+0x104>
 8003fe4:	6808      	ldr	r0, [r1, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	6949      	ldr	r1, [r1, #20]
 8003fea:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003fee:	d004      	beq.n	8003ffa <_printf_i+0x1aa>
 8003ff0:	1d10      	adds	r0, r2, #4
 8003ff2:	6018      	str	r0, [r3, #0]
 8003ff4:	6813      	ldr	r3, [r2, #0]
 8003ff6:	6019      	str	r1, [r3, #0]
 8003ff8:	e007      	b.n	800400a <_printf_i+0x1ba>
 8003ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ffe:	f102 0004 	add.w	r0, r2, #4
 8004002:	6018      	str	r0, [r3, #0]
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	d0f6      	beq.n	8003ff6 <_printf_i+0x1a6>
 8004008:	8019      	strh	r1, [r3, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	4675      	mov	r5, lr
 8004010:	e7b1      	b.n	8003f76 <_printf_i+0x126>
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	1d11      	adds	r1, r2, #4
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	6815      	ldr	r5, [r2, #0]
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	2100      	movs	r1, #0
 800401e:	4628      	mov	r0, r5
 8004020:	f7fc f8de 	bl	80001e0 <memchr>
 8004024:	b108      	cbz	r0, 800402a <_printf_i+0x1da>
 8004026:	1b40      	subs	r0, r0, r5
 8004028:	6060      	str	r0, [r4, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	6123      	str	r3, [r4, #16]
 800402e:	2300      	movs	r3, #0
 8004030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004034:	e79f      	b.n	8003f76 <_printf_i+0x126>
 8004036:	6923      	ldr	r3, [r4, #16]
 8004038:	462a      	mov	r2, r5
 800403a:	4639      	mov	r1, r7
 800403c:	4630      	mov	r0, r6
 800403e:	47c0      	blx	r8
 8004040:	3001      	adds	r0, #1
 8004042:	d0a2      	beq.n	8003f8a <_printf_i+0x13a>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	079b      	lsls	r3, r3, #30
 8004048:	d507      	bpl.n	800405a <_printf_i+0x20a>
 800404a:	2500      	movs	r5, #0
 800404c:	f104 0919 	add.w	r9, r4, #25
 8004050:	68e3      	ldr	r3, [r4, #12]
 8004052:	9a03      	ldr	r2, [sp, #12]
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	429d      	cmp	r5, r3
 8004058:	db05      	blt.n	8004066 <_printf_i+0x216>
 800405a:	68e0      	ldr	r0, [r4, #12]
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	4298      	cmp	r0, r3
 8004060:	bfb8      	it	lt
 8004062:	4618      	movlt	r0, r3
 8004064:	e793      	b.n	8003f8e <_printf_i+0x13e>
 8004066:	2301      	movs	r3, #1
 8004068:	464a      	mov	r2, r9
 800406a:	4639      	mov	r1, r7
 800406c:	4630      	mov	r0, r6
 800406e:	47c0      	blx	r8
 8004070:	3001      	adds	r0, #1
 8004072:	d08a      	beq.n	8003f8a <_printf_i+0x13a>
 8004074:	3501      	adds	r5, #1
 8004076:	e7eb      	b.n	8004050 <_printf_i+0x200>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1a7      	bne.n	8003fcc <_printf_i+0x17c>
 800407c:	780b      	ldrb	r3, [r1, #0]
 800407e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004086:	e765      	b.n	8003f54 <_printf_i+0x104>
 8004088:	0800436a 	.word	0x0800436a
 800408c:	08004359 	.word	0x08004359

08004090 <memcpy>:
 8004090:	b510      	push	{r4, lr}
 8004092:	1e43      	subs	r3, r0, #1
 8004094:	440a      	add	r2, r1
 8004096:	4291      	cmp	r1, r2
 8004098:	d100      	bne.n	800409c <memcpy+0xc>
 800409a:	bd10      	pop	{r4, pc}
 800409c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a4:	e7f7      	b.n	8004096 <memcpy+0x6>

080040a6 <memmove>:
 80040a6:	4288      	cmp	r0, r1
 80040a8:	b510      	push	{r4, lr}
 80040aa:	eb01 0302 	add.w	r3, r1, r2
 80040ae:	d803      	bhi.n	80040b8 <memmove+0x12>
 80040b0:	1e42      	subs	r2, r0, #1
 80040b2:	4299      	cmp	r1, r3
 80040b4:	d10c      	bne.n	80040d0 <memmove+0x2a>
 80040b6:	bd10      	pop	{r4, pc}
 80040b8:	4298      	cmp	r0, r3
 80040ba:	d2f9      	bcs.n	80040b0 <memmove+0xa>
 80040bc:	1881      	adds	r1, r0, r2
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	42d3      	cmn	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memmove+0x20>
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80040ce:	e7f7      	b.n	80040c0 <memmove+0x1a>
 80040d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80040d8:	e7eb      	b.n	80040b2 <memmove+0xc>
	...

080040dc <_free_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4605      	mov	r5, r0
 80040e0:	2900      	cmp	r1, #0
 80040e2:	d045      	beq.n	8004170 <_free_r+0x94>
 80040e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e8:	1f0c      	subs	r4, r1, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bfb8      	it	lt
 80040ee:	18e4      	addlt	r4, r4, r3
 80040f0:	f000 f8d6 	bl	80042a0 <__malloc_lock>
 80040f4:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <_free_r+0x98>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	4610      	mov	r0, r2
 80040fa:	b933      	cbnz	r3, 800410a <_free_r+0x2e>
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	6014      	str	r4, [r2, #0]
 8004100:	4628      	mov	r0, r5
 8004102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004106:	f000 b8cc 	b.w	80042a2 <__malloc_unlock>
 800410a:	42a3      	cmp	r3, r4
 800410c:	d90c      	bls.n	8004128 <_free_r+0x4c>
 800410e:	6821      	ldr	r1, [r4, #0]
 8004110:	1862      	adds	r2, r4, r1
 8004112:	4293      	cmp	r3, r2
 8004114:	bf04      	itt	eq
 8004116:	681a      	ldreq	r2, [r3, #0]
 8004118:	685b      	ldreq	r3, [r3, #4]
 800411a:	6063      	str	r3, [r4, #4]
 800411c:	bf04      	itt	eq
 800411e:	1852      	addeq	r2, r2, r1
 8004120:	6022      	streq	r2, [r4, #0]
 8004122:	6004      	str	r4, [r0, #0]
 8004124:	e7ec      	b.n	8004100 <_free_r+0x24>
 8004126:	4613      	mov	r3, r2
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	b10a      	cbz	r2, 8004130 <_free_r+0x54>
 800412c:	42a2      	cmp	r2, r4
 800412e:	d9fa      	bls.n	8004126 <_free_r+0x4a>
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	1858      	adds	r0, r3, r1
 8004134:	42a0      	cmp	r0, r4
 8004136:	d10b      	bne.n	8004150 <_free_r+0x74>
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	4401      	add	r1, r0
 800413c:	1858      	adds	r0, r3, r1
 800413e:	4282      	cmp	r2, r0
 8004140:	6019      	str	r1, [r3, #0]
 8004142:	d1dd      	bne.n	8004100 <_free_r+0x24>
 8004144:	6810      	ldr	r0, [r2, #0]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	4401      	add	r1, r0
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	e7d7      	b.n	8004100 <_free_r+0x24>
 8004150:	d902      	bls.n	8004158 <_free_r+0x7c>
 8004152:	230c      	movs	r3, #12
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	e7d3      	b.n	8004100 <_free_r+0x24>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	1821      	adds	r1, r4, r0
 800415c:	428a      	cmp	r2, r1
 800415e:	bf04      	itt	eq
 8004160:	6811      	ldreq	r1, [r2, #0]
 8004162:	6852      	ldreq	r2, [r2, #4]
 8004164:	6062      	str	r2, [r4, #4]
 8004166:	bf04      	itt	eq
 8004168:	1809      	addeq	r1, r1, r0
 800416a:	6021      	streq	r1, [r4, #0]
 800416c:	605c      	str	r4, [r3, #4]
 800416e:	e7c7      	b.n	8004100 <_free_r+0x24>
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	200000b0 	.word	0x200000b0

08004178 <_malloc_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	1ccd      	adds	r5, r1, #3
 800417c:	f025 0503 	bic.w	r5, r5, #3
 8004180:	3508      	adds	r5, #8
 8004182:	2d0c      	cmp	r5, #12
 8004184:	bf38      	it	cc
 8004186:	250c      	movcc	r5, #12
 8004188:	2d00      	cmp	r5, #0
 800418a:	4606      	mov	r6, r0
 800418c:	db01      	blt.n	8004192 <_malloc_r+0x1a>
 800418e:	42a9      	cmp	r1, r5
 8004190:	d903      	bls.n	800419a <_malloc_r+0x22>
 8004192:	230c      	movs	r3, #12
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	f000 f881 	bl	80042a0 <__malloc_lock>
 800419e:	4a23      	ldr	r2, [pc, #140]	; (800422c <_malloc_r+0xb4>)
 80041a0:	6814      	ldr	r4, [r2, #0]
 80041a2:	4621      	mov	r1, r4
 80041a4:	b991      	cbnz	r1, 80041cc <_malloc_r+0x54>
 80041a6:	4c22      	ldr	r4, [pc, #136]	; (8004230 <_malloc_r+0xb8>)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	b91b      	cbnz	r3, 80041b4 <_malloc_r+0x3c>
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f867 	bl	8004280 <_sbrk_r>
 80041b2:	6020      	str	r0, [r4, #0]
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f000 f862 	bl	8004280 <_sbrk_r>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d126      	bne.n	800420e <_malloc_r+0x96>
 80041c0:	230c      	movs	r3, #12
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	4630      	mov	r0, r6
 80041c6:	f000 f86c 	bl	80042a2 <__malloc_unlock>
 80041ca:	e7e4      	b.n	8004196 <_malloc_r+0x1e>
 80041cc:	680b      	ldr	r3, [r1, #0]
 80041ce:	1b5b      	subs	r3, r3, r5
 80041d0:	d41a      	bmi.n	8004208 <_malloc_r+0x90>
 80041d2:	2b0b      	cmp	r3, #11
 80041d4:	d90f      	bls.n	80041f6 <_malloc_r+0x7e>
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	50cd      	str	r5, [r1, r3]
 80041da:	18cc      	adds	r4, r1, r3
 80041dc:	4630      	mov	r0, r6
 80041de:	f000 f860 	bl	80042a2 <__malloc_unlock>
 80041e2:	f104 000b 	add.w	r0, r4, #11
 80041e6:	1d23      	adds	r3, r4, #4
 80041e8:	f020 0007 	bic.w	r0, r0, #7
 80041ec:	1ac3      	subs	r3, r0, r3
 80041ee:	d01b      	beq.n	8004228 <_malloc_r+0xb0>
 80041f0:	425a      	negs	r2, r3
 80041f2:	50e2      	str	r2, [r4, r3]
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	428c      	cmp	r4, r1
 80041f8:	bf0d      	iteet	eq
 80041fa:	6863      	ldreq	r3, [r4, #4]
 80041fc:	684b      	ldrne	r3, [r1, #4]
 80041fe:	6063      	strne	r3, [r4, #4]
 8004200:	6013      	streq	r3, [r2, #0]
 8004202:	bf18      	it	ne
 8004204:	460c      	movne	r4, r1
 8004206:	e7e9      	b.n	80041dc <_malloc_r+0x64>
 8004208:	460c      	mov	r4, r1
 800420a:	6849      	ldr	r1, [r1, #4]
 800420c:	e7ca      	b.n	80041a4 <_malloc_r+0x2c>
 800420e:	1cc4      	adds	r4, r0, #3
 8004210:	f024 0403 	bic.w	r4, r4, #3
 8004214:	42a0      	cmp	r0, r4
 8004216:	d005      	beq.n	8004224 <_malloc_r+0xac>
 8004218:	1a21      	subs	r1, r4, r0
 800421a:	4630      	mov	r0, r6
 800421c:	f000 f830 	bl	8004280 <_sbrk_r>
 8004220:	3001      	adds	r0, #1
 8004222:	d0cd      	beq.n	80041c0 <_malloc_r+0x48>
 8004224:	6025      	str	r5, [r4, #0]
 8004226:	e7d9      	b.n	80041dc <_malloc_r+0x64>
 8004228:	bd70      	pop	{r4, r5, r6, pc}
 800422a:	bf00      	nop
 800422c:	200000b0 	.word	0x200000b0
 8004230:	200000b4 	.word	0x200000b4

08004234 <_realloc_r>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	4607      	mov	r7, r0
 8004238:	4614      	mov	r4, r2
 800423a:	460e      	mov	r6, r1
 800423c:	b921      	cbnz	r1, 8004248 <_realloc_r+0x14>
 800423e:	4611      	mov	r1, r2
 8004240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004244:	f7ff bf98 	b.w	8004178 <_malloc_r>
 8004248:	b922      	cbnz	r2, 8004254 <_realloc_r+0x20>
 800424a:	f7ff ff47 	bl	80040dc <_free_r>
 800424e:	4625      	mov	r5, r4
 8004250:	4628      	mov	r0, r5
 8004252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004254:	f000 f826 	bl	80042a4 <_malloc_usable_size_r>
 8004258:	4284      	cmp	r4, r0
 800425a:	d90f      	bls.n	800427c <_realloc_r+0x48>
 800425c:	4621      	mov	r1, r4
 800425e:	4638      	mov	r0, r7
 8004260:	f7ff ff8a 	bl	8004178 <_malloc_r>
 8004264:	4605      	mov	r5, r0
 8004266:	2800      	cmp	r0, #0
 8004268:	d0f2      	beq.n	8004250 <_realloc_r+0x1c>
 800426a:	4631      	mov	r1, r6
 800426c:	4622      	mov	r2, r4
 800426e:	f7ff ff0f 	bl	8004090 <memcpy>
 8004272:	4631      	mov	r1, r6
 8004274:	4638      	mov	r0, r7
 8004276:	f7ff ff31 	bl	80040dc <_free_r>
 800427a:	e7e9      	b.n	8004250 <_realloc_r+0x1c>
 800427c:	4635      	mov	r5, r6
 800427e:	e7e7      	b.n	8004250 <_realloc_r+0x1c>

08004280 <_sbrk_r>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	4c06      	ldr	r4, [pc, #24]	; (800429c <_sbrk_r+0x1c>)
 8004284:	2300      	movs	r3, #0
 8004286:	4605      	mov	r5, r0
 8004288:	4608      	mov	r0, r1
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	f7ff fb5c 	bl	8003948 <_sbrk>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_sbrk_r+0x1a>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	b103      	cbz	r3, 800429a <_sbrk_r+0x1a>
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000790 	.word	0x20000790

080042a0 <__malloc_lock>:
 80042a0:	4770      	bx	lr

080042a2 <__malloc_unlock>:
 80042a2:	4770      	bx	lr

080042a4 <_malloc_usable_size_r>:
 80042a4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80042a8:	2800      	cmp	r0, #0
 80042aa:	f1a0 0004 	sub.w	r0, r0, #4
 80042ae:	bfbc      	itt	lt
 80042b0:	580b      	ldrlt	r3, [r1, r0]
 80042b2:	18c0      	addlt	r0, r0, r3
 80042b4:	4770      	bx	lr
	...

080042b8 <_init>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr

080042c4 <_fini>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr
