/*
 * L6470_Driver.c
 *
 *  Created on: 24 mar. 2019
 *      Author: dellectronics
 */

#include <L6470_Driver.h>

extern SPI_HandleTypeDef hspi1;

#define SPI_PORT &hspi1

#define	ABS_POS 0x01,			//	R/WS - Current Position
#define	EL_POS 0x02				//	R/WS - Electrical Position
#define	MARK 0x03 				//	R/WR - Mark Position
#define SPEED 0x04				//	R - Current Speed
#define	ACC 0x05				//	R/WS - Acceleration
#define	DEC 0x06 				//	R/WS - Deceleration
#define	MAX_SPEED 0x07			//	R/WR - Maximum speed
#define	MIN_SPEED 0x08			//	R/WS - Minimum speed
#define	KVAL_HOLD 0x09			//	R/WR - Holding Kval
#define	KVAL_RUN 0x0A			//  R/WR - Constant speed Kval
#define	KVAL_ACC 0x0B			//	R/WR - Acceleration starting Kval
#define	KVAL_DEC 0x0C			//	R/WR - Deceleration starting Kval
#define	INT_SPEED 0x0D			//	R/WH - Intersect speed
#define	ST_SLP 0x0E				//	R/WH - Start slope
#define	FN_SLP_ACC 0x0F			//	R/WH - Acceleration final slope
#define	FN_SLP_DEC 0x10			//	R/WH - Deceleration final slope
#define	K_TERM 0x11				//	R/WR - Thermal compensation factor
#define	ADC_OUT 0x12			//	R - ADC out
#define	OCD_TH 0x13				//	R/WR - OCD threshold
#define	STALL_TH 0x14			//	R/WR - Stall threshold
#define	FS_SPD 0x15				//	R/WR - Full-step speed
#define	STEP_MODE 0x16			//	R/WH - Step mode
#define	ALARM_EN 0x17			//	R/WS - Alarm enable
#define CONFIG 0x18				//	R/WH - IC Configurator
#define	STATUS 0x19				//	R - Status


void L6470_nCS_High(void)
{
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
}

void L6470_nCS_Low(void)
{
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
}

uint8_t L6470_SetParam(uint8_t param, uint8_t *pData, uint8_t length, uint8_t driverPos)
{
	uint8_t txData[4 * numberOfDrivers];
	uint8_t b = 0;

	for (int var = 0; var < sizeof(txData); ++var)
	{
		txData[var] = 0;

	}

	if (length > 3)
	{
		return L6470_ERROR;
	}
	else
	{
		if (driverPos == 2)
		{
			for (int i = 0; i < length; i += 2)
			{
				txData[i] = *pData;
				++pData;
			}
		}

		else if (driverPos == 1)
		{
			for (int i = 1; i < length; i += 2)
			{
				txData[i] = *pData;
				++pData;
			}
		}

		L6470_nCS_Low();
		HAL_SPI_Transmit(SPI_PORT, &txData, length * 2, 100);
		L6470_nCS_High();

		return L6470_OK;
	}

}	// L6470_SetParam

void L6470_GetParam(uint8_t param, uint8_t *pData, uint8_t length, uint8_t driverPos)
{
	uint8_t rxData[10];
}
