
Steppers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08003000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d0  20000004  08003004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006d4  08003004  000206d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000196b7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003165  00000000  00000000  000396eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e39c  00000000  00000000  0003c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011c8  00000000  00000000  0004abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014b8  00000000  00000000  0004bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008b94  00000000  00000000  0004d270  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000667f  00000000  00000000  00055e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c483  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034d0  00000000  00000000  0005c500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f7c 	.word	0x08002f7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002f7c 	.word	0x08002f7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_InitTick+0x2c>)
{
 80004dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f88c 	bl	8000604 <HAL_SYSTICK_Config>
 80004ec:	4604      	mov	r4, r0
 80004ee:	b938      	cbnz	r0, 8000500 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f0:	4602      	mov	r2, r0
 80004f2:	4629      	mov	r1, r5
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f844 	bl	8000584 <HAL_NVIC_SetPriority>
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000500:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000502:	bd38      	pop	{r3, r4, r5, pc}
 8000504:	20000000 	.word	0x20000000

08000508 <HAL_Init>:
{
 8000508:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f828 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f7ff ffe1 	bl	80004d8 <HAL_InitTick>
 8000516:	4604      	mov	r4, r0
 8000518:	b918      	cbnz	r0, 8000522 <HAL_Init+0x1a>
    HAL_MspInit();
 800051a:	f002 fac9 	bl	8002ab0 <HAL_MspInit>
}
 800051e:	4620      	mov	r0, r4
 8000520:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000522:	2401      	movs	r4, #1
 8000524:	e7fb      	b.n	800051e <HAL_Init+0x16>
	...

08000528 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000528:	4a02      	ldr	r2, [pc, #8]	; (8000534 <HAL_IncTick+0xc>)
 800052a:	6813      	ldr	r3, [r2, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000048 	.word	0x20000048

08000538 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <HAL_GetTick+0x8>)
 800053a:	6818      	ldr	r0, [r3, #0]
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000048 	.word	0x20000048

08000544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000544:	b538      	push	{r3, r4, r5, lr}
 8000546:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000548:	f7ff fff6 	bl	8000538 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800054e:	4605      	mov	r5, r0
  {
    wait++;
 8000550:	bf18      	it	ne
 8000552:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000554:	f7ff fff0 	bl	8000538 <HAL_GetTick>
 8000558:	1b40      	subs	r0, r0, r5
 800055a:	4284      	cmp	r4, r0
 800055c:	d8fa      	bhi.n	8000554 <HAL_Delay+0x10>
  {
  }
}
 800055e:	bd38      	pop	{r3, r4, r5, pc}

08000560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000570:	0200      	lsls	r0, r0, #8
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800057a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800057c:	60d3      	str	r3, [r2, #12]
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	68dc      	ldr	r4, [r3, #12]
 800058a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	2b04      	cmp	r3, #4
 8000596:	bf28      	it	cs
 8000598:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	f04f 0501 	mov.w	r5, #1
 80005a0:	fa05 f303 	lsl.w	r3, r5, r3
 80005a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	bf8c      	ite	hi
 80005aa:	3c03      	subhi	r4, #3
 80005ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ae:	4019      	ands	r1, r3
 80005b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b2:	fa05 f404 	lsl.w	r4, r5, r4
 80005b6:	3c01      	subs	r4, #1
 80005b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	ea42 0201 	orr.w	r2, r2, r1
 80005c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	bfaf      	iteee	ge
 80005c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	f000 000f 	andlt.w	r0, r0, #15
 80005ce:	4b06      	ldrlt	r3, [pc, #24]	; (80005e8 <HAL_NVIC_SetPriority+0x64>)
 80005d0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	bfa5      	ittet	ge
 80005d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005ec:	0942      	lsrs	r2, r0, #5
 80005ee:	2301      	movs	r3, #1
 80005f0:	f000 001f 	and.w	r0, r0, #31
 80005f4:	fa03 f000 	lsl.w	r0, r3, r0
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <HAL_NVIC_EnableIRQ+0x14>)
 80005fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100

08000604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	3801      	subs	r0, #1
 8000606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800060a:	d20a      	bcs.n	8000622 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000610:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	21f0      	movs	r1, #240	; 0xf0
 8000614:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <DFSDM_GetChannelFromInstance+0x54>)
 8000632:	4298      	cmp	r0, r3
 8000634:	d017      	beq.n	8000666 <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8000636:	3320      	adds	r3, #32
 8000638:	4298      	cmp	r0, r3
 800063a:	d016      	beq.n	800066a <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 800063c:	3320      	adds	r3, #32
 800063e:	4298      	cmp	r0, r3
 8000640:	d015      	beq.n	800066e <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8000642:	3320      	adds	r3, #32
 8000644:	4298      	cmp	r0, r3
 8000646:	d014      	beq.n	8000672 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000648:	3320      	adds	r3, #32
 800064a:	4298      	cmp	r0, r3
 800064c:	d013      	beq.n	8000676 <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 800064e:	3320      	adds	r3, #32
 8000650:	4298      	cmp	r0, r3
 8000652:	d012      	beq.n	800067a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8000654:	3320      	adds	r3, #32
 8000656:	4298      	cmp	r0, r3
 8000658:	d011      	beq.n	800067e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 800065a:	3320      	adds	r3, #32
 800065c:	4298      	cmp	r0, r3
 800065e:	bf0c      	ite	eq
 8000660:	2007      	moveq	r0, #7
 8000662:	2000      	movne	r0, #0
 8000664:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8000666:	2000      	movs	r0, #0
 8000668:	4770      	bx	lr
    channel = 1;
 800066a:	2001      	movs	r0, #1
 800066c:	4770      	bx	lr
    channel = 2;
 800066e:	2002      	movs	r0, #2
 8000670:	4770      	bx	lr
    channel = 3;
 8000672:	2003      	movs	r0, #3
 8000674:	4770      	bx	lr
    channel = 4;
 8000676:	2004      	movs	r0, #4
 8000678:	4770      	bx	lr
    channel = 5;
 800067a:	2005      	movs	r0, #5
 800067c:	4770      	bx	lr
    channel = 6;
 800067e:	2006      	movs	r0, #6
  }

  return channel;
}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40016000 	.word	0x40016000

08000688 <HAL_DFSDM_ChannelInit>:
{
 8000688:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800068a:	4604      	mov	r4, r0
 800068c:	2800      	cmp	r0, #0
 800068e:	d067      	beq.n	8000760 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000690:	6800      	ldr	r0, [r0, #0]
 8000692:	4d34      	ldr	r5, [pc, #208]	; (8000764 <HAL_DFSDM_ChannelInit+0xdc>)
 8000694:	f7ff ffcc 	bl	8000630 <DFSDM_GetChannelFromInstance>
 8000698:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d15f      	bne.n	8000760 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80006a0:	4620      	mov	r0, r4
 80006a2:	f002 fa1d 	bl	8002ae0 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <HAL_DFSDM_ChannelInit+0xe0>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	3201      	adds	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d119      	bne.n	80006e8 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80006b4:	4b2d      	ldr	r3, [pc, #180]	; (800076c <HAL_DFSDM_ChannelInit+0xe4>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80006bc:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68a1      	ldr	r1, [r4, #8]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80006cc:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80006ce:	7922      	ldrb	r2, [r4, #4]
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d105      	bne.n	80006e0 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80006d4:	68e1      	ldr	r1, [r4, #12]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	3901      	subs	r1, #1
 80006da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80006de:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006e6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80006e8:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80006ea:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 80006f2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80006f4:	6923      	ldr	r3, [r4, #16]
 80006f6:	6802      	ldr	r2, [r0, #0]
 80006f8:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 80006fa:	69a1      	ldr	r1, [r4, #24]
 80006fc:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80006fe:	4313      	orrs	r3, r2
 8000700:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000702:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000704:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000706:	f023 030f 	bic.w	r3, r3, #15
 800070a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800070c:	69e3      	ldr	r3, [r4, #28]
 800070e:	6802      	ldr	r2, [r0, #0]
 8000710:	430b      	orrs	r3, r1
 8000712:	4313      	orrs	r3, r2
 8000714:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000716:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000718:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800071a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800071c:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000720:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000722:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000724:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000726:	430b      	orrs	r3, r1
 8000728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072c:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800072e:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000730:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000738:	6843      	ldr	r3, [r0, #4]
 800073a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800073e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000744:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000746:	6803      	ldr	r3, [r0, #0]
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800074e:	2301      	movs	r3, #1
 8000750:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000754:	f7ff ff6c 	bl	8000630 <DFSDM_GetChannelFromInstance>
 8000758:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 800075c:	2000      	movs	r0, #0
 800075e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000760:	2001      	movs	r0, #1
}
 8000762:	bd38      	pop	{r3, r4, r5, pc}
 8000764:	20000020 	.word	0x20000020
 8000768:	20000040 	.word	0x20000040
 800076c:	40016000 	.word	0x40016000

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000774:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000776:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000778:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000924 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800077c:	4c67      	ldr	r4, [pc, #412]	; (800091c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000780:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000782:	9a01      	ldr	r2, [sp, #4]
 8000784:	40da      	lsrs	r2, r3
 8000786:	d102      	bne.n	800078e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000788:	b005      	add	sp, #20
 800078a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800078e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000790:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000792:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000794:	ea12 0e06 	ands.w	lr, r2, r6
 8000798:	f000 80b1 	beq.w	80008fe <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800079c:	684a      	ldr	r2, [r1, #4]
 800079e:	f022 0710 	bic.w	r7, r2, #16
 80007a2:	2f02      	cmp	r7, #2
 80007a4:	d116      	bne.n	80007d4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80007a6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80007aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007ae:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80007b2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80007ba:	f04f 0c0f 	mov.w	ip, #15
 80007be:	fa0c fc0a 	lsl.w	ip, ip, sl
 80007c2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007c6:	690d      	ldr	r5, [r1, #16]
 80007c8:	fa05 f50a 	lsl.w	r5, r5, sl
 80007cc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80007d0:	f8c9 5020 	str.w	r5, [r9, #32]
 80007d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007d8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007da:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007de:	fa05 f50c 	lsl.w	r5, r5, ip
 80007e2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007e4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80007e8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007ec:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007f2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007f8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fc:	d811      	bhi.n	8000822 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000800:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000804:	68cf      	ldr	r7, [r1, #12]
 8000806:	fa07 f70c 	lsl.w	r7, r7, ip
 800080a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800080e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000810:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000812:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000816:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800081a:	409f      	lsls	r7, r3
 800081c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000820:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000822:	f1ba 0f03 	cmp.w	sl, #3
 8000826:	d107      	bne.n	8000838 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000828:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800082a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800082e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000832:	409f      	lsls	r7, r3
 8000834:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000836:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000838:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800083a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800083c:	688e      	ldr	r6, [r1, #8]
 800083e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000842:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000844:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000846:	00d5      	lsls	r5, r2, #3
 8000848:	d559      	bpl.n	80008fe <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800084e:	f045 0501 	orr.w	r5, r5, #1
 8000852:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000856:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800085a:	f023 0603 	bic.w	r6, r3, #3
 800085e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000862:	f005 0501 	and.w	r5, r5, #1
 8000866:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800086a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800086c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000872:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000874:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000878:	270f      	movs	r7, #15
 800087a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800087e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000882:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000886:	d03c      	beq.n	8000902 <HAL_GPIO_Init+0x192>
 8000888:	4d25      	ldr	r5, [pc, #148]	; (8000920 <HAL_GPIO_Init+0x1b0>)
 800088a:	42a8      	cmp	r0, r5
 800088c:	d03b      	beq.n	8000906 <HAL_GPIO_Init+0x196>
 800088e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000892:	42a8      	cmp	r0, r5
 8000894:	d039      	beq.n	800090a <HAL_GPIO_Init+0x19a>
 8000896:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089a:	42a8      	cmp	r0, r5
 800089c:	d037      	beq.n	800090e <HAL_GPIO_Init+0x19e>
 800089e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008a2:	42a8      	cmp	r0, r5
 80008a4:	d035      	beq.n	8000912 <HAL_GPIO_Init+0x1a2>
 80008a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008aa:	42a8      	cmp	r0, r5
 80008ac:	d033      	beq.n	8000916 <HAL_GPIO_Init+0x1a6>
 80008ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008b2:	42a8      	cmp	r0, r5
 80008b4:	bf14      	ite	ne
 80008b6:	2507      	movne	r5, #7
 80008b8:	2506      	moveq	r5, #6
 80008ba:	fa05 f50c 	lsl.w	r5, r5, ip
 80008be:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008c0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80008c2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80008c4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 80008ca:	bf54      	ite	pl
 80008cc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008ce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80008d2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80008d4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008dc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80008e0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80008e2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80008e6:	bf54      	ite	pl
 80008e8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008ea:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80008ee:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80008f0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80008f4:	bf54      	ite	pl
 80008f6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80008f8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80008fc:	60e5      	str	r5, [r4, #12]
    position++;
 80008fe:	3301      	adds	r3, #1
 8000900:	e73f      	b.n	8000782 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000902:	2500      	movs	r5, #0
 8000904:	e7d9      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 8000906:	2501      	movs	r5, #1
 8000908:	e7d7      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 800090a:	2502      	movs	r5, #2
 800090c:	e7d5      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 800090e:	2503      	movs	r5, #3
 8000910:	e7d3      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 8000912:	2504      	movs	r5, #4
 8000914:	e7d1      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 8000916:	2505      	movs	r5, #5
 8000918:	e7cf      	b.n	80008ba <HAL_GPIO_Init+0x14a>
 800091a:	bf00      	nop
 800091c:	40010400 	.word	0x40010400
 8000920:	48000400 	.word	0x48000400
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000928:	b10a      	cbz	r2, 800092e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800092a:	6181      	str	r1, [r0, #24]
 800092c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800092e:	6281      	str	r1, [r0, #40]	; 0x28
 8000930:	4770      	bx	lr

08000932 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000932:	4770      	bx	lr

08000934 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000934:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000938:	6959      	ldr	r1, [r3, #20]
 800093a:	4201      	tst	r1, r0
 800093c:	d002      	beq.n	8000944 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800093e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000940:	f7ff fff7 	bl	8000932 <HAL_GPIO_EXTI_Callback>
 8000944:	bd08      	pop	{r3, pc}
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400

0800094c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800094c:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800094e:	4604      	mov	r4, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d04a      	beq.n	80009ea <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000954:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000958:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800095c:	b91b      	cbnz	r3, 8000966 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800095e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000962:	f002 f8ef 	bl	8002b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000966:	2324      	movs	r3, #36	; 0x24
 8000968:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800096c:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800096e:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f022 0201 	bic.w	r2, r2, #1
 8000976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000978:	6862      	ldr	r2, [r4, #4]
 800097a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000980:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000982:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800098c:	d124      	bne.n	80009d8 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800098e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000992:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000994:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000996:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000998:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800099c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009a0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009a8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009aa:	6922      	ldr	r2, [r4, #16]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	69a1      	ldr	r1, [r4, #24]
 80009b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80009b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009b6:	6a21      	ldr	r1, [r4, #32]
 80009b8:	69e2      	ldr	r2, [r4, #28]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009c6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80009c8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009ca:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80009cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80009d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009d2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80009d6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80009d8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80009dc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80009de:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80009e0:	bf04      	itt	eq
 80009e2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80009e6:	605a      	streq	r2, [r3, #4]
 80009e8:	e7d4      	b.n	8000994 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
}
 80009ec:	bd10      	pop	{r4, pc}

080009ee <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009ee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	2a20      	cmp	r2, #32
{
 80009f6:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009f8:	d11d      	bne.n	8000a36 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d019      	beq.n	8000a36 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a02:	2324      	movs	r3, #36	; 0x24
 8000a04:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a08:	6803      	ldr	r3, [r0, #0]
 8000a0a:	681c      	ldr	r4, [r3, #0]
 8000a0c:	f024 0401 	bic.w	r4, r4, #1
 8000a10:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a12:	681c      	ldr	r4, [r3, #0]
 8000a14:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000a18:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a1a:	681c      	ldr	r4, [r3, #0]
 8000a1c:	4321      	orrs	r1, r4
 8000a1e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	f041 0101 	orr.w	r1, r1, #1
 8000a26:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a28:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a2a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000a32:	4618      	mov	r0, r3
 8000a34:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000a36:	2002      	movs	r0, #2
  }
}
 8000a38:	bd10      	pop	{r4, pc}

08000a3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a3a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a3c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000a40:	b2e4      	uxtb	r4, r4
 8000a42:	2c20      	cmp	r4, #32
 8000a44:	d11c      	bne.n	8000a80 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d018      	beq.n	8000a80 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a4e:	2324      	movs	r3, #36	; 0x24
 8000a50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a54:	6803      	ldr	r3, [r0, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	f022 0201 	bic.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a5e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a60:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a64:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a68:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f042 0201 	orr.w	r2, r2, #1
 8000a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a72:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a74:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000a80:	2002      	movs	r0, #2
  }
}
 8000a82:	bd10      	pop	{r4, pc}

08000a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a88:	4604      	mov	r4, r0
{
 8000a8a:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d074      	beq.n	8000b7a <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a90:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000a94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a98:	b91b      	cbnz	r3, 8000aa2 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a9a:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a9e:	f002 f971 	bl	8002d84 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000aa2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aa4:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8000aa6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000aaa:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8000aae:	f001 fc10 	bl	80022d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	466e      	mov	r6, sp
 8000ab6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000abc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ac0:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ac4:	f104 0804 	add.w	r8, r4, #4
 8000ac8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000acc:	6820      	ldr	r0, [r4, #0]
 8000ace:	f001 fbd1 	bl	8002274 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	6820      	ldr	r0, [r4, #0]
 8000ad6:	f001 fc02 	bl	80022de <USB_SetCurrentMode>
 8000ada:	2100      	movs	r1, #0
 8000adc:	4622      	mov	r2, r4
 8000ade:	4623      	mov	r3, r4
 8000ae0:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ae4:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ae6:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8000ae8:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000aec:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8000af0:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8000af2:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8000af4:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000af8:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000afc:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000afe:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b00:	6518      	str	r0, [r3, #80]	; 0x50
 8000b02:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8000b06:	d1ef      	bne.n	8000ae8 <HAL_PCD_Init+0x64>
 8000b08:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b0a:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8000b0c:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8000b10:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8000b12:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8000b14:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b18:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b1c:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b20:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b24:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8000b28:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8000b2c:	d1ee      	bne.n	8000b0c <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	466e      	mov	r6, sp
 8000b32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000b40:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f001 fc0b 	bl	8002360 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8000b4a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000b4c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000b50:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d102      	bne.n	8000b60 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f000 f80f 	bl	8000b7e <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8000b60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d102      	bne.n	8000b6c <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8000b66:	4620      	mov	r0, r4
 8000b68:	f000 f81c 	bl	8000ba4 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	f001 fc93 	bl	8002498 <USB_DevDisconnect>

  return HAL_OK;
 8000b72:	2000      	movs	r0, #0
}
 8000b74:	b00a      	add	sp, #40	; 0x28
 8000b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	e7fa      	b.n	8000b74 <HAL_PCD_Init+0xf0>

08000b7e <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b7e:	6802      	ldr	r2, [r0, #0]
{
 8000b80:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8000b82:	2101      	movs	r1, #1
 8000b84:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000b8e:	6993      	ldr	r3, [r2, #24]
 8000b90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b94:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000b96:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	f043 0303 	orr.w	r3, r3, #3
 8000ba0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ba4:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8000bac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb2:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000bb8:	4a02      	ldr	r2, [pc, #8]	; (8000bc4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4770      	bx	lr
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_PWREx_GetVoltageRange+0xc>)
 8000bca:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000bcc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bda:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bdc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be4:	d11c      	bne.n	8000c20 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000bea:	d015      	beq.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bf6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bf8:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000bfa:	6811      	ldr	r1, [r2, #0]
 8000bfc:	2232      	movs	r2, #50	; 0x32
 8000bfe:	434a      	muls	r2, r1
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000c02:	fbb2 f2f1 	udiv	r2, r2, r1
 8000c06:	4619      	mov	r1, r3
 8000c08:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c0a:	6958      	ldr	r0, [r3, #20]
 8000c0c:	0540      	lsls	r0, r0, #21
 8000c0e:	d500      	bpl.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000c10:	b922      	cbnz	r2, 8000c1c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c12:	694b      	ldr	r3, [r1, #20]
 8000c14:	055b      	lsls	r3, r3, #21
 8000c16:	d40d      	bmi.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c18:	2000      	movs	r0, #0
 8000c1a:	4770      	bx	lr
        wait_loop_index--;
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	e7f4      	b.n	8000c0a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c20:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c24:	bf1f      	itttt	ne
 8000c26:	681a      	ldrne	r2, [r3, #0]
 8000c28:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000c2c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000c30:	601a      	strne	r2, [r3, #0]
 8000c32:	e7f1      	b.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000c34:	2003      	movs	r0, #3
}
 8000c36:	4770      	bx	lr
 8000c38:	40007000 	.word	0x40007000
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	000f4240 	.word	0x000f4240

08000c44 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8000c44:	4a02      	ldr	r2, [pc, #8]	; (8000c50 <HAL_PWREx_EnableVddUSB+0xc>)
 8000c46:	6853      	ldr	r3, [r2, #4]
 8000c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4c:	6053      	str	r3, [r2, #4]
 8000c4e:	4770      	bx	lr
 8000c50:	40007000 	.word	0x40007000

08000c54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8000c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c58:	9d06      	ldr	r5, [sp, #24]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460f      	mov	r7, r1
 8000c5e:	4616      	mov	r6, r2
 8000c60:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8000c62:	6821      	ldr	r1, [r4, #0]
 8000c64:	688a      	ldr	r2, [r1, #8]
 8000c66:	423a      	tst	r2, r7
 8000c68:	bf14      	ite	ne
 8000c6a:	2201      	movne	r2, #1
 8000c6c:	2200      	moveq	r2, #0
 8000c6e:	42b2      	cmp	r2, r6
 8000c70:	d102      	bne.n	8000c78 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000c72:	2000      	movs	r0, #0
}
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000c78:	1c6b      	adds	r3, r5, #1
 8000c7a:	d0f3      	beq.n	8000c64 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c7c:	f7ff fc5c 	bl	8000538 <HAL_GetTick>
 8000c80:	eba0 0008 	sub.w	r0, r0, r8
 8000c84:	4285      	cmp	r5, r0
 8000c86:	d301      	bcc.n	8000c8c <QSPI_WaitFlagStateUntilTimeout+0x38>
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d1ea      	bne.n	8000c62 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8000c92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ca0 <HAL_QSPI_Init>:
{
 8000ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ca2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fc48 	bl	8000538 <HAL_GetTick>
 8000ca8:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d049      	beq.n	8000d42 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8000cae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d047      	beq.n	8000d46 <HAL_QSPI_Init+0xa6>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000cbc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000cc0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8000cc4:	b93a      	cbnz	r2, 8000cd6 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8000cc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f001 ff70 	bl	8002bb0 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8000cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cd4:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000cd6:	6820      	ldr	r0, [r4, #0]
 8000cd8:	68a1      	ldr	r1, [r4, #8]
 8000cda:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8000cde:	3901      	subs	r1, #1
 8000ce0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000ce4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ce8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000cea:	2120      	movs	r1, #32
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff ffae 	bl	8000c54 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8000cf8:	b9f0      	cbnz	r0, 8000d38 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8000cfa:	6822      	ldr	r2, [r4, #0]
 8000cfc:	6865      	ldr	r5, [r4, #4]
 8000cfe:	6811      	ldr	r1, [r2, #0]
 8000d00:	68e3      	ldr	r3, [r4, #12]
 8000d02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d06:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8000d0a:	f021 0110 	bic.w	r1, r1, #16
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8000d12:	69a1      	ldr	r1, [r4, #24]
 8000d14:	6963      	ldr	r3, [r4, #20]
 8000d16:	6855      	ldr	r5, [r2, #4]
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	6921      	ldr	r1, [r4, #16]
 8000d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d20:	490a      	ldr	r1, [pc, #40]	; (8000d4c <HAL_QSPI_Init+0xac>)
 8000d22:	4029      	ands	r1, r5
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8000d30:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8000d32:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8000d34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8000d3e:	b003      	add	sp, #12
 8000d40:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	e7fb      	b.n	8000d3e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8000d46:	2002      	movs	r0, #2
 8000d48:	e7f9      	b.n	8000d3e <HAL_QSPI_Init+0x9e>
 8000d4a:	bf00      	nop
 8000d4c:	ffe0f8fe 	.word	0xffe0f8fe

08000d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000d52:	4d1e      	ldr	r5, [pc, #120]	; (8000dcc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000d54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d56:	00da      	lsls	r2, r3, #3
{
 8000d58:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000d5a:	d518      	bpl.n	8000d8e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000d5c:	f7ff ff34 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000d64:	d123      	bne.n	8000dae <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000d66:	2c80      	cmp	r4, #128	; 0x80
 8000d68:	d929      	bls.n	8000dbe <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000d6a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000d6c:	bf8c      	ite	hi
 8000d6e:	2002      	movhi	r0, #2
 8000d70:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	f023 0307 	bic.w	r3, r3, #7
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000d84:	1a18      	subs	r0, r3, r0
 8000d86:	bf18      	it	ne
 8000d88:	2001      	movne	r0, #1
 8000d8a:	b003      	add	sp, #12
 8000d8c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	65ab      	str	r3, [r5, #88]	; 0x58
 8000d96:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	9301      	str	r3, [sp, #4]
 8000d9e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000da0:	f7ff ff12 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000da4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000daa:	65ab      	str	r3, [r5, #88]	; 0x58
 8000dac:	e7d8      	b.n	8000d60 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000dae:	2c80      	cmp	r4, #128	; 0x80
 8000db0:	d807      	bhi.n	8000dc2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000db2:	d008      	beq.n	8000dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000db4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000db8:	4258      	negs	r0, r3
 8000dba:	4158      	adcs	r0, r3
 8000dbc:	e7d9      	b.n	8000d72 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	e7d7      	b.n	8000d72 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	e7d5      	b.n	8000d72 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	e7d3      	b.n	8000d72 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_RCC_GetSysClockFreq+0x98>)
 8000dd6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dd8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000dda:	f012 020c 	ands.w	r2, r2, #12
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_GetSysClockFreq+0x18>
 8000de0:	2a0c      	cmp	r2, #12
 8000de2:	d115      	bne.n	8000e10 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000de4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000de8:	2901      	cmp	r1, #1
 8000dea:	d118      	bne.n	8000e1e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000dec:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000dee:	4820      	ldr	r0, [pc, #128]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000df0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000df2:	bf55      	itete	pl
 8000df4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000df8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000dfa:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000dfe:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000e02:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e06:	b382      	cbz	r2, 8000e6a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000e08:	2a0c      	cmp	r2, #12
 8000e0a:	d009      	beq.n	8000e20 <HAL_RCC_GetSysClockFreq+0x4c>
 8000e0c:	2000      	movs	r0, #0
  return sysclockfreq;
 8000e0e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000e10:	2a04      	cmp	r2, #4
 8000e12:	d029      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x94>
 8000e14:	2a08      	cmp	r2, #8
 8000e16:	4817      	ldr	r0, [pc, #92]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e18:	bf18      	it	ne
 8000e1a:	2000      	movne	r0, #0
 8000e1c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000e1e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e20:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e22:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e24:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e28:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000e2c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000e2e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000e32:	d005      	beq.n	8000e40 <HAL_RCC_GetSysClockFreq+0x6c>
 8000e34:	2903      	cmp	r1, #3
 8000e36:	d012      	beq.n	8000e5e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e38:	68d9      	ldr	r1, [r3, #12]
 8000e3a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000e3e:	e003      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e40:	68d9      	ldr	r1, [r3, #12]
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e44:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e48:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e4a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e4e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000e52:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e54:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000e56:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000e58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e5c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e5e:	68d9      	ldr	r1, [r3, #12]
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e62:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000e66:	e7ef      	b.n	8000e48 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	08002fc0 	.word	0x08002fc0
 8000e74:	007a1200 	.word	0x007a1200
 8000e78:	00f42400 	.word	0x00f42400

08000e7c <HAL_RCC_OscConfig>:
{
 8000e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000e80:	4605      	mov	r5, r0
 8000e82:	b918      	cbnz	r0, 8000e8c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
}
 8000e86:	b003      	add	sp, #12
 8000e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8c:	4ca5      	ldr	r4, [pc, #660]	; (8001124 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e8e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e90:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e92:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e94:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e96:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e9e:	d53c      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ea0:	b11e      	cbz	r6, 8000eaa <HAL_RCC_OscConfig+0x2e>
 8000ea2:	2e0c      	cmp	r6, #12
 8000ea4:	d163      	bne.n	8000f6e <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000ea6:	2f01      	cmp	r7, #1
 8000ea8:	d161      	bne.n	8000f6e <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	0798      	lsls	r0, r3, #30
 8000eae:	d502      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x3a>
 8000eb0:	69ab      	ldr	r3, [r5, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0e6      	beq.n	8000e84 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	6a28      	ldr	r0, [r5, #32]
 8000eba:	0719      	lsls	r1, r3, #28
 8000ebc:	bf56      	itet	pl
 8000ebe:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000ec2:	6823      	ldrmi	r3, [r4, #0]
 8000ec4:	091b      	lsrpl	r3, r3, #4
 8000ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eca:	4283      	cmp	r3, r0
 8000ecc:	d23a      	bcs.n	8000f44 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ece:	f7ff ff3f 	bl	8000d50 <RCC_SetFlashLatencyFromMSIRange>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d1d6      	bne.n	8000e84 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6023      	str	r3, [r4, #0]
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	6a2a      	ldr	r2, [r5, #32]
 8000ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eea:	6863      	ldr	r3, [r4, #4]
 8000eec:	69ea      	ldr	r2, [r5, #28]
 8000eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ef6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ef8:	f7ff ff6c 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8000efc:	68a3      	ldr	r3, [r4, #8]
 8000efe:	4a8a      	ldr	r2, [pc, #552]	; (8001128 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	40d8      	lsrs	r0, r3
 8000f0c:	4b87      	ldr	r3, [pc, #540]	; (800112c <HAL_RCC_OscConfig+0x2b0>)
 8000f0e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fae1 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d1b5      	bne.n	8000e86 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	07d8      	lsls	r0, r3, #31
 8000f1e:	d45d      	bmi.n	8000fdc <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	0799      	lsls	r1, r3, #30
 8000f24:	f100 809c 	bmi.w	8001060 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	0718      	lsls	r0, r3, #28
 8000f2c:	f100 80d0 	bmi.w	80010d0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	0759      	lsls	r1, r3, #29
 8000f34:	f100 80fc 	bmi.w	8001130 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f38:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 8165 	bne.w	800120a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8000f40:	2000      	movs	r0, #0
 8000f42:	e7a0      	b.n	8000e86 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6023      	str	r3, [r4, #0]
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f52:	4303      	orrs	r3, r0
 8000f54:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	69ea      	ldr	r2, [r5, #28]
 8000f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000f62:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	f7ff fef4 	bl	8000d50 <RCC_SetFlashLatencyFromMSIRange>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d0c5      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x7c>
 8000f6c:	e78a      	b.n	8000e84 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6e:	69ab      	ldr	r3, [r5, #24]
 8000f70:	b31b      	cbz	r3, 8000fba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fadd 	bl	8000538 <HAL_GetTick>
 8000f7e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	079a      	lsls	r2, r3, #30
 8000f84:	d511      	bpl.n	8000faa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	6a2a      	ldr	r2, [r5, #32]
 8000f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f96:	4313      	orrs	r3, r2
 8000f98:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	69ea      	ldr	r2, [r5, #28]
 8000f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fa6:	6063      	str	r3, [r4, #4]
 8000fa8:	e7b7      	b.n	8000f1a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000faa:	f7ff fac5 	bl	8000538 <HAL_GetTick>
 8000fae:	eba0 0008 	sub.w	r0, r0, r8
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9e4      	bls.n	8000f80 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	e765      	b.n	8000e86 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fab9 	bl	8000538 <HAL_GetTick>
 8000fc6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	079b      	lsls	r3, r3, #30
 8000fcc:	d5a5      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fce:	f7ff fab3 	bl	8000538 <HAL_GetTick>
 8000fd2:	eba0 0008 	sub.w	r0, r0, r8
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9f6      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x14c>
 8000fda:	e7ec      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fdc:	2e08      	cmp	r6, #8
 8000fde:	d003      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x16c>
 8000fe0:	2e0c      	cmp	r6, #12
 8000fe2:	d108      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8000fe4:	2f03      	cmp	r7, #3
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	039a      	lsls	r2, r3, #14
 8000fec:	d598      	bpl.n	8000f20 <HAL_RCC_OscConfig+0xa4>
 8000fee:	686b      	ldr	r3, [r5, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d195      	bne.n	8000f20 <HAL_RCC_OscConfig+0xa4>
 8000ff4:	e746      	b.n	8000e84 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff6:	686b      	ldr	r3, [r5, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d110      	bne.n	8001020 <HAL_RCC_OscConfig+0x1a4>
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001006:	f7ff fa97 	bl	8000538 <HAL_GetTick>
 800100a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	039b      	lsls	r3, r3, #14
 8001010:	d486      	bmi.n	8000f20 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001012:	f7ff fa91 	bl	8000538 <HAL_GetTick>
 8001016:	eba0 0008 	sub.w	r0, r0, r8
 800101a:	2864      	cmp	r0, #100	; 0x64
 800101c:	d9f6      	bls.n	800100c <HAL_RCC_OscConfig+0x190>
 800101e:	e7ca      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001024:	d104      	bne.n	8001030 <HAL_RCC_OscConfig+0x1b4>
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	e7e6      	b.n	8000ffe <HAL_RCC_OscConfig+0x182>
 8001030:	6822      	ldr	r2, [r4, #0]
 8001032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001036:	6022      	str	r2, [r4, #0]
 8001038:	6822      	ldr	r2, [r4, #0]
 800103a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800103e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e0      	bne.n	8001006 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8001044:	f7ff fa78 	bl	8000538 <HAL_GetTick>
 8001048:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	0398      	lsls	r0, r3, #14
 800104e:	f57f af67 	bpl.w	8000f20 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff fa71 	bl	8000538 <HAL_GetTick>
 8001056:	eba0 0008 	sub.w	r0, r0, r8
 800105a:	2864      	cmp	r0, #100	; 0x64
 800105c:	d9f5      	bls.n	800104a <HAL_RCC_OscConfig+0x1ce>
 800105e:	e7aa      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001060:	2e04      	cmp	r6, #4
 8001062:	d003      	beq.n	800106c <HAL_RCC_OscConfig+0x1f0>
 8001064:	2e0c      	cmp	r6, #12
 8001066:	d110      	bne.n	800108a <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001068:	2f02      	cmp	r7, #2
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	0559      	lsls	r1, r3, #21
 8001070:	d503      	bpl.n	800107a <HAL_RCC_OscConfig+0x1fe>
 8001072:	68eb      	ldr	r3, [r5, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f43f af05 	beq.w	8000e84 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	692a      	ldr	r2, [r5, #16]
 800107e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001082:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001086:	6063      	str	r3, [r4, #4]
 8001088:	e74e      	b.n	8000f28 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108a:	68eb      	ldr	r3, [r5, #12]
 800108c:	b17b      	cbz	r3, 80010ae <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001096:	f7ff fa4f 	bl	8000538 <HAL_GetTick>
 800109a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	055a      	lsls	r2, r3, #21
 80010a0:	d4eb      	bmi.n	800107a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fa49 	bl	8000538 <HAL_GetTick>
 80010a6:	1bc0      	subs	r0, r0, r7
 80010a8:	2802      	cmp	r0, #2
 80010aa:	d9f7      	bls.n	800109c <HAL_RCC_OscConfig+0x220>
 80010ac:	e783      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010b6:	f7ff fa3f 	bl	8000538 <HAL_GetTick>
 80010ba:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	f57f af32 	bpl.w	8000f28 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fa38 	bl	8000538 <HAL_GetTick>
 80010c8:	1bc0      	subs	r0, r0, r7
 80010ca:	2802      	cmp	r0, #2
 80010cc:	d9f6      	bls.n	80010bc <HAL_RCC_OscConfig+0x240>
 80010ce:	e772      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d0:	696b      	ldr	r3, [r5, #20]
 80010d2:	b19b      	cbz	r3, 80010fc <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80010d4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80010e0:	f7ff fa2a 	bl	8000538 <HAL_GetTick>
 80010e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80010ea:	079a      	lsls	r2, r3, #30
 80010ec:	f53f af20 	bmi.w	8000f30 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fa22 	bl	8000538 <HAL_GetTick>
 80010f4:	1bc0      	subs	r0, r0, r7
 80010f6:	2802      	cmp	r0, #2
 80010f8:	d9f5      	bls.n	80010e6 <HAL_RCC_OscConfig+0x26a>
 80010fa:	e75c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 80010fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001100:	f023 0301 	bic.w	r3, r3, #1
 8001104:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001108:	f7ff fa16 	bl	8000538 <HAL_GetTick>
 800110c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800110e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001112:	079b      	lsls	r3, r3, #30
 8001114:	f57f af0c 	bpl.w	8000f30 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fa0e 	bl	8000538 <HAL_GetTick>
 800111c:	1bc0      	subs	r0, r0, r7
 800111e:	2802      	cmp	r0, #2
 8001120:	d9f5      	bls.n	800110e <HAL_RCC_OscConfig+0x292>
 8001122:	e748      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
 8001124:	40021000 	.word	0x40021000
 8001128:	08002fa5 	.word	0x08002fa5
 800112c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001130:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001132:	00d8      	lsls	r0, r3, #3
 8001134:	d429      	bmi.n	800118a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	65a3      	str	r3, [r4, #88]	; 0x58
 800113e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001148:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114c:	4f5d      	ldr	r7, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x448>)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	05d9      	lsls	r1, r3, #23
 8001152:	d51d      	bpl.n	8001190 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001154:	68ab      	ldr	r3, [r5, #8]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d12b      	bne.n	80011b2 <HAL_RCC_OscConfig+0x336>
 800115a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001166:	f7ff f9e7 	bl	8000538 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800116e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001170:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001174:	079b      	lsls	r3, r3, #30
 8001176:	d542      	bpl.n	80011fe <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8001178:	f1b8 0f00 	cmp.w	r8, #0
 800117c:	f43f aedc 	beq.w	8000f38 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001186:	65a3      	str	r3, [r4, #88]	; 0x58
 8001188:	e6d6      	b.n	8000f38 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 800118a:	f04f 0800 	mov.w	r8, #0
 800118e:	e7dd      	b.n	800114c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001198:	f7ff f9ce 	bl	8000538 <HAL_GetTick>
 800119c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	05da      	lsls	r2, r3, #23
 80011a2:	d4d7      	bmi.n	8001154 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a4:	f7ff f9c8 	bl	8000538 <HAL_GetTick>
 80011a8:	eba0 0009 	sub.w	r0, r0, r9
 80011ac:	2802      	cmp	r0, #2
 80011ae:	d9f6      	bls.n	800119e <HAL_RCC_OscConfig+0x322>
 80011b0:	e701      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x348>
 80011b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80011c2:	e7ca      	b.n	800115a <HAL_RCC_OscConfig+0x2de>
 80011c4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80011d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80011d4:	f022 0204 	bic.w	r2, r2, #4
 80011d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1c2      	bne.n	8001166 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 80011e0:	f7ff f9aa 	bl	8000538 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011e8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80011ee:	0798      	lsls	r0, r3, #30
 80011f0:	d5c2      	bpl.n	8001178 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff f9a1 	bl	8000538 <HAL_GetTick>
 80011f6:	1bc0      	subs	r0, r0, r7
 80011f8:	4548      	cmp	r0, r9
 80011fa:	d9f6      	bls.n	80011ea <HAL_RCC_OscConfig+0x36e>
 80011fc:	e6db      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff f99b 	bl	8000538 <HAL_GetTick>
 8001202:	1bc0      	subs	r0, r0, r7
 8001204:	4548      	cmp	r0, r9
 8001206:	d9b3      	bls.n	8001170 <HAL_RCC_OscConfig+0x2f4>
 8001208:	e6d5      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800120a:	2e0c      	cmp	r6, #12
 800120c:	f43f ae3a 	beq.w	8000e84 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001210:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001218:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800121a:	d137      	bne.n	800128c <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800121c:	f7ff f98c 	bl	8000538 <HAL_GetTick>
 8001220:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	0199      	lsls	r1, r3, #6
 8001226:	d42b      	bmi.n	8001280 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001228:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800122a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800122c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001230:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001232:	3a01      	subs	r2, #1
 8001234:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001238:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800123a:	0912      	lsrs	r2, r2, #4
 800123c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001240:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001242:	0852      	lsrs	r2, r2, #1
 8001244:	3a01      	subs	r2, #1
 8001246:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800124a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800124c:	0852      	lsrs	r2, r2, #1
 800124e:	3a01      	subs	r2, #1
 8001250:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001254:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800125e:	68e3      	ldr	r3, [r4, #12]
 8001260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001264:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001266:	f7ff f967 	bl	8000538 <HAL_GetTick>
 800126a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	019a      	lsls	r2, r3, #6
 8001270:	f53f ae66 	bmi.w	8000f40 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff f960 	bl	8000538 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2802      	cmp	r0, #2
 800127c:	d9f6      	bls.n	800126c <HAL_RCC_OscConfig+0x3f0>
 800127e:	e69a      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff f95a 	bl	8000538 <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	2802      	cmp	r0, #2
 8001288:	d9cb      	bls.n	8001222 <HAL_RCC_OscConfig+0x3a6>
 800128a:	e694      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001292:	bf02      	ittt	eq
 8001294:	68e3      	ldreq	r3, [r4, #12]
 8001296:	f023 0303 	biceq.w	r3, r3, #3
 800129a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800129c:	68e3      	ldr	r3, [r4, #12]
 800129e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80012a8:	f7ff f946 	bl	8000538 <HAL_GetTick>
 80012ac:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	f57f ae45 	bpl.w	8000f40 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff f93f 	bl	8000538 <HAL_GetTick>
 80012ba:	1b40      	subs	r0, r0, r5
 80012bc:	2802      	cmp	r0, #2
 80012be:	d9f6      	bls.n	80012ae <HAL_RCC_OscConfig+0x432>
 80012c0:	e679      	b.n	8000fb6 <HAL_RCC_OscConfig+0x13a>
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_RCC_ClockConfig>:
{
 80012c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012cc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80012ce:	4604      	mov	r4, r0
 80012d0:	b910      	cbnz	r0, 80012d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4a40      	ldr	r2, [pc, #256]	; (80013dc <HAL_RCC_ClockConfig+0x114>)
 80012da:	6813      	ldr	r3, [r2, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d329      	bcc.n	8001338 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	07d9      	lsls	r1, r3, #31
 80012e8:	d431      	bmi.n	800134e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ea:	6821      	ldr	r1, [r4, #0]
 80012ec:	078a      	lsls	r2, r1, #30
 80012ee:	d45b      	bmi.n	80013a8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f0:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <HAL_RCC_ClockConfig+0x114>)
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	429e      	cmp	r6, r3
 80012fa:	d35d      	bcc.n	80013b8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	f011 0f04 	tst.w	r1, #4
 8001300:	4d37      	ldr	r5, [pc, #220]	; (80013e0 <HAL_RCC_ClockConfig+0x118>)
 8001302:	d164      	bne.n	80013ce <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001304:	070b      	lsls	r3, r1, #28
 8001306:	d506      	bpl.n	8001316 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001308:	68ab      	ldr	r3, [r5, #8]
 800130a:	6922      	ldr	r2, [r4, #16]
 800130c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001310:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001314:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001316:	f7ff fd5d 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 800131a:	68ab      	ldr	r3, [r5, #8]
 800131c:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <HAL_RCC_ClockConfig+0x11c>)
 800131e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	40d8      	lsrs	r0, r3
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_RCC_ClockConfig+0x120>)
 8001330:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff b8d0 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	430b      	orrs	r3, r1
 8001340:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	4299      	cmp	r1, r3
 800134a:	d1c2      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xa>
 800134c:	e7ca      	b.n	80012e4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	6862      	ldr	r2, [r4, #4]
 8001350:	4d23      	ldr	r5, [pc, #140]	; (80013e0 <HAL_RCC_ClockConfig+0x118>)
 8001352:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001354:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001356:	d11b      	bne.n	8001390 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001358:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800135c:	d0b9      	beq.n	80012d2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800135e:	68ab      	ldr	r3, [r5, #8]
 8001360:	f023 0303 	bic.w	r3, r3, #3
 8001364:	4313      	orrs	r3, r2
 8001366:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001368:	f7ff f8e6 	bl	8000538 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001370:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	68ab      	ldr	r3, [r5, #8]
 8001374:	6862      	ldr	r2, [r4, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800137e:	d0b4      	beq.n	80012ea <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001380:	f7ff f8da 	bl	8000538 <HAL_GetTick>
 8001384:	1bc0      	subs	r0, r0, r7
 8001386:	4540      	cmp	r0, r8
 8001388:	d9f3      	bls.n	8001372 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 800138a:	2003      	movs	r0, #3
}
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001390:	2a02      	cmp	r2, #2
 8001392:	d102      	bne.n	800139a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001394:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001398:	e7e0      	b.n	800135c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800139a:	b912      	cbnz	r2, 80013a2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	e7dc      	b.n	800135c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80013a6:	e7d9      	b.n	800135c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_RCC_ClockConfig+0x118>)
 80013aa:	68a0      	ldr	r0, [r4, #8]
 80013ac:	6893      	ldr	r3, [r2, #8]
 80013ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013b2:	4303      	orrs	r3, r0
 80013b4:	6093      	str	r3, [r2, #8]
 80013b6:	e79b      	b.n	80012f0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	4333      	orrs	r3, r6
 80013c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	429e      	cmp	r6, r3
 80013ca:	d182      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xa>
 80013cc:	e796      	b.n	80012fc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ce:	68ab      	ldr	r3, [r5, #8]
 80013d0:	68e2      	ldr	r2, [r4, #12]
 80013d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60ab      	str	r3, [r5, #8]
 80013da:	e793      	b.n	8001304 <HAL_RCC_ClockConfig+0x3c>
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08002fa5 	.word	0x08002fa5
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013fa:	6810      	ldr	r0, [r2, #0]
 80013fc:	f003 031f 	and.w	r3, r3, #31
}
 8001400:	40d8      	lsrs	r0, r3
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	08002fb5 	.word	0x08002fb5
 800140c:	20000000 	.word	0x20000000

08001410 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	f003 031f 	and.w	r3, r3, #31
}
 8001424:	40d8      	lsrs	r0, r3
 8001426:	4770      	bx	lr
 8001428:	40021000 	.word	0x40021000
 800142c:	08002fb5 	.word	0x08002fb5
 8001430:	20000000 	.word	0x20000000

08001434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <RCCEx_PLLSAI1_Config+0x118>)
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	f012 0f03 	tst.w	r2, #3
{
 800143e:	4605      	mov	r5, r0
 8001440:	460e      	mov	r6, r1
 8001442:	461c      	mov	r4, r3
 8001444:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001446:	d02a      	beq.n	800149e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	4282      	cmp	r2, r0
 8001450:	d13c      	bne.n	80014cc <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001452:	2a00      	cmp	r2, #0
 8001454:	d03a      	beq.n	80014cc <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001456:	68db      	ldr	r3, [r3, #12]
       ||
 8001458:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800145a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800145e:	3301      	adds	r3, #1
       ||
 8001460:	4293      	cmp	r3, r2
 8001462:	d133      	bne.n	80014cc <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800146a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800146c:	f7ff f864 	bl	8000538 <HAL_GetTick>
 8001470:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	011a      	lsls	r2, r3, #4
 8001476:	d432      	bmi.n	80014de <RCCEx_PLLSAI1_Config+0xaa>
 8001478:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800147a:	2e00      	cmp	r6, #0
 800147c:	d036      	beq.n	80014ec <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800147e:	2e01      	cmp	r6, #1
 8001480:	d150      	bne.n	8001524 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001482:	6922      	ldr	r2, [r4, #16]
 8001484:	6928      	ldr	r0, [r5, #16]
 8001486:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800148a:	0840      	lsrs	r0, r0, #1
 800148c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001490:	3801      	subs	r0, #1
 8001492:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001496:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800149a:	6122      	str	r2, [r4, #16]
 800149c:	e032      	b.n	8001504 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800149e:	2802      	cmp	r0, #2
 80014a0:	d010      	beq.n	80014c4 <RCCEx_PLLSAI1_Config+0x90>
 80014a2:	2803      	cmp	r0, #3
 80014a4:	d014      	beq.n	80014d0 <RCCEx_PLLSAI1_Config+0x9c>
 80014a6:	2801      	cmp	r0, #1
 80014a8:	d110      	bne.n	80014cc <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	079f      	lsls	r7, r3, #30
 80014ae:	d538      	bpl.n	8001522 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80014b0:	68e3      	ldr	r3, [r4, #12]
 80014b2:	686a      	ldr	r2, [r5, #4]
 80014b4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80014b8:	3a01      	subs	r2, #1
 80014ba:	4318      	orrs	r0, r3
 80014bc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80014c0:	60e0      	str	r0, [r4, #12]
 80014c2:	e7cf      	b.n	8001464 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80014ca:	d1f1      	bne.n	80014b0 <RCCEx_PLLSAI1_Config+0x7c>
 80014cc:	2001      	movs	r0, #1
 80014ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	0391      	lsls	r1, r2, #14
 80014d4:	d4ec      	bmi.n	80014b0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80014dc:	e7f5      	b.n	80014ca <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80014de:	f7ff f82b 	bl	8000538 <HAL_GetTick>
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9c4      	bls.n	8001472 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80014e8:	2003      	movs	r0, #3
 80014ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80014ec:	6921      	ldr	r1, [r4, #16]
 80014ee:	68eb      	ldr	r3, [r5, #12]
 80014f0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80014f4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80014f8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001502:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800150a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff f814 	bl	8000538 <HAL_GetTick>
 8001510:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	d513      	bpl.n	8001540 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001518:	6923      	ldr	r3, [r4, #16]
 800151a:	69aa      	ldr	r2, [r5, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	6123      	str	r3, [r4, #16]
 8001520:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001524:	6923      	ldr	r3, [r4, #16]
 8001526:	6968      	ldr	r0, [r5, #20]
 8001528:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800152c:	0840      	lsrs	r0, r0, #1
 800152e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001532:	3801      	subs	r0, #1
 8001534:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001538:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800153c:	6123      	str	r3, [r4, #16]
 800153e:	e7e1      	b.n	8001504 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001540:	f7fe fffa 	bl	8000538 <HAL_GetTick>
 8001544:	1b80      	subs	r0, r0, r6
 8001546:	2802      	cmp	r0, #2
 8001548:	d9e3      	bls.n	8001512 <RCCEx_PLLSAI1_Config+0xde>
 800154a:	e7cd      	b.n	80014e8 <RCCEx_PLLSAI1_Config+0xb4>
 800154c:	40021000 	.word	0x40021000

08001550 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <RCCEx_PLLSAI2_Config+0xf8>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	f012 0f03 	tst.w	r2, #3
{
 800155a:	4605      	mov	r5, r0
 800155c:	460e      	mov	r6, r1
 800155e:	461c      	mov	r4, r3
 8001560:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001562:	d028      	beq.n	80015b6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	4282      	cmp	r2, r0
 800156c:	d13a      	bne.n	80015e4 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800156e:	2a00      	cmp	r2, #0
 8001570:	d038      	beq.n	80015e4 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001572:	68db      	ldr	r3, [r3, #12]
       ||
 8001574:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001576:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800157a:	3301      	adds	r3, #1
       ||
 800157c:	4293      	cmp	r3, r2
 800157e:	d131      	bne.n	80015e4 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001586:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001588:	f7fe ffd6 	bl	8000538 <HAL_GetTick>
 800158c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	009a      	lsls	r2, r3, #2
 8001592:	d430      	bmi.n	80015f6 <RCCEx_PLLSAI2_Config+0xa6>
 8001594:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001596:	2e00      	cmp	r6, #0
 8001598:	d034      	beq.n	8001604 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800159a:	6963      	ldr	r3, [r4, #20]
 800159c:	6929      	ldr	r1, [r5, #16]
 800159e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80015a2:	0849      	lsrs	r1, r1, #1
 80015a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80015a8:	3901      	subs	r1, #1
 80015aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80015ae:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80015b2:	6163      	str	r3, [r4, #20]
 80015b4:	e032      	b.n	800161c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80015b6:	2802      	cmp	r0, #2
 80015b8:	d010      	beq.n	80015dc <RCCEx_PLLSAI2_Config+0x8c>
 80015ba:	2803      	cmp	r0, #3
 80015bc:	d014      	beq.n	80015e8 <RCCEx_PLLSAI2_Config+0x98>
 80015be:	2801      	cmp	r0, #1
 80015c0:	d110      	bne.n	80015e4 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	079f      	lsls	r7, r3, #30
 80015c6:	d538      	bpl.n	800163a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80015c8:	68e3      	ldr	r3, [r4, #12]
 80015ca:	686a      	ldr	r2, [r5, #4]
 80015cc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80015d0:	3a01      	subs	r2, #1
 80015d2:	4318      	orrs	r0, r3
 80015d4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80015d8:	60e0      	str	r0, [r4, #12]
 80015da:	e7d1      	b.n	8001580 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015e2:	d1f1      	bne.n	80015c8 <RCCEx_PLLSAI2_Config+0x78>
 80015e4:	2001      	movs	r0, #1
 80015e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	0391      	lsls	r1, r2, #14
 80015ec:	d4ec      	bmi.n	80015c8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80015f4:	e7f5      	b.n	80015e2 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80015f6:	f7fe ff9f 	bl	8000538 <HAL_GetTick>
 80015fa:	1bc0      	subs	r0, r0, r7
 80015fc:	2802      	cmp	r0, #2
 80015fe:	d9c6      	bls.n	800158e <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001604:	6962      	ldr	r2, [r4, #20]
 8001606:	68eb      	ldr	r3, [r5, #12]
 8001608:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800160c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001610:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800161a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7fe ff88 	bl	8000538 <HAL_GetTick>
 8001628:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	d505      	bpl.n	800163c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001630:	6963      	ldr	r3, [r4, #20]
 8001632:	696a      	ldr	r2, [r5, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	6163      	str	r3, [r4, #20]
 8001638:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800163c:	f7fe ff7c 	bl	8000538 <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f1      	bls.n	800162a <RCCEx_PLLSAI2_Config+0xda>
 8001646:	e7db      	b.n	8001600 <RCCEx_PLLSAI2_Config+0xb0>
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_RCCEx_PeriphCLKConfig>:
{
 800164c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001650:	6806      	ldr	r6, [r0, #0]
 8001652:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001656:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001658:	d024      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800165a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800165c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001660:	d02c      	beq.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001662:	d802      	bhi.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001664:	b1c1      	cbz	r1, 8001698 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001666:	2601      	movs	r6, #1
 8001668:	e01c      	b.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800166a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800166e:	d00d      	beq.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001670:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001674:	d1f7      	bne.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001676:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001678:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800167a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800167e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001682:	430b      	orrs	r3, r1
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001688:	2600      	movs	r6, #0
 800168a:	e00b      	b.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800168c:	4a47      	ldr	r2, [pc, #284]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800168e:	68d3      	ldr	r3, [r2, #12]
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	60d3      	str	r3, [r2, #12]
      break;
 8001696:	e7ee      	b.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001698:	3004      	adds	r0, #4
 800169a:	f7ff fecb 	bl	8001434 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800169e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d0e8      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	04d8      	lsls	r0, r3, #19
 80016a8:	d506      	bpl.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80016aa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80016ac:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80016b0:	d074      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x150>
 80016b2:	d808      	bhi.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80016b4:	b1a9      	cbz	r1, 80016e2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80016b6:	2601      	movs	r6, #1
 80016b8:	4635      	mov	r5, r6
 80016ba:	e021      	b.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80016bc:	2100      	movs	r1, #0
 80016be:	3020      	adds	r0, #32
 80016c0:	f7ff ff46 	bl	8001550 <RCCEx_PLLSAI2_Config>
 80016c4:	e7eb      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80016c6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80016ca:	d004      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80016cc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80016d0:	d1f1      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80016d2:	4635      	mov	r5, r6
 80016d4:	e009      	b.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80016d6:	4a35      	ldr	r2, [pc, #212]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d8:	68d3      	ldr	r3, [r2, #12]
 80016da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016de:	60d3      	str	r3, [r2, #12]
 80016e0:	e7f7      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016e2:	1d20      	adds	r0, r4, #4
 80016e4:	f7ff fea6 	bl	8001434 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80016e8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80016ea:	2d00      	cmp	r5, #0
 80016ec:	d15c      	bne.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016ee:	4a2f      	ldr	r2, [pc, #188]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016f0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80016f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016f6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80016fa:	430b      	orrs	r3, r1
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	0399      	lsls	r1, r3, #14
 8001704:	f140 814f 	bpl.w	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001708:	4f28      	ldr	r7, [pc, #160]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800170c:	00da      	lsls	r2, r3, #3
 800170e:	f140 8176 	bpl.w	80019fe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001712:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001716:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80017b0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800171a:	f8d9 3000 	ldr.w	r3, [r9]
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001726:	f7fe ff07 	bl	8000538 <HAL_GetTick>
 800172a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800172c:	f8d9 3000 	ldr.w	r3, [r9]
 8001730:	05db      	lsls	r3, r3, #23
 8001732:	d53f      	bpl.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001734:	2d00      	cmp	r5, #0
 8001736:	d144      	bne.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800173c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001740:	d015      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001742:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001746:	4293      	cmp	r3, r2
 8001748:	d011      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800174a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800174e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001752:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001756:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800175a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800175e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800176a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800176e:	07d8      	lsls	r0, r3, #31
 8001770:	d509      	bpl.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001772:	f7fe fee1 	bl	8000538 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800177a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001780:	0799      	lsls	r1, r3, #30
 8001782:	f140 8109 	bpl.w	8001998 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800178a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800178e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001792:	4313      	orrs	r3, r2
 8001794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001798:	4635      	mov	r5, r6
 800179a:	e012      	b.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800179c:	2100      	movs	r1, #0
 800179e:	f104 0020 	add.w	r0, r4, #32
 80017a2:	f7ff fed5 	bl	8001550 <RCCEx_PLLSAI2_Config>
 80017a6:	e79f      	b.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80017a8:	462e      	mov	r6, r5
 80017aa:	e7a9      	b.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7fe fec0 	bl	8000538 <HAL_GetTick>
 80017b8:	eba0 000a 	sub.w	r0, r0, sl
 80017bc:	2802      	cmp	r0, #2
 80017be:	d9b5      	bls.n	800172c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80017c0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80017c2:	f1b8 0f00 	cmp.w	r8, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	07da      	lsls	r2, r3, #31
 80017d4:	d508      	bpl.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017d6:	4990      	ldr	r1, [pc, #576]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80017d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017de:	f022 0203 	bic.w	r2, r2, #3
 80017e2:	4302      	orrs	r2, r0
 80017e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017e8:	079f      	lsls	r7, r3, #30
 80017ea:	d508      	bpl.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017ec:	498a      	ldr	r1, [pc, #552]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80017ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017f4:	f022 020c 	bic.w	r2, r2, #12
 80017f8:	4302      	orrs	r2, r0
 80017fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017fe:	075e      	lsls	r6, r3, #29
 8001800:	d508      	bpl.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001802:	4985      	ldr	r1, [pc, #532]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001804:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001806:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800180a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800180e:	4302      	orrs	r2, r0
 8001810:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001814:	0718      	lsls	r0, r3, #28
 8001816:	d508      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001818:	497f      	ldr	r1, [pc, #508]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800181a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800181c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001820:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001824:	4302      	orrs	r2, r0
 8001826:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800182a:	06d9      	lsls	r1, r3, #27
 800182c:	d508      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800182e:	497a      	ldr	r1, [pc, #488]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001830:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001832:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800183a:	4302      	orrs	r2, r0
 800183c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001840:	069a      	lsls	r2, r3, #26
 8001842:	d508      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001844:	4974      	ldr	r1, [pc, #464]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001846:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800184c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001850:	4302      	orrs	r2, r0
 8001852:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001856:	059f      	lsls	r7, r3, #22
 8001858:	d508      	bpl.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800185a:	496f      	ldr	r1, [pc, #444]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800185c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800185e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001862:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001866:	4302      	orrs	r2, r0
 8001868:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800186c:	055e      	lsls	r6, r3, #21
 800186e:	d508      	bpl.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001870:	4969      	ldr	r1, [pc, #420]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001872:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001874:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001878:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800187c:	4302      	orrs	r2, r0
 800187e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001882:	0658      	lsls	r0, r3, #25
 8001884:	d508      	bpl.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001886:	4964      	ldr	r1, [pc, #400]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001888:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800188a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800188e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001892:	4302      	orrs	r2, r0
 8001894:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001898:	0619      	lsls	r1, r3, #24
 800189a:	d508      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800189c:	495e      	ldr	r1, [pc, #376]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800189e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80018a8:	4302      	orrs	r2, r0
 80018aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ae:	05da      	lsls	r2, r3, #23
 80018b0:	d508      	bpl.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018b2:	4959      	ldr	r1, [pc, #356]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018ba:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80018be:	4302      	orrs	r2, r0
 80018c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	d50f      	bpl.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018c8:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018ca:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80018cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018d4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018de:	d164      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018e0:	68d3      	ldr	r3, [r2, #12]
 80018e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018e6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	031f      	lsls	r7, r3, #12
 80018ec:	d50f      	bpl.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018ee:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80018f0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80018f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018fa:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80018fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001904:	d15c      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001906:	68d3      	ldr	r3, [r2, #12]
 8001908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	035e      	lsls	r6, r3, #13
 8001912:	d50f      	bpl.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001914:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001916:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001918:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800191c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001920:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001922:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800192a:	d154      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800192c:	68d3      	ldr	r3, [r2, #12]
 800192e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001932:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	0458      	lsls	r0, r3, #17
 8001938:	d512      	bpl.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800193a:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800193c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800193e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001942:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001946:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001948:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800194c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001950:	d14c      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001952:	2102      	movs	r1, #2
 8001954:	1d20      	adds	r0, r4, #4
 8001956:	f7ff fd6d 	bl	8001434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800195a:	2800      	cmp	r0, #0
 800195c:	bf18      	it	ne
 800195e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	0411      	lsls	r1, r2, #16
 8001964:	d508      	bpl.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001966:	492c      	ldr	r1, [pc, #176]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001968:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800196a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800196e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001972:	4303      	orrs	r3, r0
 8001974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001978:	03d3      	lsls	r3, r2, #15
 800197a:	d509      	bpl.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800197e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800198a:	430b      	orrs	r3, r1
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001990:	4628      	mov	r0, r5
 8001992:	b002      	add	sp, #8
 8001994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001998:	f7fe fdce 	bl	8000538 <HAL_GetTick>
 800199c:	1b40      	subs	r0, r0, r5
 800199e:	4548      	cmp	r0, r9
 80019a0:	f67f aeec 	bls.w	800177c <HAL_RCCEx_PeriphCLKConfig+0x130>
 80019a4:	e70c      	b.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80019a6:	4635      	mov	r5, r6
 80019a8:	e712      	b.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80019aa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019ae:	d19b      	bne.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019b0:	2101      	movs	r1, #1
 80019b2:	1d20      	adds	r0, r4, #4
 80019b4:	f7ff fd3e 	bl	8001434 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80019b8:	2800      	cmp	r0, #0
 80019ba:	bf18      	it	ne
 80019bc:	4605      	movne	r5, r0
 80019be:	e793      	b.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80019c0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019c4:	d1a3      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019c6:	2101      	movs	r1, #1
 80019c8:	1d20      	adds	r0, r4, #4
 80019ca:	f7ff fd33 	bl	8001434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80019ce:	2800      	cmp	r0, #0
 80019d0:	bf18      	it	ne
 80019d2:	4605      	movne	r5, r0
 80019d4:	e79b      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80019d6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80019da:	d1ab      	bne.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80019dc:	2101      	movs	r1, #1
 80019de:	1d20      	adds	r0, r4, #4
 80019e0:	f7ff fd28 	bl	8001434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80019e4:	2800      	cmp	r0, #0
 80019e6:	bf18      	it	ne
 80019e8:	4605      	movne	r5, r0
 80019ea:	e7a3      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80019ec:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80019f0:	d1b6      	bne.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80019f2:	2102      	movs	r1, #2
 80019f4:	f104 0020 	add.w	r0, r4, #32
 80019f8:	f7ff fdaa 	bl	8001550 <RCCEx_PLLSAI2_Config>
 80019fc:	e7ad      	b.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a10:	f04f 0801 	mov.w	r8, #1
 8001a14:	e67f      	b.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001a1c:	4a02      	ldr	r2, [pc, #8]	; (8001a28 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000

08001a2c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a2c:	6803      	ldr	r3, [r0, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a36:	6842      	ldr	r2, [r0, #4]
 8001a38:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001a3c:	d10a      	bne.n	8001a54 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001a3e:	6882      	ldr	r2, [r0, #8]
 8001a40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a44:	d002      	beq.n	8001a4c <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a4a:	d103      	bne.n	8001a54 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001a56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a5a:	d107      	bne.n	8001a6c <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a72:	2300      	movs	r3, #0
 8001a74:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001a78:	2003      	movs	r0, #3
 8001a7a:	4770      	bx	lr

08001a7c <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4604      	mov	r4, r0
 8001a80:	460d      	mov	r5, r1
 8001a82:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a8c:	d100      	bne.n	8001a90 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a90:	1c6a      	adds	r2, r5, #1
 8001a92:	d0f8      	beq.n	8001a86 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a94:	f7fe fd50 	bl	8000538 <HAL_GetTick>
 8001a98:	1b80      	subs	r0, r0, r6
 8001a9a:	4285      	cmp	r5, r0
 8001a9c:	d8f2      	bhi.n	8001a84 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001a9e:	4620      	mov	r0, r4
}
 8001aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001aa4:	f7ff bfc2 	b.w	8001a2c <SPI_WaitFifoStateUntilTimeout.part.1>

08001aa8 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	4605      	mov	r5, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	4616      	mov	r6, r2
 8001ab0:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001ab2:	6829      	ldr	r1, [r5, #0]
 8001ab4:	6888      	ldr	r0, [r1, #8]
 8001ab6:	4020      	ands	r0, r4
 8001ab8:	d100      	bne.n	8001abc <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001abc:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001ac0:	bf08      	it	eq
 8001ac2:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001ac4:	1c73      	adds	r3, r6, #1
 8001ac6:	d0f5      	beq.n	8001ab4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ac8:	f7fe fd36 	bl	8000538 <HAL_GetTick>
 8001acc:	1bc0      	subs	r0, r0, r7
 8001ace:	4286      	cmp	r6, r0
 8001ad0:	d8ef      	bhi.n	8001ab2 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001ad2:	4628      	mov	r0, r5
}
 8001ad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ad8:	f7ff bfa8 	b.w	8001a2c <SPI_WaitFifoStateUntilTimeout.part.1>

08001adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ade:	4613      	mov	r3, r2
{
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001aea:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001aec:	f7ff ffdc 	bl	8001aa8 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001af0:	b128      	cbz	r0, 8001afe <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001af2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001af4:	f043 0320 	orr.w	r3, r3, #32
 8001af8:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	e00f      	b.n	8001b1e <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001afe:	4632      	mov	r2, r6
 8001b00:	4629      	mov	r1, r5
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ffba 	bl	8001a7c <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d1f2      	bne.n	8001af2 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001b0c:	4633      	mov	r3, r6
 8001b0e:	462a      	mov	r2, r5
 8001b10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ffc7 	bl	8001aa8 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1e9      	bne.n	8001af2 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}

08001b20 <HAL_SPI_Init>:
{
 8001b20:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001b22:	4604      	mov	r4, r0
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d04a      	beq.n	8001bbe <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001b30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b34:	b91b      	cbnz	r3, 8001b3e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001b36:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001b3a:	f001 f86f 	bl	8002c1c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b3e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001b40:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b42:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001b46:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b48:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b4e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b58:	d92e      	bls.n	8001bb8 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b5a:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b5c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b60:	bf18      	it	ne
 8001b62:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b66:	b92b      	cbnz	r3, 8001b74 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b68:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001b6c:	bf8c      	ite	hi
 8001b6e:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001b70:	2301      	movls	r3, #1
 8001b72:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b74:	68a6      	ldr	r6, [r4, #8]
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	69a5      	ldr	r5, [r4, #24]
 8001b7a:	4333      	orrs	r3, r6
 8001b7c:	6926      	ldr	r6, [r4, #16]
 8001b7e:	4333      	orrs	r3, r6
 8001b80:	6966      	ldr	r6, [r4, #20]
 8001b82:	4333      	orrs	r3, r6
 8001b84:	69e6      	ldr	r6, [r4, #28]
 8001b86:	4333      	orrs	r3, r6
 8001b88:	6a26      	ldr	r6, [r4, #32]
 8001b8a:	4333      	orrs	r3, r6
 8001b8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b8e:	4333      	orrs	r3, r6
 8001b90:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8001b94:	4333      	orrs	r3, r6
 8001b96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b9e:	0c2d      	lsrs	r5, r5, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	f005 0504 	and.w	r5, r5, #4
 8001ba6:	432a      	orrs	r2, r5
 8001ba8:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8001baa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bac:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001bae:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bb0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bb2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bbc:	e7d0      	b.n	8001b60 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
}
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}

08001bc2 <HAL_SPI_Transmit>:
{
 8001bc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001bc6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001bc8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001bcc:	2b01      	cmp	r3, #1
{
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001bd4:	f000 80b1 	beq.w	8001d3a <HAL_SPI_Transmit+0x178>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001bde:	f7fe fcab 	bl	8000538 <HAL_GetTick>
 8001be2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001be4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001be8:	b2c0      	uxtb	r0, r0
 8001bea:	2801      	cmp	r0, #1
 8001bec:	f040 80a3 	bne.w	8001d36 <HAL_SPI_Transmit+0x174>
  if ((pData == NULL) || (Size == 0U))
 8001bf0:	2d00      	cmp	r5, #0
 8001bf2:	d05f      	beq.n	8001cb4 <HAL_SPI_Transmit+0xf2>
 8001bf4:	f1b8 0f00 	cmp.w	r8, #0
 8001bf8:	d05c      	beq.n	8001cb4 <HAL_SPI_Transmit+0xf2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c00:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c02:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c04:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c06:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001c08:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001c0c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001c10:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001c14:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c16:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001c18:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c1a:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001c20:	bf08      	it	eq
 8001c22:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8001c24:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 8001c28:	bf04      	itt	eq
 8001c2a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001c2e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c30:	6803      	ldr	r3, [r0, #0]
 8001c32:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001c34:	bf5e      	ittt	pl
 8001c36:	6803      	ldrpl	r3, [r0, #0]
 8001c38:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001c3c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c3e:	68e3      	ldr	r3, [r4, #12]
 8001c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c44:	6863      	ldr	r3, [r4, #4]
 8001c46:	d93e      	bls.n	8001cc6 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c48:	b113      	cbz	r3, 8001c50 <HAL_SPI_Transmit+0x8e>
 8001c4a:	f1b8 0f01 	cmp.w	r8, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c50:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001c54:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c56:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001c58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001c60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b9a3      	cbnz	r3, 8001c90 <HAL_SPI_Transmit+0xce>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c66:	463a      	mov	r2, r7
 8001c68:	4631      	mov	r1, r6
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff ff36 	bl	8001adc <SPI_EndRxTxTransaction>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d15d      	bne.n	8001d30 <HAL_SPI_Transmit+0x16e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c74:	68a3      	ldr	r3, [r4, #8]
 8001c76:	b933      	cbnz	r3, 8001c86 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	9201      	str	r2, [sp, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c86:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001c88:	3000      	adds	r0, #0
 8001c8a:	bf18      	it	ne
 8001c8c:	2001      	movne	r0, #1
 8001c8e:	e011      	b.n	8001cb4 <HAL_SPI_Transmit+0xf2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c90:	6822      	ldr	r2, [r4, #0]
 8001c92:	6893      	ldr	r3, [r2, #8]
 8001c94:	0798      	lsls	r0, r3, #30
 8001c96:	d505      	bpl.n	8001ca4 <HAL_SPI_Transmit+0xe2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001c9e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ca2:	e7d9      	b.n	8001c58 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ca4:	f7fe fc48 	bl	8000538 <HAL_GetTick>
 8001ca8:	1bc0      	subs	r0, r0, r7
 8001caa:	42b0      	cmp	r0, r6
 8001cac:	d3d8      	bcc.n	8001c60 <HAL_SPI_Transmit+0x9e>
 8001cae:	1c71      	adds	r1, r6, #1
 8001cb0:	d0d6      	beq.n	8001c60 <HAL_SPI_Transmit+0x9e>
          errorcode = HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001cc0:	b002      	add	sp, #8
 8001cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cc6:	b113      	cbz	r3, 8001cce <HAL_SPI_Transmit+0x10c>
 8001cc8:	f1b8 0f01 	cmp.w	r8, #1
 8001ccc:	d113      	bne.n	8001cf6 <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 8001cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d906      	bls.n	8001ce4 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cd6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001cda:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cdc:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001cde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ce0:	3b02      	subs	r3, #2
 8001ce2:	e006      	b.n	8001cf2 <HAL_SPI_Transmit+0x130>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ce4:	782b      	ldrb	r3, [r5, #0]
 8001ce6:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr ++;
 8001ce8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cea:	3301      	adds	r3, #1
 8001cec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001cee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001cf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0b3      	beq.n	8001c66 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	0792      	lsls	r2, r2, #30
 8001d04:	d50c      	bpl.n	8001d20 <HAL_SPI_Transmit+0x15e>
        if (hspi->TxXferCount > 1U)
 8001d06:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	2a01      	cmp	r2, #1
 8001d0e:	d904      	bls.n	8001d1a <HAL_SPI_Transmit+0x158>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d10:	f830 2b02 	ldrh.w	r2, [r0], #2
 8001d14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d16:	63a0      	str	r0, [r4, #56]	; 0x38
 8001d18:	e7e1      	b.n	8001cde <HAL_SPI_Transmit+0x11c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d1a:	7802      	ldrb	r2, [r0, #0]
 8001d1c:	731a      	strb	r2, [r3, #12]
 8001d1e:	e7e3      	b.n	8001ce8 <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d20:	f7fe fc0a 	bl	8000538 <HAL_GetTick>
 8001d24:	1bc0      	subs	r0, r0, r7
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d8e5      	bhi.n	8001cf6 <HAL_SPI_Transmit+0x134>
 8001d2a:	1c73      	adds	r3, r6, #1
 8001d2c:	d0e3      	beq.n	8001cf6 <HAL_SPI_Transmit+0x134>
 8001d2e:	e7c0      	b.n	8001cb2 <HAL_SPI_Transmit+0xf0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d30:	2320      	movs	r3, #32
 8001d32:	6623      	str	r3, [r4, #96]	; 0x60
 8001d34:	e79e      	b.n	8001c74 <HAL_SPI_Transmit+0xb2>
    errorcode = HAL_BUSY;
 8001d36:	2002      	movs	r0, #2
 8001d38:	e7bc      	b.n	8001cb4 <HAL_SPI_Transmit+0xf2>
  __HAL_LOCK(hspi);
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	e7c0      	b.n	8001cc0 <HAL_SPI_Transmit+0xfe>
	...

08001d40 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d40:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d42:	69c1      	ldr	r1, [r0, #28]
{
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d48:	6883      	ldr	r3, [r0, #8]
 8001d4a:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d4c:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d4e:	4303      	orrs	r3, r0
 8001d50:	6960      	ldr	r0, [r4, #20]
 8001d52:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d54:	48ba      	ldr	r0, [pc, #744]	; (8002040 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d56:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d58:	4028      	ands	r0, r5
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d5e:	6853      	ldr	r3, [r2, #4]
 8001d60:	68e0      	ldr	r0, [r4, #12]
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	4303      	orrs	r3, r0
 8001d68:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d6a:	4bb6      	ldr	r3, [pc, #728]	; (8002044 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d6c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d6e:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d70:	bf1c      	itt	ne
 8001d72:	6a23      	ldrne	r3, [r4, #32]
 8001d74:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d76:	6893      	ldr	r3, [r2, #8]
 8001d78:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d80:	4bb1      	ldr	r3, [pc, #708]	; (8002048 <UART_SetConfig+0x308>)
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d119      	bne.n	8001dba <UART_SetConfig+0x7a>
 8001d86:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001d8a:	4ab0      	ldr	r2, [pc, #704]	; (800204c <UART_SetConfig+0x30c>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d90:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	f040 8138 	bne.w	800200e <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	f200 808f 	bhi.w	8001ec2 <UART_SetConfig+0x182>
 8001da4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001da8:	00ca011a 	.word	0x00ca011a
 8001dac:	008d00f9 	.word	0x008d00f9
 8001db0:	008d0114 	.word	0x008d0114
 8001db4:	008d008d 	.word	0x008d008d
 8001db8:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001dba:	4ba5      	ldr	r3, [pc, #660]	; (8002050 <UART_SetConfig+0x310>)
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d107      	bne.n	8001dd0 <UART_SetConfig+0x90>
 8001dc0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001dc4:	4aa3      	ldr	r2, [pc, #652]	; (8002054 <UART_SetConfig+0x314>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	e7e1      	b.n	8001d94 <UART_SetConfig+0x54>
 8001dd0:	4ba1      	ldr	r3, [pc, #644]	; (8002058 <UART_SetConfig+0x318>)
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d123      	bne.n	8001e1e <UART_SetConfig+0xde>
 8001dd6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	f000 80f1 	beq.w	8001fca <UART_SetConfig+0x28a>
 8001de8:	d80b      	bhi.n	8001e02 <UART_SetConfig+0xc2>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80f3 	beq.w	8001fd6 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001df0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001df4:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001df8:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dfc:	f000 80f8 	beq.w	8001ff0 <UART_SetConfig+0x2b0>
 8001e00:	e0a8      	b.n	8001f54 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	f000 80c6 	beq.w	8001f94 <UART_SetConfig+0x254>
 8001e08:	2b30      	cmp	r3, #48	; 0x30
 8001e0a:	d1f1      	bne.n	8001df0 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e0c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e10:	f040 80b8 	bne.w	8001f84 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e14:	6860      	ldr	r0, [r4, #4]
 8001e16:	0843      	lsrs	r3, r0, #1
 8001e18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e1c:	e0c3      	b.n	8001fa6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e1e:	4b8f      	ldr	r3, [pc, #572]	; (800205c <UART_SetConfig+0x31c>)
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d11e      	bne.n	8001e62 <UART_SetConfig+0x122>
 8001e24:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e30:	2b40      	cmp	r3, #64	; 0x40
 8001e32:	f000 80bb 	beq.w	8001fac <UART_SetConfig+0x26c>
 8001e36:	d80a      	bhi.n	8001e4e <UART_SetConfig+0x10e>
 8001e38:	b97b      	cbnz	r3, 8001e5a <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e3a:	4b82      	ldr	r3, [pc, #520]	; (8002044 <UART_SetConfig+0x304>)
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 80ca 	bne.w	8001fd6 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001e42:	f7ff fad3 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
        break;
 8001e46:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8001e48:	bbb0      	cbnz	r0, 8001eb8 <UART_SetConfig+0x178>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	e03a      	b.n	8001ec4 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e4e:	2b80      	cmp	r3, #128	; 0x80
 8001e50:	f000 809d 	beq.w	8001f8e <UART_SetConfig+0x24e>
 8001e54:	2bc0      	cmp	r3, #192	; 0xc0
 8001e56:	f000 80b0 	beq.w	8001fba <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <UART_SetConfig+0x304>)
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1c7      	bne.n	8001df0 <UART_SetConfig+0xb0>
 8001e60:	e02f      	b.n	8001ec2 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e62:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <UART_SetConfig+0x320>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d111      	bne.n	8001e8c <UART_SetConfig+0x14c>
 8001e68:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e78:	f000 8098 	beq.w	8001fac <UART_SetConfig+0x26c>
 8001e7c:	d9dc      	bls.n	8001e38 <UART_SetConfig+0xf8>
 8001e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e82:	f000 8084 	beq.w	8001f8e <UART_SetConfig+0x24e>
 8001e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e8a:	e7e4      	b.n	8001e56 <UART_SetConfig+0x116>
 8001e8c:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <UART_SetConfig+0x304>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d1ae      	bne.n	8001df0 <UART_SetConfig+0xb0>
 8001e92:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea2:	f000 8083 	beq.w	8001fac <UART_SetConfig+0x26c>
 8001ea6:	d9c7      	bls.n	8001e38 <UART_SetConfig+0xf8>
 8001ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eac:	d06f      	beq.n	8001f8e <UART_SetConfig+0x24e>
 8001eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001eb2:	e7d0      	b.n	8001e56 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001eb4:	486b      	ldr	r0, [pc, #428]	; (8002064 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001eb6:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001eb8:	6862      	ldr	r2, [r4, #4]
 8001eba:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001ebe:	4281      	cmp	r1, r0
 8001ec0:	d905      	bls.n	8001ece <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001ec2:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001ec8:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001eca:	4610      	mov	r0, r2
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001ece:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001ed2:	d8f6      	bhi.n	8001ec2 <UART_SetConfig+0x182>
        switch (clocksource)
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d82e      	bhi.n	8001f36 <UART_SetConfig+0x1f6>
 8001ed8:	e8df f003 	tbb	[pc, r3]
 8001edc:	2d1c2d05 	.word	0x2d1c2d05
 8001ee0:	2d2d2d24 	.word	0x2d2d2d24
 8001ee4:	27          	.byte	0x27
 8001ee5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ee6:	f7ff fa81 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eea:	6862      	ldr	r2, [r4, #4]
 8001eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef0:	0856      	lsrs	r6, r2, #1
 8001ef2:	2700      	movs	r7, #0
 8001ef4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4630      	mov	r0, r6
 8001efc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001efe:	f7fe f963 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001f02:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001f04:	4b58      	ldr	r3, [pc, #352]	; (8002068 <UART_SetConfig+0x328>)
 8001f06:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d8d9      	bhi.n	8001ec2 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	60d8      	str	r0, [r3, #12]
 8001f12:	e7d7      	b.n	8001ec4 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001f14:	4855      	ldr	r0, [pc, #340]	; (800206c <UART_SetConfig+0x32c>)
 8001f16:	0855      	lsrs	r5, r2, #1
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001f1e:	f141 0100 	adc.w	r1, r1, #0
 8001f22:	e7ec      	b.n	8001efe <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f24:	f7fe ff56 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8001f28:	e7df      	b.n	8001eea <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001f2a:	0850      	lsrs	r0, r2, #1
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001f34:	e7f3      	b.n	8001f1e <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001f36:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f38:	2000      	movs	r0, #0
 8001f3a:	e7e3      	b.n	8001f04 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f3c:	f7ff fa68 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8001f40:	e04e      	b.n	8001fe0 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f42:	f7ff fa53 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f46:	6862      	ldr	r2, [r4, #4]
 8001f48:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f50:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f52:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f54:	f1a3 0010 	sub.w	r0, r3, #16
 8001f58:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001f5c:	4288      	cmp	r0, r1
 8001f5e:	d8b0      	bhi.n	8001ec2 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001f60:	6821      	ldr	r1, [r4, #0]
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e7ae      	b.n	8001ec4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f66:	f7ff fa53 	bl	8001410 <HAL_RCC_GetPCLK2Freq>
 8001f6a:	e7ec      	b.n	8001f46 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f6c:	6860      	ldr	r0, [r4, #4]
 8001f6e:	0843      	lsrs	r3, r0, #1
 8001f70:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f74:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f78:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f7c:	e7e8      	b.n	8001f50 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f7e:	f7fe ff29 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8001f82:	e7e0      	b.n	8001f46 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f84:	6860      	ldr	r0, [r4, #4]
 8001f86:	0843      	lsrs	r3, r0, #1
 8001f88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f8c:	e7f4      	b.n	8001f78 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <UART_SetConfig+0x304>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d08f      	beq.n	8001eb4 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f98:	d1e8      	bne.n	8001f6c <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f9a:	6860      	ldr	r0, [r4, #4]
 8001f9c:	0843      	lsrs	r3, r0, #1
 8001f9e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001fa2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001faa:	e01f      	b.n	8001fec <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <UART_SetConfig+0x304>)
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d10b      	bne.n	8001fca <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001fb2:	f7fe ff0f 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
        break;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e746      	b.n	8001e48 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <UART_SetConfig+0x304>)
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f47f af25 	bne.w	8001e0c <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001fc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e776      	b.n	8001eb8 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fca:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001fce:	d1d6      	bne.n	8001f7e <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fd0:	f7fe ff00 	bl	8000dd4 <HAL_RCC_GetSysClockFreq>
 8001fd4:	e004      	b.n	8001fe0 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fd6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001fda:	d1b2      	bne.n	8001f42 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fdc:	f7ff fa06 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fe0:	6861      	ldr	r1, [r4, #4]
 8001fe2:	084a      	lsrs	r2, r1, #1
 8001fe4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001fe8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fee:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ff0:	f1a3 0010 	sub.w	r0, r3, #16
 8001ff4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ff8:	4288      	cmp	r0, r1
 8001ffa:	f63f af62 	bhi.w	8001ec2 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8001ffe:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002002:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002004:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002008:	430b      	orrs	r3, r1
 800200a:	60c3      	str	r3, [r0, #12]
 800200c:	e75a      	b.n	8001ec4 <UART_SetConfig+0x184>
    switch (clocksource)
 800200e:	2b08      	cmp	r3, #8
 8002010:	f63f af57 	bhi.w	8001ec2 <UART_SetConfig+0x182>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <UART_SetConfig+0x2dc>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	08001f43 	.word	0x08001f43
 8002020:	08001f67 	.word	0x08001f67
 8002024:	08001f6d 	.word	0x08001f6d
 8002028:	08001ec3 	.word	0x08001ec3
 800202c:	08001f7f 	.word	0x08001f7f
 8002030:	08001ec3 	.word	0x08001ec3
 8002034:	08001ec3 	.word	0x08001ec3
 8002038:	08001ec3 	.word	0x08001ec3
 800203c:	08001f85 	.word	0x08001f85
 8002040:	efff69f3 	.word	0xefff69f3
 8002044:	40008000 	.word	0x40008000
 8002048:	40013800 	.word	0x40013800
 800204c:	08002f94 	.word	0x08002f94
 8002050:	40004400 	.word	0x40004400
 8002054:	08002f98 	.word	0x08002f98
 8002058:	40004800 	.word	0x40004800
 800205c:	40004c00 	.word	0x40004c00
 8002060:	40005000 	.word	0x40005000
 8002064:	00f42400 	.word	0x00f42400
 8002068:	000ffcff 	.word	0x000ffcff
 800206c:	f4240000 	.word	0xf4240000

08002070 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002072:	07da      	lsls	r2, r3, #31
{
 8002074:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002076:	d506      	bpl.n	8002086 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002078:	6801      	ldr	r1, [r0, #0]
 800207a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800207c:	684a      	ldr	r2, [r1, #4]
 800207e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002082:	4322      	orrs	r2, r4
 8002084:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002086:	079c      	lsls	r4, r3, #30
 8002088:	d506      	bpl.n	8002098 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800208a:	6801      	ldr	r1, [r0, #0]
 800208c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800208e:	684a      	ldr	r2, [r1, #4]
 8002090:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002094:	4322      	orrs	r2, r4
 8002096:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002098:	0759      	lsls	r1, r3, #29
 800209a:	d506      	bpl.n	80020aa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800209c:	6801      	ldr	r1, [r0, #0]
 800209e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80020a0:	684a      	ldr	r2, [r1, #4]
 80020a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a6:	4322      	orrs	r2, r4
 80020a8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020aa:	071a      	lsls	r2, r3, #28
 80020ac:	d506      	bpl.n	80020bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020ae:	6801      	ldr	r1, [r0, #0]
 80020b0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80020b2:	684a      	ldr	r2, [r1, #4]
 80020b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b8:	4322      	orrs	r2, r4
 80020ba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020bc:	06dc      	lsls	r4, r3, #27
 80020be:	d506      	bpl.n	80020ce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020c0:	6801      	ldr	r1, [r0, #0]
 80020c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80020c4:	688a      	ldr	r2, [r1, #8]
 80020c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ca:	4322      	orrs	r2, r4
 80020cc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ce:	0699      	lsls	r1, r3, #26
 80020d0:	d506      	bpl.n	80020e0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020d2:	6801      	ldr	r1, [r0, #0]
 80020d4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020d6:	688a      	ldr	r2, [r1, #8]
 80020d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020dc:	4322      	orrs	r2, r4
 80020de:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020e0:	065a      	lsls	r2, r3, #25
 80020e2:	d50f      	bpl.n	8002104 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020e4:	6801      	ldr	r1, [r0, #0]
 80020e6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020e8:	684a      	ldr	r2, [r1, #4]
 80020ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020ee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020f6:	d105      	bne.n	8002104 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020f8:	684a      	ldr	r2, [r1, #4]
 80020fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020fc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002100:	4322      	orrs	r2, r4
 8002102:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002104:	061b      	lsls	r3, r3, #24
 8002106:	d506      	bpl.n	8002116 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800210c:	6853      	ldr	r3, [r2, #4]
 800210e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002112:	430b      	orrs	r3, r1
 8002114:	6053      	str	r3, [r2, #4]
 8002116:	bd10      	pop	{r4, pc}

08002118 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211c:	9d06      	ldr	r5, [sp, #24]
 800211e:	4604      	mov	r4, r0
 8002120:	460f      	mov	r7, r1
 8002122:	4616      	mov	r6, r2
 8002124:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002126:	6821      	ldr	r1, [r4, #0]
 8002128:	69ca      	ldr	r2, [r1, #28]
 800212a:	ea37 0302 	bics.w	r3, r7, r2
 800212e:	bf0c      	ite	eq
 8002130:	2201      	moveq	r2, #1
 8002132:	2200      	movne	r2, #0
 8002134:	42b2      	cmp	r2, r6
 8002136:	d002      	beq.n	800213e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
}
 800213a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800213e:	1c6b      	adds	r3, r5, #1
 8002140:	d0f2      	beq.n	8002128 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002142:	b99d      	cbnz	r5, 800216c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800214c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002156:	2320      	movs	r3, #32
 8002158:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800215c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002160:	2300      	movs	r3, #0
 8002162:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002166:	2003      	movs	r0, #3
 8002168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800216c:	f7fe f9e4 	bl	8000538 <HAL_GetTick>
 8002170:	eba0 0008 	sub.w	r0, r0, r8
 8002174:	4285      	cmp	r5, r0
 8002176:	d2d6      	bcs.n	8002126 <UART_WaitOnFlagUntilTimeout+0xe>
 8002178:	e7e4      	b.n	8002144 <UART_WaitOnFlagUntilTimeout+0x2c>

0800217a <UART_CheckIdleState>:
{
 800217a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800217c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	2600      	movs	r6, #0
 8002180:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002182:	f7fe f9d9 	bl	8000538 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800218c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800218e:	d417      	bmi.n	80021c0 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	075b      	lsls	r3, r3, #29
 8002196:	d50a      	bpl.n	80021ae <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	462b      	mov	r3, r5
 80021a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7ff ffb6 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 80021ac:	b9a0      	cbnz	r0, 80021d8 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80021ae:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80021b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021b2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80021b6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80021ba:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80021be:	e00c      	b.n	80021da <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4632      	mov	r2, r6
 80021c8:	4603      	mov	r3, r0
 80021ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff ffa2 	bl	8002118 <UART_WaitOnFlagUntilTimeout>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d0db      	beq.n	8002190 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80021d8:	2003      	movs	r0, #3
}
 80021da:	b002      	add	sp, #8
 80021dc:	bd70      	pop	{r4, r5, r6, pc}

080021de <HAL_UART_Init>:
{
 80021de:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021e0:	4604      	mov	r4, r0
 80021e2:	b360      	cbz	r0, 800223e <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021e4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80021e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ec:	b91b      	cbnz	r3, 80021f6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021ee:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80021f2:	f000 fd6d 	bl	8002cd0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021f8:	2324      	movs	r3, #36	; 0x24
 80021fa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff fd9a 	bl	8001d40 <UART_SetConfig>
 800220c:	2801      	cmp	r0, #1
 800220e:	d016      	beq.n	800223e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002212:	b113      	cbz	r3, 800221a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff ff2b 	bl	8002070 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800222a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002232:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800223a:	f7ff bf9e 	b.w	800217a <UART_CheckIdleState>
}
 800223e:	2001      	movs	r0, #1
 8002240:	bd10      	pop	{r4, pc}
	...

08002244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002246:	3b01      	subs	r3, #1
 8002248:	d101      	bne.n	800224e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800224a:	2003      	movs	r0, #3
 800224c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800224e:	6902      	ldr	r2, [r0, #16]
 8002250:	2a00      	cmp	r2, #0
 8002252:	daf8      	bge.n	8002246 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002254:	6903      	ldr	r3, [r0, #16]
 8002256:	4a06      	ldr	r2, [pc, #24]	; (8002270 <USB_CoreReset+0x2c>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800225e:	3a01      	subs	r2, #1
 8002260:	d0f3      	beq.n	800224a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002262:	6903      	ldr	r3, [r0, #16]
 8002264:	f013 0301 	ands.w	r3, r3, #1
 8002268:	d1f9      	bne.n	800225e <USB_CoreReset+0x1a>

  return HAL_OK;
 800226a:	4618      	mov	r0, r3
}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	00030d41 	.word	0x00030d41

08002274 <USB_CoreInit>:
{
 8002274:	b084      	sub	sp, #16
 8002276:	b538      	push	{r3, r4, r5, lr}
 8002278:	ad05      	add	r5, sp, #20
 800227a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800227e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002280:	2b01      	cmp	r3, #1
{
 8002282:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002284:	d11b      	bne.n	80022be <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002286:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800228e:	68c3      	ldr	r3, [r0, #12]
 8002290:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002298:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800229a:	68c3      	ldr	r3, [r0, #12]
 800229c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80022a0:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80022a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80022a4:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80022a6:	bf02      	ittt	eq
 80022a8:	68c3      	ldreq	r3, [r0, #12]
 80022aa:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80022ae:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80022b0:	f7ff ffc8 	bl	8002244 <USB_CoreReset>
}
 80022b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022b8:	2000      	movs	r0, #0
 80022ba:	b004      	add	sp, #16
 80022bc:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80022be:	68c3      	ldr	r3, [r0, #12]
 80022c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022c4:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80022c6:	f7ff ffbd 	bl	8002244 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80022ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80022d0:	e7f0      	b.n	80022b4 <USB_CoreInit+0x40>

080022d2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80022d2:	6883      	ldr	r3, [r0, #8]
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6083      	str	r3, [r0, #8]
}
 80022da:	2000      	movs	r0, #0
 80022dc:	4770      	bx	lr

080022de <USB_SetCurrentMode>:
{
 80022de:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022e0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022e2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80022e8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022ea:	d108      	bne.n	80022fe <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80022ec:	68c3      	ldr	r3, [r0, #12]
 80022ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80022f2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80022f4:	2032      	movs	r0, #50	; 0x32
 80022f6:	f7fe f925 	bl	8000544 <HAL_Delay>
  return HAL_OK;
 80022fa:	2000      	movs	r0, #0
 80022fc:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80022fe:	b919      	cbnz	r1, 8002308 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002300:	68c3      	ldr	r3, [r0, #12]
 8002302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002306:	e7f4      	b.n	80022f2 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002308:	2001      	movs	r0, #1
}
 800230a:	bd08      	pop	{r3, pc}

0800230c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800230c:	0189      	lsls	r1, r1, #6
 800230e:	f041 0120 	orr.w	r1, r1, #32
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <USB_FlushTxFifo+0x20>)
 8002314:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002316:	3a01      	subs	r2, #1
 8002318:	d005      	beq.n	8002326 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800231a:	6903      	ldr	r3, [r0, #16]
 800231c:	f013 0320 	ands.w	r3, r3, #32
 8002320:	d1f9      	bne.n	8002316 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002322:	4618      	mov	r0, r3
 8002324:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002326:	2003      	movs	r0, #3
}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	00030d41 	.word	0x00030d41

08002330 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002330:	2310      	movs	r3, #16
 8002332:	4a06      	ldr	r2, [pc, #24]	; (800234c <USB_FlushRxFifo+0x1c>)
 8002334:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002336:	3a01      	subs	r2, #1
 8002338:	d005      	beq.n	8002346 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800233a:	6903      	ldr	r3, [r0, #16]
 800233c:	f013 0310 	ands.w	r3, r3, #16
 8002340:	d1f9      	bne.n	8002336 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002342:	4618      	mov	r0, r3
 8002344:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	00030d41 	.word	0x00030d41

08002350 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002350:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002354:	4319      	orrs	r1, r3
 8002356:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800235a:	2000      	movs	r0, #0
 800235c:	4770      	bx	lr
	...

08002360 <USB_DevInit>:
{
 8002360:	b084      	sub	sp, #16
 8002362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002366:	4604      	mov	r4, r0
 8002368:	a807      	add	r0, sp, #28
 800236a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800236e:	2300      	movs	r3, #0
 8002370:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8002372:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8002374:	4619      	mov	r1, r3
 8002376:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800237a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800237e:	3301      	adds	r3, #1
 8002380:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002382:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002384:	d1f7      	bne.n	8002376 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800238e:	b95f      	cbnz	r7, 80023a8 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002396:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a6:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80023a8:	2500      	movs	r5, #0
 80023aa:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023ae:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80023b2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80023b6:	2103      	movs	r1, #3
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff ffc9 	bl	8002350 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80023be:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80023c2:	2110      	movs	r1, #16
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff ffa1 	bl	800230c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff ffb0 	bl	8002330 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 80023d0:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023d2:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 80023d4:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80023d6:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 80023d8:	61f5      	str	r5, [r6, #28]
 80023da:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80023de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80023e2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80023e6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023ea:	4543      	cmp	r3, r8
 80023ec:	d12f      	bne.n	800244e <USB_DevInit+0xee>
 80023ee:	2100      	movs	r1, #0
 80023f0:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80023f4:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80023f6:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80023fa:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80023fe:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002402:	428b      	cmp	r3, r1
 8002404:	d134      	bne.n	8002470 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002406:	6933      	ldr	r3, [r6, #16]
 8002408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002412:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002416:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002418:	69a3      	ldr	r3, [r4, #24]
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002420:	69a2      	ldr	r2, [r4, #24]
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <USB_DevInit+0x134>)
 8002424:	4313      	orrs	r3, r2
 8002426:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800242a:	b11b      	cbz	r3, 8002434 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800242c:	69a3      	ldr	r3, [r4, #24]
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002434:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002436:	bf01      	itttt	eq
 8002438:	69a3      	ldreq	r3, [r4, #24]
 800243a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800243e:	f043 0304 	orreq.w	r3, r3, #4
 8002442:	61a3      	streq	r3, [r4, #24]
}
 8002444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002448:	2000      	movs	r0, #0
 800244a:	b004      	add	sp, #16
 800244c:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800244e:	f8d2 c000 	ldr.w	ip, [r2]
 8002452:	f1bc 0f00 	cmp.w	ip, #0
 8002456:	da09      	bge.n	800246c <USB_DevInit+0x10c>
      if (i == 0U)
 8002458:	b933      	cbnz	r3, 8002468 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800245a:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800245c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800245e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002460:	f8c2 e008 	str.w	lr, [r2, #8]
 8002464:	3220      	adds	r2, #32
 8002466:	e7c0      	b.n	80023ea <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002468:	6010      	str	r0, [r2, #0]
 800246a:	e7f7      	b.n	800245c <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	e7f5      	b.n	800245c <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002470:	f8d2 8000 	ldr.w	r8, [r2]
 8002474:	f1b8 0f00 	cmp.w	r8, #0
 8002478:	da0a      	bge.n	8002490 <USB_DevInit+0x130>
      if (i == 0U)
 800247a:	b939      	cbnz	r1, 800248c <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800247c:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002480:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002482:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002484:	f8c2 c008 	str.w	ip, [r2, #8]
 8002488:	3220      	adds	r2, #32
 800248a:	e7ba      	b.n	8002402 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800248c:	6015      	str	r5, [r2, #0]
 800248e:	e7f7      	b.n	8002480 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002490:	6010      	str	r0, [r2, #0]
 8002492:	e7f5      	b.n	8002480 <USB_DevInit+0x120>
 8002494:	803c3800 	.word	0x803c3800

08002498 <USB_DevDisconnect>:
{
 8002498:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800249a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80024a6:	2003      	movs	r0, #3
 80024a8:	f7fe f84c 	bl	8000544 <HAL_Delay>
}
 80024ac:	2000      	movs	r0, #0
 80024ae:	bd08      	pop	{r3, pc}

080024b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b4:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b6:	2244      	movs	r2, #68	; 0x44
 80024b8:	2100      	movs	r1, #0
 80024ba:	a805      	add	r0, sp, #20
 80024bc:	f000 fd56 	bl	8002f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	4622      	mov	r2, r4
 80024c2:	2100      	movs	r1, #0
 80024c4:	4668      	mov	r0, sp
 80024c6:	f000 fd51 	bl	8002f6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ca:	2100      	movs	r1, #0
 80024cc:	2288      	movs	r2, #136	; 0x88
 80024ce:	a816      	add	r0, sp, #88	; 0x58
 80024d0:	f000 fd4c 	bl	8002f6c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80024d4:	f7fe fb70 	bl	8000bb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <SystemClock_Config+0xb4>)
 80024da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024de:	f023 0318 	bic.w	r3, r3, #24
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024e6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024e8:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ea:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80024ec:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024ee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024f0:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 80024f2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80024f4:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 80024f8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024fa:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024fc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024fe:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002500:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002502:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002504:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002506:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002508:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800250a:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250c:	f7fe fcb6 	bl	8000e7c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002510:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002512:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002514:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002516:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002518:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800251e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002520:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002522:	f7fe fed1 	bl	80012c8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <SystemClock_Config+0xb8>)
 8002528:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800252a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800252e:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002530:	2318      	movs	r3, #24
 8002532:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002534:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800253a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800253c:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800253e:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002540:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002542:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002544:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002546:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002548:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800254a:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800254c:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254e:	f7ff f87d 	bl	800164c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002556:	f7fe fb3f 	bl	8000bd8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800255a:	f7ff fa5f 	bl	8001a1c <HAL_RCCEx_EnableMSIPLLMode>
}
 800255e:	b039      	add	sp, #228	; 0xe4
 8002560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	00012085 	.word	0x00012085

0800256c <main>:
{
 800256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002570:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8002572:	f7fd ffc9 	bl	8000508 <HAL_Init>
  SystemClock_Config();
 8002576:	f7ff ff9b 	bl	80024b0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	2214      	movs	r2, #20
 800257c:	2100      	movs	r1, #0
 800257e:	a807      	add	r0, sp, #28
 8002580:	f000 fcf4 	bl	8002f6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002584:	4bb0      	ldr	r3, [pc, #704]	; (8002848 <main+0x2dc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002586:	48b1      	ldr	r0, [pc, #708]	; (800284c <main+0x2e0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 8002884 <main+0x318>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800258e:	f042 0210 	orr.w	r2, r2, #16
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c
 8002594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002596:	f002 0210 	and.w	r2, r2, #16
 800259a:	9202      	str	r2, [sp, #8]
 800259c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a0:	f042 0204 	orr.w	r2, r2, #4
 80025a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80025a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a8:	f002 0204 	and.w	r2, r2, #4
 80025ac:	9203      	str	r2, [sp, #12]
 80025ae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80025b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ba:	f002 0201 	and.w	r2, r2, #1
 80025be:	9204      	str	r2, [sp, #16]
 80025c0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c4:	f042 0202 	orr.w	r2, r2, #2
 80025c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80025ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025cc:	f002 0202 	and.w	r2, r2, #2
 80025d0:	9205      	str	r2, [sp, #20]
 80025d2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	64da      	str	r2, [r3, #76]	; 0x4c
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ea:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025ec:	f7fe f99c 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPI1_NSS_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	f248 1114 	movw	r1, #33044	; 0x8114
 80025f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025fa:	f7fe f995 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80025fe:	2200      	movs	r2, #0
 8002600:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002604:	4892      	ldr	r0, [pc, #584]	; (8002850 <main+0x2e4>)
 8002606:	f7fe f98f 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	f241 0181 	movw	r1, #4225	; 0x1081
 8002610:	4890      	ldr	r0, [pc, #576]	; (8002854 <main+0x2e8>)
 8002612:	f7fe f989 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261c:	488d      	ldr	r0, [pc, #564]	; (8002854 <main+0x2e8>)
 800261e:	f7fe f983 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002628:	488b      	ldr	r0, [pc, #556]	; (8002858 <main+0x2ec>)
 800262a:	f7fe f97d 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800262e:	2201      	movs	r2, #1
 8002630:	2120      	movs	r1, #32
 8002632:	4887      	ldr	r0, [pc, #540]	; (8002850 <main+0x2e4>)
 8002634:	f7fe f978 	bl	8000928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	4611      	mov	r1, r2
 800263c:	4883      	ldr	r0, [pc, #524]	; (800284c <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002640:	f7fe f972 	bl	8000928 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002646:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264a:	a907      	add	r1, sp, #28
 800264c:	487f      	ldr	r0, [pc, #508]	; (800284c <main+0x2e0>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800264e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002650:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002656:	f7fe f88b 	bl	8000770 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800265a:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800265c:	a907      	add	r1, sp, #28
 800265e:	487b      	ldr	r0, [pc, #492]	; (800284c <main+0x2e0>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002660:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002662:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002668:	f7fe f882 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800266c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002670:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002672:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002674:	4b79      	ldr	r3, [pc, #484]	; (800285c <main+0x2f0>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002676:	4878      	ldr	r0, [pc, #480]	; (8002858 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002678:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800267a:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002680:	f7fe f876 	bl	8000770 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8002684:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002686:	a907      	add	r1, sp, #28
 8002688:	4873      	ldr	r0, [pc, #460]	; (8002858 <main+0x2ec>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800268a:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800268e:	2503      	movs	r5, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002690:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002694:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269a:	f7fe f869 	bl	8000770 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	a907      	add	r1, sp, #28
 80026a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80026a4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026a8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f7fe f85e 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPI1_NSS_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPI1_NSS_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80026b4:	f248 1314 	movw	r3, #33044	; 0x8114
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	a907      	add	r1, sp, #28
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPI1_NSS_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80026be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c6:	f7fe f853 	bl	8000770 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026ca:	a907      	add	r1, sp, #28
 80026cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80026d0:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d4:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f7fe f848 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80026e0:	a907      	add	r1, sp, #28
 80026e2:	485b      	ldr	r0, [pc, #364]	; (8002850 <main+0x2e4>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80026e4:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026e6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f7fe f840 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80026f0:	a907      	add	r1, sp, #28
 80026f2:	4857      	ldr	r0, [pc, #348]	; (8002850 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026f4:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80026f8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f7fe f838 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8002700:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	a907      	add	r1, sp, #28
 8002706:	4852      	ldr	r0, [pc, #328]	; (8002850 <main+0x2e4>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8002708:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002710:	f7fe f82e 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8002714:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002718:	a907      	add	r1, sp, #28
 800271a:	484e      	ldr	r0, [pc, #312]	; (8002854 <main+0x2e8>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800271c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002724:	f7fe f824 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002728:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	a907      	add	r1, sp, #28
 800272e:	4849      	ldr	r0, [pc, #292]	; (8002854 <main+0x2e8>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002730:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002738:	f7fe f81a 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800273c:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	a907      	add	r1, sp, #28
 8002742:	4845      	ldr	r0, [pc, #276]	; (8002858 <main+0x2ec>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002744:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f7fe f810 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002750:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002754:	a907      	add	r1, sp, #28
 8002756:	4840      	ldr	r0, [pc, #256]	; (8002858 <main+0x2ec>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002758:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800275a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002760:	f7fe f806 	bl	8000770 <HAL_GPIO_Init>
  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002764:	2305      	movs	r3, #5
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002766:	a907      	add	r1, sp, #28
 8002768:	483a      	ldr	r0, [pc, #232]	; (8002854 <main+0x2e8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	950a      	str	r5, [sp, #40]	; 0x28
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276c:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002770:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002772:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002778:	f7fd fffa 	bl	8000770 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800277c:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	a907      	add	r1, sp, #28
 8002780:	4834      	ldr	r0, [pc, #208]	; (8002854 <main+0x2e8>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002782:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	950a      	str	r5, [sp, #40]	; 0x28

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002786:	f44f 7a40 	mov.w	sl, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800278e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002792:	f7fd ffed 	bl	8000770 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002796:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800279c:	2504      	movs	r5, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279e:	482c      	ldr	r0, [pc, #176]	; (8002850 <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a2:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a4:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80027a6:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f7fd ffe1 	bl	8000770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027ae:	4622      	mov	r2, r4
 80027b0:	4621      	mov	r1, r4
 80027b2:	2017      	movs	r0, #23
 80027b4:	f7fd fee6 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027b8:	2017      	movs	r0, #23
 80027ba:	f7fd ff17 	bl	80005ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027be:	4621      	mov	r1, r4
 80027c0:	4622      	mov	r2, r4
 80027c2:	2028      	movs	r0, #40	; 0x28
 80027c4:	f7fd fede 	bl	8000584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027c8:	2028      	movs	r0, #40	; 0x28
 80027ca:	f7fd ff0f 	bl	80005ec <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80027ce:	4824      	ldr	r0, [pc, #144]	; (8002860 <main+0x2f4>)
 80027d0:	4b24      	ldr	r3, [pc, #144]	; (8002864 <main+0x2f8>)
 80027d2:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80027d4:	6205      	str	r5, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 80027da:	4d23      	ldr	r5, [pc, #140]	; (8002868 <main+0x2fc>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80027dc:	7106      	strb	r6, [r0, #4]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80027de:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80027e0:	6286      	str	r6, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80027e2:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80027e4:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80027e6:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80027e8:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80027ea:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80027ec:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Offset = 0;
 80027ee:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80027f0:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80027f2:	f7fd ff49 	bl	8000688 <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <main+0x300>)
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <main+0x304>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fa:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027fc:	4628      	mov	r0, r5
  hi2c2.Init.Timing = 0x10909CEC;
 80027fe:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8002802:	60ac      	str	r4, [r5, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002804:	612c      	str	r4, [r5, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002806:	616c      	str	r4, [r5, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002808:	61ac      	str	r4, [r5, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280a:	61ec      	str	r4, [r5, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800280c:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800280e:	f7fe f89d 	bl	800094c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe f8ea 	bl	80009ee <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800281a:	4621      	mov	r1, r4
 800281c:	4628      	mov	r0, r5
 800281e:	f7fe f90c 	bl	8000a3a <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8002822:	4814      	ldr	r0, [pc, #80]	; (8002874 <main+0x308>)
  hqspi.Init.ClockPrescaler = 255;
 8002824:	4914      	ldr	r1, [pc, #80]	; (8002878 <main+0x30c>)
  hspi1.Instance = SPI1;
 8002826:	4d15      	ldr	r5, [pc, #84]	; (800287c <main+0x310>)
  hqspi.Init.FifoThreshold = 1;
 8002828:	6086      	str	r6, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 800282a:	23ff      	movs	r3, #255	; 0xff
 800282c:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.FlashSize = 1;
 8002830:	6106      	str	r6, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002832:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002834:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002836:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002838:	f7fe fa32 	bl	8000ca0 <HAL_QSPI_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <main+0x314>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800283e:	616e      	str	r6, [r5, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002840:	f44f 7b82 	mov.w	fp, #260	; 0x104
 8002844:	e020      	b.n	8002888 <main+0x31c>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	48001000 	.word	0x48001000
 8002850:	48000400 	.word	0x48000400
 8002854:	48000c00 	.word	0x48000c00
 8002858:	48000800 	.word	0x48000800
 800285c:	10210000 	.word	0x10210000
 8002860:	2000004c 	.word	0x2000004c
 8002864:	40016020 	.word	0x40016020
 8002868:	20000504 	.word	0x20000504
 800286c:	40005800 	.word	0x40005800
 8002870:	10909cec 	.word	0x10909cec
 8002874:	20000690 	.word	0x20000690
 8002878:	a0001000 	.word	0xa0001000
 800287c:	2000062c 	.word	0x2000062c
 8002880:	40013000 	.word	0x40013000
 8002884:	10110000 	.word	0x10110000
 8002888:	e885 0808 	stmia.w	r5, {r3, fp}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800288c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002890:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002894:	60eb      	str	r3, [r5, #12]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002896:	4628      	mov	r0, r5
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002898:	2328      	movs	r3, #40	; 0x28
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800289a:	61ae      	str	r6, [r5, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800289c:	61eb      	str	r3, [r5, #28]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800289e:	60ac      	str	r4, [r5, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028a0:	612f      	str	r7, [r5, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a2:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a4:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a6:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028a8:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ac:	632c      	str	r4, [r5, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028ae:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028b0:	f7ff f936 	bl	8001b20 <HAL_SPI_Init>
  hspi3.Instance = SPI3;
 80028b4:	4877      	ldr	r0, [pc, #476]	; (8002a94 <main+0x528>)
 80028b6:	4b78      	ldr	r3, [pc, #480]	; (8002a98 <main+0x52c>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80028b8:	6186      	str	r6, [r0, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80028ba:	e880 0808 	stmia.w	r0, {r3, fp}
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028be:	f8c0 8034 	str.w	r8, [r0, #52]	; 0x34
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80028c2:	6084      	str	r4, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80028c4:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c8:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ca:	6144      	str	r4, [r0, #20]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028cc:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ce:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80028d4:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d8:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80028da:	f7ff f921 	bl	8001b20 <HAL_SPI_Init>
  huart1.Instance = USART1;
 80028de:	486f      	ldr	r0, [pc, #444]	; (8002a9c <main+0x530>)
  huart1.Init.BaudRate = 115200;
 80028e0:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <main+0x534>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	6084      	str	r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e4:	260c      	movs	r6, #12
  huart1.Init.BaudRate = 115200;
 80028e6:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
 80028ea:	e880 0108 	stmia.w	r0, {r3, r8}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ee:	6146      	str	r6, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f0:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028f2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f6:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f8:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028fa:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028fc:	f7ff fc6f 	bl	80021de <HAL_UART_Init>
  huart3.Instance = USART3;
 8002900:	4868      	ldr	r0, [pc, #416]	; (8002aa4 <main+0x538>)
 8002902:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <main+0x53c>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002904:	6146      	str	r6, [r0, #20]
  huart3.Init.BaudRate = 115200;
 8002906:	e880 0108 	stmia.w	r0, {r3, r8}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800290a:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800290c:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800290e:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002910:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002912:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002914:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002916:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002918:	f7ff fc61 	bl	80021de <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800291c:	4863      	ldr	r0, [pc, #396]	; (8002aac <main+0x540>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800291e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002922:	2606      	movs	r6, #6
 8002924:	e880 0048 	stmia.w	r0, {r3, r6}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002928:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800292a:	6187      	str	r7, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800292c:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800292e:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002930:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002932:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002934:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002936:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002938:	f7fe f8a4 	bl	8000a84 <HAL_PCD_Init>
	  uint8_t msgNOP = 0x00;
 800293c:	2400      	movs	r4, #0
	  uint8_t msg1= 0x50;
 800293e:	2350      	movs	r3, #80	; 0x50
 8002940:	f88d 3004 	strb.w	r3, [sp, #4]
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002944:	4622      	mov	r2, r4
	  uint8_t msg2= 0xFF;
 8002946:	23ff      	movs	r3, #255	; 0xff
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002948:	2110      	movs	r1, #16
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	  uint8_t msg2= 0xFF;
 800294e:	f88d 3005 	strb.w	r3, [sp, #5]
	  uint8_t msg3= 0xFF;
 8002952:	f88d 3006 	strb.w	r3, [sp, #6]
	  uint8_t msg4= 0xFF;
 8002956:	f88d 3007 	strb.w	r3, [sp, #7]
	  uint8_t msgNOP = 0x00;
 800295a:	f88d 401c 	strb.w	r4, [sp, #28]
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800295e:	f7fd ffe3 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msgNOP, 1, 500);
 8002962:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002966:	a907      	add	r1, sp, #28
 8002968:	2201      	movs	r2, #1
 800296a:	4628      	mov	r0, r5
 800296c:	f7ff f929 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	2110      	movs	r1, #16
 8002974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002978:	f7fd ffd6 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800297c:	4622      	mov	r2, r4
 800297e:	2110      	movs	r1, #16
 8002980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002984:	f7fd ffd0 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msg1, 1, 500);
 8002988:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800298c:	a901      	add	r1, sp, #4
 800298e:	2201      	movs	r2, #1
 8002990:	4628      	mov	r0, r5
 8002992:	f7ff f916 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	2110      	movs	r1, #16
 800299a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800299e:	f7fd ffc3 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80029a2:	4622      	mov	r2, r4
 80029a4:	2110      	movs	r1, #16
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f7fd ffbd 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msgNOP, 1, 500);
 80029ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029b2:	a907      	add	r1, sp, #28
 80029b4:	2201      	movs	r2, #1
 80029b6:	4628      	mov	r0, r5
 80029b8:	f7ff f903 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80029bc:	2201      	movs	r2, #1
 80029be:	2110      	movs	r1, #16
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c4:	f7fd ffb0 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80029c8:	4622      	mov	r2, r4
 80029ca:	2110      	movs	r1, #16
 80029cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d0:	f7fd ffaa 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msg2, 1, 500);
 80029d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029d8:	f10d 0105 	add.w	r1, sp, #5
 80029dc:	2201      	movs	r2, #1
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff f8ef 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80029e4:	2201      	movs	r2, #1
 80029e6:	2110      	movs	r1, #16
 80029e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ec:	f7fd ff9c 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80029f0:	4622      	mov	r2, r4
 80029f2:	2110      	movs	r1, #16
 80029f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f8:	f7fd ff96 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msgNOP, 1, 500);
 80029fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a00:	a907      	add	r1, sp, #28
 8002a02:	2201      	movs	r2, #1
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7ff f8dc 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a12:	f7fd ff89 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002a16:	4622      	mov	r2, r4
 8002a18:	2110      	movs	r1, #16
 8002a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a1e:	f7fd ff83 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msg3, 1, 500);
 8002a22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a26:	f10d 0106 	add.w	r1, sp, #6
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	f7ff f8c8 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	2110      	movs	r1, #16
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f7fd ff75 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002a3e:	4622      	mov	r2, r4
 8002a40:	2110      	movs	r1, #16
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a46:	f7fd ff6f 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msgNOP, 1, 500);
 8002a4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a4e:	a907      	add	r1, sp, #28
 8002a50:	2201      	movs	r2, #1
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7ff f8b5 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a60:	f7fd ff62 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002a64:	4622      	mov	r2, r4
 8002a66:	2110      	movs	r1, #16
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6c:	f7fd ff5c 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, &msg4, 1, 500);
 8002a70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a74:	f10d 0107 	add.w	r1, sp, #7
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4628      	mov	r0, r5
 8002a7c:	f7ff f8a1 	bl	8001bc2 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2110      	movs	r1, #16
 8002a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a88:	f7fd ff4e 	bl	8000928 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	f7fd fd59 	bl	8000544 <HAL_Delay>
 8002a92:	e753      	b.n	800293c <main+0x3d0>
 8002a94:	20000550 	.word	0x20000550
 8002a98:	40003c00 	.word	0x40003c00
 8002a9c:	200005b4 	.word	0x200005b4
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	20000084 	.word	0x20000084
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	200000fc 	.word	0x200000fc

08002ab0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_MspInit+0x2c>)
 8002ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	661a      	str	r2, [r3, #96]	; 0x60
 8002aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002abc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abe:	f002 0201 	and.w	r2, r2, #1
 8002ac2:	9200      	str	r2, [sp, #0]
 8002ac4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad8:	b002      	add	sp, #8
 8002ada:	4770      	bx	lr
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002ae0:	b500      	push	{lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	2214      	movs	r2, #20
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	a803      	add	r0, sp, #12
 8002aea:	f000 fa3f 	bl	8002f6c <memset>
  if(DFSDM1_Init == 0)
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <HAL_DFSDM_ChannelMspInit+0x5c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	bb03      	cbnz	r3, 8002b36 <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002af4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002afc:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002afe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b00:	480f      	ldr	r0, [pc, #60]	; (8002b40 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002b02:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b06:	661a      	str	r2, [r3, #96]	; 0x60
 8002b08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b0a:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8002b0e:	9201      	str	r2, [sp, #4]
 8002b10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b14:	f042 0210 	orr.w	r2, r2, #16
 8002b18:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	9302      	str	r3, [sp, #8]
 8002b22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002b24:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002b28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002b2e:	2306      	movs	r3, #6
 8002b30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b32:	f7fd fe1d 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002b36:	b009      	add	sp, #36	; 0x24
 8002b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b3c:	20000044 	.word	0x20000044
 8002b40:	48001000 	.word	0x48001000

08002b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4604      	mov	r4, r0
 8002b48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	2214      	movs	r2, #20
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	a803      	add	r0, sp, #12
 8002b50:	f000 fa0c 	bl	8002f6c <memset>
  if(hi2c->Instance==I2C2)
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_I2C_MspInit+0x60>)
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5c:	4c12      	ldr	r4, [pc, #72]	; (8002ba8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	4813      	ldr	r0, [pc, #76]	; (8002bac <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002b68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002b72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b78:	2312      	movs	r3, #18
 8002b7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b86:	2304      	movs	r3, #4
 8002b88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f7fd fdf1 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b94:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9c:	9302      	str	r3, [sp, #8]
 8002b9e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ba0:	b008      	add	sp, #32
 8002ba2:	bd10      	pop	{r4, pc}
 8002ba4:	40005800 	.word	0x40005800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	48000400 	.word	0x48000400

08002bb0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	2214      	movs	r2, #20
 8002bb8:	2100      	movs	r1, #0
 8002bba:	a803      	add	r0, sp, #12
 8002bbc:	f000 f9d6 	bl	8002f6c <memset>
  if(hqspi->Instance==QUADSPI)
 8002bc0:	6822      	ldr	r2, [r4, #0]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_QSPI_MspInit+0x64>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d122      	bne.n	8002c0e <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bc8:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8002bcc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd0:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd4:	4810      	ldr	r0, [pc, #64]	; (8002c18 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
 8002bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bde:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002be2:	9201      	str	r2, [sp, #4]
 8002be4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002be8:	f042 0210 	orr.w	r2, r2, #16
 8002bec:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	9302      	str	r3, [sp, #8]
 8002bf6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8002bf8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002bfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c06:	230a      	movs	r3, #10
 8002c08:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c0a:	f7fd fdb1 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002c0e:	b008      	add	sp, #32
 8002c10:	bd10      	pop	{r4, pc}
 8002c12:	bf00      	nop
 8002c14:	a0001000 	.word	0xa0001000
 8002c18:	48001000 	.word	0x48001000

08002c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c1c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	2214      	movs	r2, #20
{
 8002c20:	b08a      	sub	sp, #40	; 0x28
 8002c22:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	2100      	movs	r1, #0
 8002c26:	eb0d 0002 	add.w	r0, sp, r2
 8002c2a:	f000 f99f 	bl	8002f6c <memset>
  if(hspi->Instance==SPI1)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_SPI_MspInit+0xa4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d121      	bne.n	8002c7a <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_SPI_MspInit+0xa8>)
 8002c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c3e:	661a      	str	r2, [r3, #96]	; 0x60
 8002c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002c5c:	23e0      	movs	r3, #224	; 0xe0
 8002c5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c64:	2303      	movs	r3, #3
 8002c66:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	a905      	add	r1, sp, #20
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f7fd fd7d 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c76:	b00a      	add	sp, #40	; 0x28
 8002c78:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI3)
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_SPI_MspInit+0xac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d1fa      	bne.n	8002c76 <HAL_SPI_MspInit+0x5a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c80:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_SPI_MspInit+0xa8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c82:	4812      	ldr	r0, [pc, #72]	; (8002ccc <HAL_SPI_MspInit+0xb0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c8e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c98:	f042 0204 	orr.w	r2, r2, #4
 8002c9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	9304      	str	r3, [sp, #16]
 8002ca6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002ca8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	a905      	add	r1, sp, #20
 8002cbc:	e7d9      	b.n	8002c72 <HAL_SPI_MspInit+0x56>
 8002cbe:	bf00      	nop
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40003c00 	.word	0x40003c00
 8002ccc:	48000800 	.word	0x48000800

08002cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd2:	2214      	movs	r2, #20
{
 8002cd4:	b08a      	sub	sp, #40	; 0x28
 8002cd6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	2100      	movs	r1, #0
 8002cda:	eb0d 0002 	add.w	r0, sp, r2
 8002cde:	f000 f945 	bl	8002f6c <memset>
  if(huart->Instance==USART1)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_UART_MspInit+0xa0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d120      	bne.n	8002d2c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	4822      	ldr	r0, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cf4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002cfc:	9201      	str	r2, [sp, #4]
 8002cfe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d02:	f042 0202 	orr.w	r2, r2, #2
 8002d06:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1e:	2307      	movs	r3, #7
 8002d20:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d24:	f7fd fd24 	bl	8000770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d28:	b00a      	add	sp, #40	; 0x28
 8002d2a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <HAL_UART_MspInit+0xac>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d1fa      	bne.n	8002d28 <HAL_UART_MspInit+0x58>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_UART_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d34:	4812      	ldr	r0, [pc, #72]	; (8002d80 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002d3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d40:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002d44:	9203      	str	r2, [sp, #12]
 8002d46:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d68:	2307      	movs	r3, #7
 8002d6a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6c:	a905      	add	r1, sp, #20
 8002d6e:	e7d9      	b.n	8002d24 <HAL_UART_MspInit+0x54>
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40021000 	.word	0x40021000
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	40004800 	.word	0x40004800
 8002d80:	48000c00 	.word	0x48000c00

08002d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8a:	2214      	movs	r2, #20
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	a803      	add	r0, sp, #12
 8002d90:	f000 f8ec 	bl	8002f6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9a:	d13c      	bne.n	8002e16 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	4c20      	ldr	r4, [pc, #128]	; (8002e20 <HAL_PCD_MspInit+0x9c>)
 8002d9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002da6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002db0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002db2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002dba:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f7fd fcd8 	bl	8000770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002dc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002dc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dd4:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002dda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ddc:	f7fd fcc8 	bl	8000770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002de0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002de8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	d410      	bmi.n	8002e1a <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	9302      	str	r3, [sp, #8]
 8002e08:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8002e0a:	f7fd ff1b 	bl	8000c44 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e14:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e16:	b008      	add	sp, #32
 8002e18:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8002e1a:	f7fd ff13 	bl	8000c44 <HAL_PWREx_EnableVddUSB>
}
 8002e1e:	e7fa      	b.n	8002e16 <HAL_PCD_MspInit+0x92>
 8002e20:	40021000 	.word	0x40021000

08002e24 <NMI_Handler>:
 8002e24:	4770      	bx	lr

08002e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e26:	e7fe      	b.n	8002e26 <HardFault_Handler>

08002e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e28:	e7fe      	b.n	8002e28 <MemManage_Handler>

08002e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	e7fe      	b.n	8002e2c <UsageFault_Handler>

08002e2e <SVC_Handler>:
 8002e2e:	4770      	bx	lr

08002e30 <DebugMon_Handler>:
 8002e30:	4770      	bx	lr

08002e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e32:	4770      	bx	lr

08002e34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e34:	f7fd bb78 	b.w	8000528 <HAL_IncTick>

08002e38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e3a:	2020      	movs	r0, #32
 8002e3c:	f7fd fd7a 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e40:	2040      	movs	r0, #64	; 0x40
 8002e42:	f7fd fd77 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002e46:	2080      	movs	r0, #128	; 0x80
 8002e48:	f7fd fd74 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e54:	f7fd bd6e 	b.w	8000934 <HAL_GPIO_EXTI_IRQHandler>

08002e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002e5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e5e:	f7fd fd69 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002e62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e66:	f7fd fd65 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e6e:	f7fd fd61 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002e72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e76:	f7fd fd5d 	bl	8000934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e82:	f7fd bd57 	b.w	8000934 <HAL_GPIO_EXTI_IRQHandler>
	...

08002e88 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e88:	490f      	ldr	r1, [pc, #60]	; (8002ec8 <SystemInit+0x40>)
 8002e8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <SystemInit+0x44>)
 8002e98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e9a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002ea2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002eaa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002eae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002eb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002ebe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ec4:	608b      	str	r3, [r1, #8]
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ed6:	e003      	b.n	8002ee0 <LoopCopyDataInit>

08002ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ede:	3104      	adds	r1, #4

08002ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ee0:	480b      	ldr	r0, [pc, #44]	; (8002f10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ee8:	d3f6      	bcc.n	8002ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8002eea:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002eec:	e002      	b.n	8002ef4 <LoopFillZerobss>

08002eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ef0:	f842 3b04 	str.w	r3, [r2], #4

08002ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <LoopForever+0x16>)
	cmp	r2, r3
 8002ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ef8:	d3f9      	bcc.n	8002eee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002efa:	f7ff ffc5 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efe:	f000 f811 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f02:	f7ff fb33 	bl	800256c <main>

08002f06 <LoopForever>:

LoopForever:
    b LoopForever
 8002f06:	e7fe      	b.n	8002f06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f0c:	08003000 	.word	0x08003000
	ldr	r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f14:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002f18:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002f1c:	200006d4 	.word	0x200006d4

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>
	...

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	4e0d      	ldr	r6, [pc, #52]	; (8002f5c <__libc_init_array+0x38>)
 8002f28:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2a:	1ba4      	subs	r4, r4, r6
 8002f2c:	10a4      	asrs	r4, r4, #2
 8002f2e:	2500      	movs	r5, #0
 8002f30:	42a5      	cmp	r5, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	4e0b      	ldr	r6, [pc, #44]	; (8002f64 <__libc_init_array+0x40>)
 8002f36:	4c0c      	ldr	r4, [pc, #48]	; (8002f68 <__libc_init_array+0x44>)
 8002f38:	f000 f820 	bl	8002f7c <_init>
 8002f3c:	1ba4      	subs	r4, r4, r6
 8002f3e:	10a4      	asrs	r4, r4, #2
 8002f40:	2500      	movs	r5, #0
 8002f42:	42a5      	cmp	r5, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f4c:	4798      	blx	r3
 8002f4e:	3501      	adds	r5, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f56:	4798      	blx	r3
 8002f58:	3501      	adds	r5, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002ff8 	.word	0x08002ff8
 8002f60:	08002ff8 	.word	0x08002ff8
 8002f64:	08002ff8 	.word	0x08002ff8
 8002f68:	08002ffc 	.word	0x08002ffc

08002f6c <memset>:
 8002f6c:	4402      	add	r2, r0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d100      	bne.n	8002f76 <memset+0xa>
 8002f74:	4770      	bx	lr
 8002f76:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7a:	e7f9      	b.n	8002f70 <memset+0x4>

08002f7c <_init>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr

08002f88 <_fini>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr
