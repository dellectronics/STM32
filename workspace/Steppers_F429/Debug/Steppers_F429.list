
Steppers_F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000004c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004cc  200004cc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ac43  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000019cd  00000000  00000000  0002ac7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b00  00000000  00000000  0002c650  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a28  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000046af  00000000  00000000  0002db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000361c  00000000  00000000  00032227  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035843  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002de0  00000000  00000000  000358c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003024 	.word	0x08003024

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003024 	.word	0x08003024

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f92d 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f002 fbac 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f937 	bl	80007d2 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f90d 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000028 	.word	0x20000028

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	2201      	movs	r2, #1
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	401a      	ands	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000722:	2101      	movs	r1, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	1e59      	subs	r1, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff90 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff49 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5e 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e177      	b.n	8000af8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8166 	bne.w	8000af2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d003      	beq.n	8000836 <HAL_GPIO_Init+0x4a>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b12      	cmp	r3, #18
 8000834:	d123      	bne.n	800087e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	08da      	lsrs	r2, r3, #3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	220f      	movs	r2, #15
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4013      	ands	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	69b9      	ldr	r1, [r7, #24]
 800087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 0203 	and.w	r2, r3, #3
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d00b      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d007      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c6:	2b11      	cmp	r3, #17
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d130      	bne.n	8000934 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4013      	ands	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000908:	2201      	movs	r2, #1
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	091b      	lsrs	r3, r3, #4
 800091e:	f003 0201 	and.w	r2, r3, #1
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80c0 	beq.w	8000af2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000978:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <HAL_GPIO_Init+0x320>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b62      	ldr	r3, [pc, #392]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800098e:	4a60      	ldr	r2, [pc, #384]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a57      	ldr	r2, [pc, #348]	; (8000b14 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d037      	beq.n	8000a2a <HAL_GPIO_Init+0x23e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a56      	ldr	r2, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d031      	beq.n	8000a26 <HAL_GPIO_Init+0x23a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <HAL_GPIO_Init+0x330>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d02b      	beq.n	8000a22 <HAL_GPIO_Init+0x236>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <HAL_GPIO_Init+0x334>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x232>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a53      	ldr	r2, [pc, #332]	; (8000b24 <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x22e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x22a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x222>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x21e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x34c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x21a>
 8000a02:	2309      	movs	r3, #9
 8000a04:	e012      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a06:	230a      	movs	r3, #10
 8000a08:	e010      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00e      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a12:	2306      	movs	r3, #6
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae84 	bls.w	8000808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021c00 	.word	0x40021c00
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022400 	.word	0x40022400
 8000b3c:	40013c00 	.word	0x40013c00

08000b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b80:	787b      	ldrb	r3, [r7, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b8c:	e003      	b.n	8000b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	619a      	str	r2, [r3, #24]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba4:	b08f      	sub	sp, #60	; 0x3c
 8000ba6:	af0a      	add	r7, sp, #40	; 0x28
 8000ba8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e103      	b.n	8000dbc <HAL_PCD_Init+0x21a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f002 f917 	bl	8002dfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f9f7 	bl	8001fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	687e      	ldr	r6, [r7, #4]
 8000be8:	466d      	mov	r5, sp
 8000bea:	f106 0410 	add.w	r4, r6, #16
 8000bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfe:	1d33      	adds	r3, r6, #4
 8000c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f001 f982 	bl	8001f0c <USB_CoreInit>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2202      	movs	r2, #2
 8000c12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0d0      	b.n	8000dbc <HAL_PCD_Init+0x21a>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f9e5 	bl	8001ff0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e04a      	b.n	8000cc2 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	333d      	adds	r3, #61	; 0x3d
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	333c      	adds	r3, #60	; 0x3c
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	b298      	uxth	r0, r3
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	3342      	adds	r3, #66	; 0x42
 8000c68:	4602      	mov	r2, r0
 8000c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	440b      	add	r3, r1
 8000c7a:	333f      	adds	r3, #63	; 0x3f
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3344      	adds	r3, #68	; 0x44
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3348      	adds	r3, #72	; 0x48
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3350      	adds	r3, #80	; 0x50
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3af      	bcc.n	8000c2c <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e044      	b.n	8000d5c <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	1a9b      	subs	r3, r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3b5      	bcc.n	8000cd2 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	687e      	ldr	r6, [r7, #4]
 8000d6e:	466d      	mov	r5, sp
 8000d70:	f106 0410 	add.w	r4, r6, #16
 8000d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d84:	1d33      	adds	r3, r6, #4
 8000d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f001 f95b 	bl	8002044 <USB_DevInit>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e00d      	b.n	8000dbc <HAL_PCD_Init+0x21a>
  }

  hpcd->USB_Address = 0U;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fb19 	bl	80023ec <USB_DevDisconnect>

  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e22d      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d075      	beq.n	8000ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000de2:	4ba3      	ldr	r3, [pc, #652]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d00c      	beq.n	8000e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dee:	4ba0      	ldr	r3, [pc, #640]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d112      	bne.n	8000e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dfa:	4b9d      	ldr	r3, [pc, #628]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e06:	d10b      	bne.n	8000e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	4b99      	ldr	r3, [pc, #612]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d05b      	beq.n	8000ecc <HAL_RCC_OscConfig+0x108>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d157      	bne.n	8000ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e208      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d106      	bne.n	8000e38 <HAL_RCC_OscConfig+0x74>
 8000e2a:	4a91      	ldr	r2, [pc, #580]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e2c:	4b90      	ldr	r3, [pc, #576]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e01d      	b.n	8000e74 <HAL_RCC_OscConfig+0xb0>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x98>
 8000e42:	4a8b      	ldr	r2, [pc, #556]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	4b8a      	ldr	r3, [pc, #552]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4a88      	ldr	r2, [pc, #544]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	4b87      	ldr	r3, [pc, #540]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e00b      	b.n	8000e74 <HAL_RCC_OscConfig+0xb0>
 8000e5c:	4a84      	ldr	r2, [pc, #528]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e5e:	4b84      	ldr	r3, [pc, #528]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4a81      	ldr	r2, [pc, #516]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e6a:	4b81      	ldr	r3, [pc, #516]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fba4 	bl	80005c8 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e84:	f7ff fba0 	bl	80005c8 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e1cd      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	4b76      	ldr	r3, [pc, #472]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0xc0>
 8000ea2:	e014      	b.n	8000ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fb90 	bl	80005c8 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fb8c 	bl	80005c8 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e1b9      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebe:	4b6c      	ldr	r3, [pc, #432]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0xe8>
 8000eca:	e000      	b.n	8000ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d063      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eda:	4b65      	ldr	r3, [pc, #404]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee6:	4b62      	ldr	r3, [pc, #392]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d11c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ef2:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d116      	bne.n	8000f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_RCC_OscConfig+0x152>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d001      	beq.n	8000f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e18d      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	4956      	ldr	r1, [pc, #344]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f18:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	e03a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d020      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f34:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <HAL_RCC_OscConfig+0x2b0>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fb45 	bl	80005c8 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fb41 	bl	80005c8 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e16e      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4943      	ldr	r1, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f76:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_RCC_OscConfig+0x2b0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb24 	bl	80005c8 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f84:	f7ff fb20 	bl	80005c8 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e14d      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d030      	beq.n	8001010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d016      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_RCC_OscConfig+0x2b4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fb04 	bl	80005c8 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fb00 	bl	80005c8 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e12d      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x200>
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <HAL_RCC_OscConfig+0x2b4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fea:	f7ff faed 	bl	80005c8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fae9 	bl	80005c8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e116      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8001006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a0 	beq.w	800115e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10f      	bne.n	800104e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_RCC_OscConfig+0x2b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d121      	bne.n	800109e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_RCC_OscConfig+0x2b8>)
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_RCC_OscConfig+0x2b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001066:	f7ff faaf 	bl	80005c8 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	e011      	b.n	8001092 <HAL_RCC_OscConfig+0x2ce>
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	42470000 	.word	0x42470000
 8001078:	42470e80 	.word	0x42470e80
 800107c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001080:	f7ff faa2 	bl	80005c8 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e0cf      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001092:	4b6a      	ldr	r3, [pc, #424]	; (800123c <HAL_RCC_OscConfig+0x478>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d106      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2f0>
 80010a6:	4a66      	ldr	r2, [pc, #408]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6713      	str	r3, [r2, #112]	; 0x70
 80010b2:	e01c      	b.n	80010ee <HAL_RCC_OscConfig+0x32a>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d10c      	bne.n	80010d6 <HAL_RCC_OscConfig+0x312>
 80010bc:	4a60      	ldr	r2, [pc, #384]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010be:	4b60      	ldr	r3, [pc, #384]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6713      	str	r3, [r2, #112]	; 0x70
 80010c8:	4a5d      	ldr	r2, [pc, #372]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010ca:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6713      	str	r3, [r2, #112]	; 0x70
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0x32a>
 80010d6:	4a5a      	ldr	r2, [pc, #360]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6713      	str	r3, [r2, #112]	; 0x70
 80010e2:	4a57      	ldr	r2, [pc, #348]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80010e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010f6:	f7ff fa67 	bl	80005c8 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fa63 	bl	80005c8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e08e      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ee      	beq.n	80010fe <HAL_RCC_OscConfig+0x33a>
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fa51 	bl	80005c8 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fa4d 	bl	80005c8 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e078      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ee      	bne.n	800112a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d105      	bne.n	800115e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001152:	4a3b      	ldr	r2, [pc, #236]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d064      	beq.n	8001230 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b08      	cmp	r3, #8
 8001170:	d05c      	beq.n	800122c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d141      	bne.n	80011fe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCC_OscConfig+0x480>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fa22 	bl	80005c8 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff fa1e 	bl	80005c8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e04b      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011a6:	4926      	ldr	r1, [pc, #152]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69da      	ldr	r2, [r3, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	019b      	lsls	r3, r3, #6
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	3b01      	subs	r3, #1
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	061b      	lsls	r3, r3, #24
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_RCC_OscConfig+0x480>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff f9f7 	bl	80005c8 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff f9f3 	bl	80005c8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e020      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x41a>
 80011fc:	e018      	b.n	8001230 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_RCC_OscConfig+0x480>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff f9e0 	bl	80005c8 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120c:	f7ff f9dc 	bl	80005c8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e009      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_RCC_OscConfig+0x47c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x448>
 800122a:	e001      	b.n	8001230 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000
 8001240:	40023800 	.word	0x40023800
 8001244:	42470060 	.word	0x42470060

08001248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0ca      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 020f 	and.w	r2, r3, #15
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d20c      	bcs.n	8001284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b64      	ldr	r3, [pc, #400]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b62      	ldr	r3, [pc, #392]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 020f 	and.w	r2, r3, #15
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0b6      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129c:	4a58      	ldr	r2, [pc, #352]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b4:	4a52      	ldr	r2, [pc, #328]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	494f      	ldr	r1, [pc, #316]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d044      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d119      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e07d      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	2b03      	cmp	r3, #3
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06d      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e065      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4936      	ldr	r1, [pc, #216]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 0203 	bic.w	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff f946 	bl	80005c8 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff f942 	bl	80005c8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e04d      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 020f 	and.w	r2, r3, #15
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d90c      	bls.n	8001390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_ClockConfig+0x1b4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e030      	b.n	80013f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4918      	ldr	r1, [pc, #96]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ba:	4911      	ldr	r1, [pc, #68]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ce:	f000 f81d 	bl	800140c <HAL_RCC_GetSysClockFreq>
 80013d2:	4601      	mov	r1, r0
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1b8>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	fa21 f303 	lsr.w	r3, r1, r3
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 80013e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff f8a8 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00
 8001400:	40023800 	.word	0x40023800
 8001404:	0800304c 	.word	0x0800304c
 8001408:	20000008 	.word	0x20000008

0800140c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	b08f      	sub	sp, #60	; 0x3c
 8001412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b04      	cmp	r3, #4
 800142e:	d007      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x34>
 8001430:	2b08      	cmp	r3, #8
 8001432:	d008      	beq.n	8001446 <HAL_RCC_GetSysClockFreq+0x3a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 80b2 	bne.w	800159e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800143a:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800143e:	e0b1      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001440:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001444:	e0ae      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d04e      	beq.n	80014fa <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145c:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	099b      	lsrs	r3, r3, #6
 8001462:	f04f 0400 	mov.w	r4, #0
 8001466:	f240 11ff 	movw	r1, #511	; 0x1ff
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	ea01 0103 	and.w	r1, r1, r3
 8001472:	ea02 0204 	and.w	r2, r2, r4
 8001476:	460b      	mov	r3, r1
 8001478:	4614      	mov	r4, r2
 800147a:	0160      	lsls	r0, r4, #5
 800147c:	6278      	str	r0, [r7, #36]	; 0x24
 800147e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001480:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001484:	6278      	str	r0, [r7, #36]	; 0x24
 8001486:	015b      	lsls	r3, r3, #5
 8001488:	623b      	str	r3, [r7, #32]
 800148a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800148e:	1a5b      	subs	r3, r3, r1
 8001490:	eb64 0402 	sbc.w	r4, r4, r2
 8001494:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001498:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800149c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80014a0:	ebb8 0803 	subs.w	r8, r8, r3
 80014a4:	eb69 0904 	sbc.w	r9, r9, r4
 80014a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80014c0:	eb18 0801 	adds.w	r8, r8, r1
 80014c4:	eb49 0902 	adc.w	r9, r9, r2
 80014c8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80014e0:	4640      	mov	r0, r8
 80014e2:	4649      	mov	r1, r9
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4623      	mov	r3, r4
 80014ee:	f7fe fe7d 	bl	80001ec <__aeabi_uldivmod>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
 80014f8:	e043      	b.n	8001582 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	f04f 0400 	mov.w	r4, #0
 8001504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	ea01 0103 	and.w	r1, r1, r3
 8001510:	ea02 0204 	and.w	r2, r2, r4
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	0160      	lsls	r0, r4, #5
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800152c:	1a5b      	subs	r3, r3, r1
 800152e:	eb64 0402 	sbc.w	r4, r4, r2
 8001532:	01a6      	lsls	r6, r4, #6
 8001534:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001538:	019d      	lsls	r5, r3, #6
 800153a:	1aed      	subs	r5, r5, r3
 800153c:	eb66 0604 	sbc.w	r6, r6, r4
 8001540:	00f3      	lsls	r3, r6, #3
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	00eb      	lsls	r3, r5, #3
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001554:	186d      	adds	r5, r5, r1
 8001556:	eb46 0602 	adc.w	r6, r6, r2
 800155a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800155e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001562:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001566:	4655      	mov	r5, sl
 8001568:	465e      	mov	r6, fp
 800156a:	4628      	mov	r0, r5
 800156c:	4631      	mov	r1, r6
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	f7fe fe38 	bl	80001ec <__aeabi_uldivmod>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	0c1b      	lsrs	r3, r3, #16
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	3301      	adds	r3, #1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800159c:	e002      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	373c      	adds	r7, #60	; 0x3c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	00f42400 	.word	0x00f42400
 80015b8:	007a1200 	.word	0x007a1200

080015bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015d8:	f7ff fff0 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 80015dc:	4601      	mov	r1, r0
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	0a9b      	lsrs	r3, r3, #10
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	0800305c 	.word	0x0800305c

080015fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001600:	f7ff ffdc 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 8001604:	4601      	mov	r1, r0
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	0b5b      	lsrs	r3, r3, #13
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	4a03      	ldr	r2, [pc, #12]	; (8001620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	0800305c 	.word	0x0800305c

08001624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e055      	b.n	80016e2 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f001 fb43 	bl	8002cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6851      	ldr	r1, [r2, #4]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6892      	ldr	r2, [r2, #8]
 800167a:	4311      	orrs	r1, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	68d2      	ldr	r2, [r2, #12]
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6912      	ldr	r2, [r2, #16]
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6952      	ldr	r2, [r2, #20]
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6992      	ldr	r2, [r2, #24]
 8001692:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001696:	4311      	orrs	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	69d2      	ldr	r2, [r2, #28]
 800169c:	4311      	orrs	r1, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a12      	ldr	r2, [r2, #32]
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6992      	ldr	r2, [r2, #24]
 80016b4:	0c12      	lsrs	r2, r2, #16
 80016b6:	f002 0104 	and.w	r1, r2, #4
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	69d2      	ldr	r2, [r2, #28]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b088      	sub	sp, #32
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_SPI_Transmit+0x22>
 8001708:	2302      	movs	r3, #2
 800170a:	e11c      	b.n	8001946 <HAL_SPI_Transmit+0x25c>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001714:	f7fe ff58 	bl	80005c8 <HAL_GetTick>
 8001718:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800172e:	e101      	b.n	8001934 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_SPI_Transmit+0x52>
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001740:	e0f8      	b.n	8001934 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001788:	d107      	bne.n	800179a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001798:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a4:	2b40      	cmp	r3, #64	; 0x40
 80017a6:	d007      	beq.n	80017b8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c0:	d14b      	bne.n	800185a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_SPI_Transmit+0xe6>
 80017ca:	8afb      	ldrh	r3, [r7, #22]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d13e      	bne.n	800184e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d8:	8812      	ldrh	r2, [r2, #0]
 80017da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	1c9a      	adds	r2, r3, #2
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017f4:	e02b      	b.n	800184e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d112      	bne.n	800182a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	1c9a      	adds	r2, r3, #2
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	86da      	strh	r2, [r3, #54]	; 0x36
 8001828:	e011      	b.n	800184e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800182a:	f7fe fecd 	bl	80005c8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d303      	bcc.n	8001842 <HAL_SPI_Transmit+0x158>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d102      	bne.n	8001848 <HAL_SPI_Transmit+0x15e>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800184c:	e072      	b.n	8001934 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001852:	b29b      	uxth	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ce      	bne.n	80017f6 <HAL_SPI_Transmit+0x10c>
 8001858:	e04c      	b.n	80018f4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_SPI_Transmit+0x17e>
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d140      	bne.n	80018ea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	330c      	adds	r3, #12
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800188e:	e02c      	b.n	80018ea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b02      	cmp	r3, #2
 800189c:	d113      	bne.n	80018c6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330c      	adds	r3, #12
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80018c4:	e011      	b.n	80018ea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018c6:	f7fe fe7f 	bl	80005c8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad2      	subs	r2, r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d303      	bcc.n	80018de <HAL_SPI_Transmit+0x1f4>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d102      	bne.n	80018e4 <HAL_SPI_Transmit+0x1fa>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018e8:	e024      	b.n	8001934 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1cd      	bne.n	8001890 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f892 	bl	8001a22 <SPI_EndRxTxTransaction>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001944:	7ffb      	ldrb	r3, [r7, #31]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800195e:	e04c      	b.n	80019fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001966:	d048      	beq.n	80019fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001968:	f7fe fe2e 	bl	80005c8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad2      	subs	r2, r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d202      	bcs.n	800197e <SPI_WaitFlagStateUntilTimeout+0x30>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d13d      	bne.n	80019fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	6852      	ldr	r2, [r2, #4]
 8001988:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800198c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001996:	d111      	bne.n	80019bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a0:	d004      	beq.n	80019ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	d107      	bne.n	80019bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c4:	d10f      	bne.n	80019e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e00f      	b.n	8001a1a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	bf0c      	ite	eq
 8001a0a:	2301      	moveq	r3, #1
 8001a0c:	2300      	movne	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1a3      	bne.n	8001960 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af02      	add	r7, sp, #8
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ff88 	bl	800194e <SPI_WaitFlagStateUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0220 	orr.w	r2, r3, #32
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e000      	b.n	8001a56 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e03f      	b.n	8001af0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f001 f971 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2224      	movs	r2, #36	; 0x24
 8001a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	68d2      	ldr	r2, [r2, #12]
 8001a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f828 	bl	8001af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	6912      	ldr	r2, [r2, #16]
 8001ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	6952      	ldr	r2, [r2, #20]
 8001ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	6912      	ldr	r2, [r2, #16]
 8001b0a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68d2      	ldr	r2, [r2, #12]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001b3c:	f023 030c 	bic.w	r3, r3, #12
 8001b40:	68f9      	ldr	r1, [r7, #12]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	6952      	ldr	r2, [r2, #20]
 8001b50:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6992      	ldr	r2, [r2, #24]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b64:	f040 80e4 	bne.w	8001d30 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4aab      	ldr	r2, [pc, #684]	; (8001e1c <UART_SetConfig+0x324>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <UART_SetConfig+0x84>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4aaa      	ldr	r2, [pc, #680]	; (8001e20 <UART_SetConfig+0x328>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d16c      	bne.n	8001c56 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681c      	ldr	r4, [r3, #0]
 8001b80:	f7ff fd3c 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4aa2      	ldr	r2, [pc, #648]	; (8001e24 <UART_SetConfig+0x32c>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	011d      	lsls	r5, r3, #4
 8001ba4:	f7ff fd2a 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	009a      	lsls	r2, r3, #2
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fbb2 f6f3 	udiv	r6, r2, r3
 8001bbe:	f7ff fd1d 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009a      	lsls	r2, r3, #2
 8001bcc:	441a      	add	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <UART_SetConfig+0x32c>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2264      	movs	r2, #100	; 0x64
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	1af3      	subs	r3, r6, r3
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	3332      	adds	r3, #50	; 0x32
 8001bec:	4a8d      	ldr	r2, [pc, #564]	; (8001e24 <UART_SetConfig+0x32c>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bfa:	441d      	add	r5, r3
 8001bfc:	f7ff fcfe 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009a      	lsls	r2, r3, #2
 8001c0a:	441a      	add	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fbb2 f6f3 	udiv	r6, r2, r3
 8001c16:	f7ff fcf1 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009a      	lsls	r2, r3, #2
 8001c24:	441a      	add	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <UART_SetConfig+0x32c>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2264      	movs	r2, #100	; 0x64
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	1af3      	subs	r3, r6, r3
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	3332      	adds	r3, #50	; 0x32
 8001c44:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <UART_SetConfig+0x32c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	442b      	add	r3, r5
 8001c52:	60a3      	str	r3, [r4, #8]
 8001c54:	e154      	b.n	8001f00 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681c      	ldr	r4, [r3, #0]
 8001c5a:	f7ff fcbb 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009a      	lsls	r2, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	4a6b      	ldr	r2, [pc, #428]	; (8001e24 <UART_SetConfig+0x32c>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	011d      	lsls	r5, r3, #4
 8001c7e:	f7ff fca9 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	441a      	add	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fbb2 f6f3 	udiv	r6, r2, r3
 8001c98:	f7ff fc9c 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009a      	lsls	r2, r3, #2
 8001ca6:	441a      	add	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <UART_SetConfig+0x32c>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	2264      	movs	r2, #100	; 0x64
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	1af3      	subs	r3, r6, r3
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	3332      	adds	r3, #50	; 0x32
 8001cc6:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <UART_SetConfig+0x32c>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cd4:	441d      	add	r5, r3
 8001cd6:	f7ff fc7d 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009a      	lsls	r2, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8001cf0:	f7ff fc70 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009a      	lsls	r2, r3, #2
 8001cfe:	441a      	add	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <UART_SetConfig+0x32c>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	2264      	movs	r2, #100	; 0x64
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	1af3      	subs	r3, r6, r3
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	3332      	adds	r3, #50	; 0x32
 8001d1e:	4a41      	ldr	r2, [pc, #260]	; (8001e24 <UART_SetConfig+0x32c>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	442b      	add	r3, r5
 8001d2c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001d2e:	e0e7      	b.n	8001f00 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a39      	ldr	r2, [pc, #228]	; (8001e1c <UART_SetConfig+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <UART_SetConfig+0x24c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <UART_SetConfig+0x328>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d171      	bne.n	8001e28 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	f7ff fc58 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	009a      	lsls	r2, r3, #2
 8001d56:	441a      	add	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <UART_SetConfig+0x32c>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	011d      	lsls	r5, r3, #4
 8001d6c:	f7ff fc46 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009a      	lsls	r2, r3, #2
 8001d7a:	441a      	add	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fbb2 f6f3 	udiv	r6, r2, r3
 8001d86:	f7ff fc39 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009a      	lsls	r2, r3, #2
 8001d94:	441a      	add	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <UART_SetConfig+0x32c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2264      	movs	r2, #100	; 0x64
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	1af3      	subs	r3, r6, r3
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	3332      	adds	r3, #50	; 0x32
 8001db4:	4a1b      	ldr	r2, [pc, #108]	; (8001e24 <UART_SetConfig+0x32c>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc0:	441d      	add	r5, r3
 8001dc2:	f7ff fc1b 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8001ddc:	f7ff fc0e 	bl	80015fc <HAL_RCC_GetPCLK2Freq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <UART_SetConfig+0x32c>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	2264      	movs	r2, #100	; 0x64
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	1af3      	subs	r3, r6, r3
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	3332      	adds	r3, #50	; 0x32
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <UART_SetConfig+0x32c>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	442b      	add	r3, r5
 8001e18:	60a3      	str	r3, [r4, #8]
 8001e1a:	e071      	b.n	8001f00 <UART_SetConfig+0x408>
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40011400 	.word	0x40011400
 8001e24:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681c      	ldr	r4, [r3, #0]
 8001e2c:	f7ff fbd2 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	009a      	lsls	r2, r3, #2
 8001e3a:	441a      	add	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <UART_SetConfig+0x410>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	011d      	lsls	r5, r3, #4
 8001e50:	f7ff fbc0 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	441a      	add	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fbb2 f6f3 	udiv	r6, r2, r3
 8001e6a:	f7ff fbb3 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <UART_SetConfig+0x410>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2264      	movs	r2, #100	; 0x64
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	1af3      	subs	r3, r6, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	; 0x32
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <UART_SetConfig+0x410>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea4:	441d      	add	r5, r3
 8001ea6:	f7ff fb95 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8001ec0:	f7ff fb88 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	009a      	lsls	r2, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <UART_SetConfig+0x410>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	2264      	movs	r2, #100	; 0x64
 8001ee4:	fb02 f303 	mul.w	r3, r2, r3
 8001ee8:	1af3      	subs	r3, r6, r3
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	3332      	adds	r3, #50	; 0x32
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <UART_SetConfig+0x410>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	442b      	add	r3, r5
 8001efc:	60a3      	str	r3, [r4, #8]
}
 8001efe:	e7ff      	b.n	8001f00 <UART_SetConfig+0x408>
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f08:	51eb851f 	.word	0x51eb851f

08001f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	f107 001c 	add.w	r0, r7, #28
 8001f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d122      	bne.n	8001f6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8001f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d105      	bne.n	8001f5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa5e 	bl	8002420 <USB_CoreReset>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e01a      	b.n	8001fa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa52 	bl	8002420 <USB_CoreReset>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8001f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d106      	bne.n	8001f94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
 8001f92:	e005      	b.n	8001fa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10b      	bne.n	8001fbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f043 0206 	orr.w	r2, r3, #6
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f043 0220 	orr.w	r2, r3, #32
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fca:	b004      	add	sp, #16
 8001fcc:	4770      	bx	lr

08001fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0201 	bic.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e00b      	b.n	8002034 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	e001      	b.n	8002034 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e003      	b.n	800203c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002034:	2032      	movs	r0, #50	; 0x32
 8002036:	f7fe fad3 	bl	80005e0 <HAL_Delay>

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002044:	b084      	sub	sp, #16
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e009      	b.n	8002078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3340      	adds	r3, #64	; 0x40
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	3301      	adds	r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b0e      	cmp	r3, #14
 800207c:	d9f2      	bls.n	8002064 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d112      	bne.n	80020aa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
 80020a8:	e00b      	b.n	80020c2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10c      	bne.n	8002100 <USB_DevInit+0xbc>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <USB_DevInit+0xb2>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80020ec:	2100      	movs	r1, #0
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f962 	bl	80023b8 <USB_SetDevSpeed>
 80020f4:	e008      	b.n	8002108 <USB_DevInit+0xc4>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80020f6:	2101      	movs	r1, #1
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f95d 	bl	80023b8 <USB_SetDevSpeed>
 80020fe:	e003      	b.n	8002108 <USB_DevInit+0xc4>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002100:	2103      	movs	r1, #3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f958 	bl	80023b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002108:	2110      	movs	r1, #16
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f90c 	bl	8002328 <USB_FlushTxFifo>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <USB_DevInit+0xd6>
  {
    ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f92a 	bl	8002374 <USB_FlushRxFifo>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <USB_DevInit+0xe6>
  {
    ret = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002130:	461a      	mov	r2, r3
 8002132:	2300      	movs	r3, #0
 8002134:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213c:	461a      	mov	r2, r3
 800213e:	2300      	movs	r3, #0
 8002140:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	461a      	mov	r2, r3
 800214a:	2300      	movs	r3, #0
 800214c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e043      	b.n	80021dc <USB_DevInit+0x198>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800216a:	d118      	bne.n	800219e <USB_DevInit+0x15a>
    {
      if (i == 0U)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <USB_DevInit+0x144>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800217e:	461a      	mov	r2, r3
 8002180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e013      	b.n	80021b0 <USB_DevInit+0x16c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002194:	461a      	mov	r2, r3
 8002196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e008      	b.n	80021b0 <USB_DevInit+0x16c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	461a      	mov	r2, r3
 80021ac:	2300      	movs	r3, #0
 80021ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021bc:	461a      	mov	r2, r3
 80021be:	2300      	movs	r3, #0
 80021c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ce:	461a      	mov	r2, r3
 80021d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	3301      	adds	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8b7      	bhi.n	8002154 <USB_DevInit+0x110>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e043      	b.n	8002272 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002200:	d118      	bne.n	8002234 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	461a      	mov	r2, r3
 8002216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e013      	b.n	8002246 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e008      	b.n	8002246 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	461a      	mov	r2, r3
 8002254:	2300      	movs	r3, #0
 8002256:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800226a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3301      	adds	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	429a      	cmp	r2, r3
 8002278:	d8b7      	bhi.n	80021ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	2b01      	cmp	r3, #1
 8002294:	d112      	bne.n	80022bc <USB_DevInit+0x278>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800229c:	461a      	mov	r2, r3
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <USB_DevInit+0x2dc>)
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a8:	461a      	mov	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	f043 0303 	orr.w	r3, r3, #3
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80022c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <USB_DevInit+0x298>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f043 0210 	orr.w	r2, r3, #16
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <USB_DevInit+0x2e0>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f043 0208 	orr.w	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002310:	7dfb      	ldrb	r3, [r7, #23]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800231c:	b004      	add	sp, #16
 800231e:	4770      	bx	lr
 8002320:	00800100 	.word	0x00800100
 8002324:	803c3800 	.word	0x803c3800

08002328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <USB_FlushTxFifo+0x48>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e006      	b.n	8002362 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b20      	cmp	r3, #32
 800235e:	d0f0      	beq.n	8002342 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	00030d40 	.word	0x00030d40

08002374 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2210      	movs	r2, #16
 8002384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <USB_FlushRxFifo+0x40>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e006      	b.n	80023a6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d0f0      	beq.n	8002386 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	00030d40 	.word	0x00030d40

080023b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	4619      	mov	r1, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800240e:	2003      	movs	r0, #3
 8002410:	f7fe f8e6 	bl	80005e0 <HAL_Delay>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <USB_CoreReset+0x64>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e01b      	b.n	8002476 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	daf2      	bge.n	800242c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <USB_CoreReset+0x64>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d0f0      	beq.n	8002456 <USB_CoreReset+0x36>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	00030d40 	.word	0x00030d40

08002488 <L6470_nCS_High>:
#include <L6470_Driver.h>

extern SPI_HandleTypeDef hspi1;

void L6470_nCS_High(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800248c:	2201      	movs	r2, #1
 800248e:	2108      	movs	r1, #8
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <L6470_nCS_High+0x14>)
 8002492:	f7fe fb6d 	bl	8000b70 <HAL_GPIO_WritePin>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40020800 	.word	0x40020800

080024a0 <L6470_nCS_Low>:

void L6470_nCS_Low(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2108      	movs	r1, #8
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <L6470_nCS_Low+0x14>)
 80024aa:	f7fe fb61 	bl	8000b70 <HAL_GPIO_WritePin>
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40020800 	.word	0x40020800

080024b8 <L6470_SetParam>:

uint8_t L6470_SetParam(uint8_t param, uint8_t *pData, uint8_t length, uint8_t driverPos)
{
 80024b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	b088      	sub	sp, #32
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	460b      	mov	r3, r1
 80024cc:	71bb      	strb	r3, [r7, #6]
 80024ce:	4613      	mov	r3, r2
 80024d0:	717b      	strb	r3, [r7, #5]
 80024d2:	466b      	mov	r3, sp
 80024d4:	469a      	mov	sl, r3
	uint8_t txData[numberOfDrivers * (length + 1)];
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	3301      	adds	r3, #1
 80024da:	005e      	lsls	r6, r3, #1
 80024dc:	1e73      	subs	r3, r6, #1
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	4633      	mov	r3, r6
 80024e2:	461a      	mov	r2, r3
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80024ec:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80024f0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80024f4:	4633      	mov	r3, r6
 80024f6:	461a      	mov	r2, r3
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	00dd      	lsls	r5, r3, #3
 80024fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002502:	00d4      	lsls	r4, r2, #3
 8002504:	4633      	mov	r3, r6
 8002506:	3307      	adds	r3, #7
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	ebad 0d03 	sub.w	sp, sp, r3
 8002510:	466b      	mov	r3, sp
 8002512:	3300      	adds	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
	uint8_t offset;

	for (int var = 0; var < sizeof(txData); ++var)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e007      	b.n	800252c <L6470_SetParam+0x74>
	{
		txData[var] = 0;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < sizeof(txData); ++var)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3301      	adds	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	4632      	mov	r2, r6
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	429a      	cmp	r2, r3
 8002532:	d8f3      	bhi.n	800251c <L6470_SetParam+0x64>
	}

	if (length > 3)
 8002534:	79bb      	ldrb	r3, [r7, #6]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d901      	bls.n	800253e <L6470_SetParam+0x86>
	{
		return L6470_ERROR;
 800253a:	2300      	movs	r3, #0
 800253c:	e036      	b.n	80025ac <L6470_SetParam+0xf4>
	}
	else
	{
		offset = numberOfDrivers - driverPos;
 800253e:	797b      	ldrb	r3, [r7, #5]
 8002540:	f1c3 0302 	rsb	r3, r3, #2
 8002544:	72fb      	strb	r3, [r7, #11]
		txData[offset] = param;
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	79f9      	ldrb	r1, [r7, #7]
 800254c:	54d1      	strb	r1, [r2, r3]
		for (int i = offset + numberOfDrivers; i <= (length * numberOfDrivers) + 1; i += numberOfDrivers)
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e00c      	b.n	8002570 <L6470_SetParam+0xb8>
		{
			txData[i] = *pData;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7819      	ldrb	r1, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	460a      	mov	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
			++pData;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	603b      	str	r3, [r7, #0]
		for (int i = offset + numberOfDrivers; i <= (length * numberOfDrivers) + 1; i += numberOfDrivers)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3302      	adds	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	79bb      	ldrb	r3, [r7, #6]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	daec      	bge.n	8002556 <L6470_SetParam+0x9e>
		// 		txData[i+2] = *pData;
		// 		++pData;
		// 	}
		// }

		for (int i = 0; i <= sizeof(txData) / numberOfDrivers; i += numberOfDrivers)
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	e00e      	b.n	80025a0 <L6470_SetParam+0xe8>
		{

			L6470_nCS_Low();
 8002582:	f7ff ff8d 	bl	80024a0 <L6470_nCS_Low>
			HAL_SPI_Transmit(SPI_PORT, &txData[i], numberOfDrivers, 100);
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	18d1      	adds	r1, r2, r3
 800258c:	2364      	movs	r3, #100	; 0x64
 800258e:	2202      	movs	r2, #2
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <L6470_SetParam+0x100>)
 8002592:	f7ff f8aa 	bl	80016ea <HAL_SPI_Transmit>
			L6470_nCS_High();
 8002596:	f7ff ff77 	bl	8002488 <L6470_nCS_High>
		for (int i = 0; i <= sizeof(txData) / numberOfDrivers; i += numberOfDrivers)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3302      	adds	r3, #2
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	4633      	mov	r3, r6
 80025a2:	085a      	lsrs	r2, r3, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d2eb      	bcs.n	8002582 <L6470_SetParam+0xca>

		}

		return L6470_OK;
 80025aa:	2301      	movs	r3, #1
 80025ac:	46d5      	mov	sp, sl
	}

}	// L6470_SetParam
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b8:	20000474 	.word	0x20000474

080025bc <L6470_Run>:
	uint8_t rxData[4];

}

void L6470_Run(uint32_t speed, uint8_t dir, uint8_t driverPos)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
 80025c8:	4613      	mov	r3, r2
 80025ca:	70bb      	strb	r3, [r7, #2]
	uint8_t txData[4 * numberOfDrivers];
	uint8_t speedArray[3];
	uint8_t offset, a = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int var = 0; var < sizeof(txData); ++var)
 80025d2:	2300      	movs	r3, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	e008      	b.n	80025ea <L6470_Run+0x2e>
	{
		txData[var] = 0;
 80025d8:	f107 0210 	add.w	r2, r7, #16
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	4413      	add	r3, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < sizeof(txData); ++var)
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	3301      	adds	r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	2b07      	cmp	r3, #7
 80025ee:	d9f3      	bls.n	80025d8 <L6470_Run+0x1c>
	}

	offset = numberOfDrivers - driverPos;
 80025f0:	78bb      	ldrb	r3, [r7, #2]
 80025f2:	f1c3 0302 	rsb	r3, r3, #2
 80025f6:	76fb      	strb	r3, [r7, #27]

	for (int i = 2; i >= 0; --i)
 80025f8:	2302      	movs	r3, #2
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e00d      	b.n	800261a <L6470_Run+0x5e>
	{
		speedArray[i] = (uint8_t) (speed & 0x000000FF);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	b2d9      	uxtb	r1, r3
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	4413      	add	r3, r2
 800260a:	460a      	mov	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
		speed = speed >> 8;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	607b      	str	r3, [r7, #4]
	for (int i = 2; i >= 0; --i)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	3b01      	subs	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	daee      	bge.n	80025fe <L6470_Run+0x42>
	}

	txData[offset] = 0x50 | dir;
 8002620:	7efb      	ldrb	r3, [r7, #27]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800262e:	440b      	add	r3, r1
 8002630:	f803 2c20 	strb.w	r2, [r3, #-32]

	for (int i = offset + numberOfDrivers; i <= (4 * numberOfDrivers) + 1; i += numberOfDrivers)
 8002634:	7efb      	ldrb	r3, [r7, #27]
 8002636:	3302      	adds	r3, #2
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	e014      	b.n	8002666 <L6470_Run+0xaa>
	{
		txData[i] = speedArray[a];
 800263c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002640:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002644:	4413      	add	r3, r2
 8002646:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800264a:	f107 0210 	add.w	r2, r7, #16
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	4413      	add	r3, r2
 8002652:	460a      	mov	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
		++a;
 8002656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800265a:	3301      	adds	r3, #1
 800265c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (int i = offset + numberOfDrivers; i <= (4 * numberOfDrivers) + 1; i += numberOfDrivers)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	3302      	adds	r3, #2
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b09      	cmp	r3, #9
 800266a:	dde7      	ble.n	800263c <L6470_Run+0x80>
	}

	for (int i = 0; i <= sizeof(txData) / numberOfDrivers; i += numberOfDrivers)
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e00f      	b.n	8002692 <L6470_Run+0xd6>
	{

		L6470_nCS_Low();
 8002672:	f7ff ff15 	bl	80024a0 <L6470_nCS_Low>
		HAL_SPI_Transmit(SPI_PORT, &txData[i], numberOfDrivers, 100);
 8002676:	f107 0210 	add.w	r2, r7, #16
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	18d1      	adds	r1, r2, r3
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	2202      	movs	r2, #2
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <L6470_Run+0xe4>)
 8002684:	f7ff f831 	bl	80016ea <HAL_SPI_Transmit>
		L6470_nCS_High();
 8002688:	f7ff fefe 	bl	8002488 <L6470_nCS_High>
	for (int i = 0; i <= sizeof(txData) / numberOfDrivers; i += numberOfDrivers)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3302      	adds	r3, #2
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d9ec      	bls.n	8002672 <L6470_Run+0xb6>

	}

}
 8002698:	bf00      	nop
 800269a:	3730      	adds	r7, #48	; 0x30
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000474 	.word	0x20000474

080026a4 <L6470_nBUSY>:
	a = HAL_GPIO_ReadPin(nFLAG_GPIO_Port, nFLAG_Pin);
	return a;
}

uint16_t L6470_nBUSY(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	uint16_t a;
	a = HAL_GPIO_ReadPin(nBUSY_GPIO_Port, nBUSY_Pin);
 80026aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <L6470_nBUSY+0x20>)
 80026b0:	f7fe fa46 	bl	8000b40 <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	80fb      	strh	r3, [r7, #6]
	return a;
 80026b8:	88fb      	ldrh	r3, [r7, #6]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40021400 	.word	0x40021400

080026c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint16_t nFLAG, nBUSY;
	uint8_t msg1[2] =
 80026ce:	4b40      	ldr	r3, [pc, #256]	; (80027d0 <main+0x108>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	833b      	strh	r3, [r7, #24]
	{ 0x40, 0x40 };
	uint8_t msg2[2] =
 80026d4:	2300      	movs	r3, #0
 80026d6:	753b      	strb	r3, [r7, #20]
 80026d8:	2300      	movs	r3, #0
 80026da:	757b      	strb	r3, [r7, #21]
	{ 0x00, 0x00 };
	uint8_t msg3[2] =
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <main+0x10c>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	823b      	strh	r3, [r7, #16]
	{ 0x05, 0x50 };
	uint8_t msg4[2] =
 80026e2:	2300      	movs	r3, #0
 80026e4:	733b      	strb	r3, [r7, #12]
 80026e6:	2350      	movs	r3, #80	; 0x50
 80026e8:	737b      	strb	r3, [r7, #13]
	{ 0x00, 0x50 };
	uint8_t msg5[2] =
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <main+0x110>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	813b      	strh	r3, [r7, #8]
	{ 0x41, 0x41 };
	uint8_t max_speed[3] = {0x01, 0xFF, 0xFF};
 80026f0:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <main+0x114>)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	4611      	mov	r1, r2
 80026f8:	8019      	strh	r1, [r3, #0]
 80026fa:	3302      	adds	r3, #2
 80026fc:	0c12      	lsrs	r2, r2, #16
 80026fe:	701a      	strb	r2, [r3, #0]
	uint8_t setMode = 0x02;
 8002700:	2302      	movs	r3, #2
 8002702:	70fb      	strb	r3, [r7, #3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002704:	f7fd fefa 	bl	80004fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002708:	f000 f86e 	bl	80027e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800270c:	f000 f964 	bl	80029d8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002710:	f000 f8d4 	bl	80028bc <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8002714:	f000 f908 	bl	8002928 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8002718:	f000 f930 	bl	800297c <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	2108      	movs	r1, #8
 8002720:	482f      	ldr	r0, [pc, #188]	; (80027e0 <main+0x118>)
 8002722:	f7fe fa25 	bl	8000b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nRST_GPIO_Port, nRST_Pin, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272c:	482d      	ldr	r0, [pc, #180]	; (80027e4 <main+0x11c>)
 800272e:	f7fe fa1f 	bl	8000b70 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002732:	200a      	movs	r0, #10
 8002734:	f7fd ff54 	bl	80005e0 <HAL_Delay>
	HAL_GPIO_WritePin(nRST_GPIO_Port, nRST_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800273e:	4829      	ldr	r0, [pc, #164]	; (80027e4 <main+0x11c>)
 8002740:	f7fe fa16 	bl	8000b70 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002744:	200a      	movs	r0, #10
 8002746:	f7fd ff4b 	bl	80005e0 <HAL_Delay>

	L6470_SetParam(STEP_MODE, &setMode, 1, 2);
 800274a:	1cf9      	adds	r1, r7, #3
 800274c:	2302      	movs	r3, #2
 800274e:	2201      	movs	r2, #1
 8002750:	2016      	movs	r0, #22
 8002752:	f7ff feb1 	bl	80024b8 <L6470_SetParam>
	L6470_SetParam(STEP_MODE, (uint8_t*) 0x00, 1, 1);
 8002756:	2301      	movs	r3, #1
 8002758:	2201      	movs	r2, #1
 800275a:	2100      	movs	r1, #0
 800275c:	2016      	movs	r0, #22
 800275e:	f7ff feab 	bl	80024b8 <L6470_SetParam>
	L6470_SetParam(MAX_SPEED, &max_speed[0], 3, 1);
 8002762:	1d39      	adds	r1, r7, #4
 8002764:	2301      	movs	r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	2007      	movs	r0, #7
 800276a:	f7ff fea5 	bl	80024b8 <L6470_SetParam>
	L6470_SetParam(MAX_SPEED, &max_speed[0] , 3, 2);
 800276e:	1d39      	adds	r1, r7, #4
 8002770:	2302      	movs	r3, #2
 8002772:	2203      	movs	r2, #3
 8002774:	2007      	movs	r0, #7
 8002776:	f7ff fe9f 	bl	80024b8 <L6470_SetParam>
	{

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		nFLAG = HAL_GPIO_ReadPin(nFLAG_GPIO_Port, nFLAG_Pin);
 800277a:	2120      	movs	r1, #32
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <main+0x11c>)
 800277e:	f7fe f9df 	bl	8000b40 <HAL_GPIO_ReadPin>
 8002782:	4603      	mov	r3, r0
 8002784:	83fb      	strh	r3, [r7, #30]
		nBUSY = L6470_nBUSY();
 8002786:	f7ff ff8d 	bl	80026a4 <L6470_nBUSY>
 800278a:	4603      	mov	r3, r0
 800278c:	83bb      	strh	r3, [r7, #28]
		L6470_Run(5000, FORWARD, 1);
 800278e:	2201      	movs	r2, #1
 8002790:	2101      	movs	r1, #1
 8002792:	f241 3088 	movw	r0, #5000	; 0x1388
 8002796:	f7ff ff11 	bl	80025bc <L6470_Run>
		L6470_Run(1000, FORWARD, 2);
 800279a:	2202      	movs	r2, #2
 800279c:	2101      	movs	r1, #1
 800279e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a2:	f7ff ff0b 	bl	80025bc <L6470_Run>
		HAL_Delay(5000);
 80027a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80027aa:	f7fd ff19 	bl	80005e0 <HAL_Delay>
		L6470_Run(2000, REVERSE, 1);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2100      	movs	r1, #0
 80027b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027b6:	f7ff ff01 	bl	80025bc <L6470_Run>
		L6470_Run(5000, REVERSE, 2);
 80027ba:	2202      	movs	r2, #2
 80027bc:	2100      	movs	r1, #0
 80027be:	f241 3088 	movw	r0, #5000	; 0x1388
 80027c2:	f7ff fefb 	bl	80025bc <L6470_Run>

		HAL_Delay(5000);
 80027c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80027ca:	f7fd ff09 	bl	80005e0 <HAL_Delay>
		nFLAG = HAL_GPIO_ReadPin(nFLAG_GPIO_Port, nFLAG_Pin);
 80027ce:	e7d4      	b.n	800277a <main+0xb2>
 80027d0:	0800303c 	.word	0x0800303c
 80027d4:	08003040 	.word	0x08003040
 80027d8:	08003044 	.word	0x08003044
 80027dc:	08003048 	.word	0x08003048
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40021400 	.word	0x40021400

080027e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	; 0x50
 80027ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80027ee:	f107 0320 	add.w	r3, r7, #32
 80027f2:	2230      	movs	r2, #48	; 0x30
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fc0c 	bl	8003014 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <SystemClock_Config+0xcc>)
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <SystemClock_Config+0xcc>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	; 0x40
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <SystemClock_Config+0xcc>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <SystemClock_Config+0xd0>)
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <SystemClock_Config+0xd0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <SystemClock_Config+0xd0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002844:	2301      	movs	r3, #1
 8002846:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002848:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284e:	2302      	movs	r3, #2
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002858:	2304      	movs	r3, #4
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800285c:	23a8      	movs	r3, #168	; 0xa8
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002860:	2302      	movs	r3, #2
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002864:	2307      	movs	r3, #7
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002868:	f107 0320 	add.w	r3, r7, #32
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe faa9 	bl	8000dc4 <HAL_RCC_OscConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002878:	f000 fa00 	bl	8002c7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800287c:	230f      	movs	r3, #15
 800287e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002880:	2302      	movs	r3, #2
 8002882:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800288c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800288e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002892:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2105      	movs	r1, #5
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fcd4 	bl	8001248 <HAL_RCC_ClockConfig>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80028a6:	f000 f9e9 	bl	8002c7c <Error_Handler>
	}
}
 80028aa:	bf00      	nop
 80028ac:	3750      	adds	r7, #80	; 0x50
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40007000 	.word	0x40007000

080028bc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_SPI1_Init+0x64>)
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <MX_SPI1_Init+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_SPI1_Init+0x64>)
 80028c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028cc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_SPI1_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_SPI1_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_SPI1_Init+0x64>)
 80028dc:	2202      	movs	r2, #2
 80028de:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_SPI1_Init+0x64>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_SPI1_Init+0x64>)
 80028e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_SPI1_Init+0x64>)
 80028f0:	2220      	movs	r2, #32
 80028f2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <MX_SPI1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_SPI1_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <MX_SPI1_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_SPI1_Init+0x64>)
 8002908:	220a      	movs	r2, #10
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_SPI1_Init+0x64>)
 800290e:	f7fe fe89 	bl	8001624 <HAL_SPI_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002918:	f000 f9b0 	bl	8002c7c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000474 	.word	0x20000474
 8002924:	40013000 	.word	0x40013000

08002928 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <MX_USART3_UART_Init+0x50>)
 8002930:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 8002934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002938:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 800294e:	220c      	movs	r2, #12
 8002950:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800295e:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_USART3_UART_Init+0x4c>)
 8002960:	f7ff f87d 	bl	8001a5e <HAL_UART_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800296a:	f000 f987 	bl	8002c7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000002c 	.word	0x2000002c
 8002978:	40004800 	.word	0x40004800

0800297c <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002982:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002986:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800298a:	2204      	movs	r2, #4
 800298c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002990:	2202      	movs	r2, #2
 8002992:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800299c:	2202      	movs	r2, #2
 800299e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029c0:	f7fe f8ef 	bl	8000ba2 <HAL_PCD_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 80029ca:	f000 f957 	bl	8002c7c <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000006c 	.word	0x2000006c

080029d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	4a9b      	ldr	r2, [pc, #620]	; (8002c60 <MX_GPIO_Init+0x288>)
 80029f4:	4b9a      	ldr	r3, [pc, #616]	; (8002c60 <MX_GPIO_Init+0x288>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b98      	ldr	r3, [pc, #608]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	4a94      	ldr	r2, [pc, #592]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a10:	4b93      	ldr	r3, [pc, #588]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	4a8d      	ldr	r2, [pc, #564]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4a86      	ldr	r2, [pc, #536]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a48:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	4a7f      	ldr	r2, [pc, #508]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4a78      	ldr	r2, [pc, #480]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a80:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4a71      	ldr	r2, [pc, #452]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b6e      	ldr	r3, [pc, #440]	; (8002c60 <MX_GPIO_Init+0x288>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(nBUSY_GPIO_Port, nBUSY_Pin, GPIO_PIN_RESET);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab8:	486a      	ldr	r0, [pc, #424]	; (8002c64 <MX_GPIO_Init+0x28c>)
 8002aba:	f7fe f859 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	4869      	ldr	r0, [pc, #420]	; (8002c68 <MX_GPIO_Init+0x290>)
 8002ac4:	f7fe f854 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(nRST_GPIO_Port, nRST_Pin, GPIO_PIN_SET);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ace:	4865      	ldr	r0, [pc, #404]	; (8002c64 <MX_GPIO_Init+0x28c>)
 8002ad0:	f7fe f84e 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002ada:	4864      	ldr	r0, [pc, #400]	; (8002c6c <MX_GPIO_Init+0x294>)
 8002adc:	f7fe f848 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	4862      	ldr	r0, [pc, #392]	; (8002c70 <MX_GPIO_Init+0x298>)
 8002ae6:	f7fe f843 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002aea:	2200      	movs	r2, #0
 8002aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002af0:	485d      	ldr	r0, [pc, #372]	; (8002c68 <MX_GPIO_Init+0x290>)
 8002af2:	f7fe f83d 	bl	8000b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002afa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002afc:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <MX_GPIO_Init+0x29c>)
 8002afe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4857      	ldr	r0, [pc, #348]	; (8002c68 <MX_GPIO_Init+0x290>)
 8002b0c:	f7fd fe6e 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : nFLAG_Pin */
	GPIO_InitStruct.Pin = nFLAG_Pin;
 8002b10:	2320      	movs	r3, #32
 8002b12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(nFLAG_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	4850      	ldr	r0, [pc, #320]	; (8002c64 <MX_GPIO_Init+0x28c>)
 8002b24:	f7fd fe62 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : nBUSY_Pin */
	GPIO_InitStruct.Pin = nBUSY_Pin;
 8002b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(nBUSY_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4848      	ldr	r0, [pc, #288]	; (8002c64 <MX_GPIO_Init+0x28c>)
 8002b42:	f7fd fe53 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8002b46:	2332      	movs	r3, #50	; 0x32
 8002b48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b56:	230b      	movs	r3, #11
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4841      	ldr	r0, [pc, #260]	; (8002c68 <MX_GPIO_Init+0x290>)
 8002b62:	f7fd fe43 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_CS_Pin LD1_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin | LD1_Pin;
 8002b66:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	483a      	ldr	r0, [pc, #232]	; (8002c68 <MX_GPIO_Init+0x290>)
 8002b80:	f7fd fe34 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 8002b84:	2306      	movs	r3, #6
 8002b86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b94:	230b      	movs	r3, #11
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4836      	ldr	r0, [pc, #216]	; (8002c78 <MX_GPIO_Init+0x2a0>)
 8002ba0:	f7fd fe24 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : nRST_Pin */
	GPIO_InitStruct.Pin = nRST_Pin;
 8002ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4829      	ldr	r0, [pc, #164]	; (8002c64 <MX_GPIO_Init+0x28c>)
 8002bbe:	f7fd fe15 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bc6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bd4:	230b      	movs	r3, #11
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4823      	ldr	r0, [pc, #140]	; (8002c6c <MX_GPIO_Init+0x294>)
 8002be0:	f7fd fe04 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8002be4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002be8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 031c 	add.w	r3, r7, #28
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	481b      	ldr	r0, [pc, #108]	; (8002c6c <MX_GPIO_Init+0x294>)
 8002bfe:	f7fd fdf5 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c02:	2340      	movs	r3, #64	; 0x40
 8002c04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <MX_GPIO_Init+0x298>)
 8002c1a:	f7fd fde7 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c2a:	f107 031c 	add.w	r3, r7, #28
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480f      	ldr	r0, [pc, #60]	; (8002c70 <MX_GPIO_Init+0x298>)
 8002c32:	f7fd fddb 	bl	80007ec <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8002c36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c44:	2303      	movs	r3, #3
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c48:	230b      	movs	r3, #11
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4807      	ldr	r0, [pc, #28]	; (8002c70 <MX_GPIO_Init+0x298>)
 8002c54:	f7fd fdca 	bl	80007ec <HAL_GPIO_Init>

}
 8002c58:	bf00      	nop
 8002c5a:	3730      	adds	r7, #48	; 0x30
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	10110000 	.word	0x10110000
 8002c78:	40020000 	.word	0x40020000

08002c7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_MspInit+0x4c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12b      	bne.n	8002d56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_SPI_MspInit+0x88>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d36:	23e0      	movs	r3, #224	; 0xe0
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d46:	2305      	movs	r3, #5
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4805      	ldr	r0, [pc, #20]	; (8002d68 <HAL_SPI_MspInit+0x8c>)
 8002d52:	f7fd fd4b 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	; 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013000 	.word	0x40013000
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000

08002d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0x84>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d12c      	bne.n	8002de8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_UART_MspInit+0x88>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002dc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_UART_MspInit+0x8c>)
 8002de4:	f7fd fd02 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40004800 	.word	0x40004800
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020c00 	.word	0x40020c00

08002dfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d13f      	bne.n	8002e9e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e4c:	230a      	movs	r3, #10
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <HAL_PCD_MspInit+0xb0>)
 8002e58:	f7fd fcc8 	bl	80007ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480e      	ldr	r0, [pc, #56]	; (8002eac <HAL_PCD_MspInit+0xb0>)
 8002e72:	f7fd fcbb 	bl	80007ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	6353      	str	r3, [r2, #52]	; 0x34
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_PCD_MspInit+0xac>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e9e:	bf00      	nop
 8002ea0:	3728      	adds	r7, #40	; 0x28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020000 	.word	0x40020000

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f7fd fb4c 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <SystemInit+0x60>)
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <SystemInit+0x60>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <SystemInit+0x64>)
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <SystemInit+0x64>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <SystemInit+0x64>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <SystemInit+0x64>)
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <SystemInit+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <SystemInit+0x64>)
 8002f44:	4a0b      	ldr	r2, [pc, #44]	; (8002f74 <SystemInit+0x68>)
 8002f46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <SystemInit+0x64>)
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <SystemInit+0x64>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <SystemInit+0x64>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <SystemInit+0x60>)
 8002f5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f60:	609a      	str	r2, [r3, #8]
#endif
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	40023800 	.word	0x40023800
 8002f74:	24003010 	.word	0x24003010

08002f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f7e:	e003      	b.n	8002f88 <LoopCopyDataInit>

08002f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f86:	3104      	adds	r1, #4

08002f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f90:	d3f6      	bcc.n	8002f80 <CopyDataInit>
  ldr  r2, =_sbss
 8002f92:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f94:	e002      	b.n	8002f9c <LoopFillZerobss>

08002f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f98:	f842 3b04 	str.w	r3, [r2], #4

08002f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fa0:	d3f9      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fa2:	f7ff ffb3 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f000 f811 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002faa:	f7ff fb8d 	bl	80026c8 <main>
  bx  lr    
 8002fae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002fb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002fb4:	08003074 	.word	0x08003074
  ldr  r0, =_sdata
 8002fb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fbc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002fc0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002fc4:	200004cc 	.word	0x200004cc

08002fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc8:	e7fe      	b.n	8002fc8 <ADC_IRQHandler>
	...

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4e0d      	ldr	r6, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1ba4      	subs	r4, r4, r6
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2500      	movs	r5, #0
 8002fd8:	42a5      	cmp	r5, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4e0b      	ldr	r6, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f000 f820 	bl	8003024 <_init>
 8002fe4:	1ba4      	subs	r4, r4, r6
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2500      	movs	r5, #0
 8002fea:	42a5      	cmp	r5, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff4:	4798      	blx	r3
 8002ff6:	3501      	adds	r5, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffe:	4798      	blx	r3
 8003000:	3501      	adds	r5, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	0800306c 	.word	0x0800306c
 8003008:	0800306c 	.word	0x0800306c
 800300c:	0800306c 	.word	0x0800306c
 8003010:	08003070 	.word	0x08003070

08003014 <memset>:
 8003014:	4402      	add	r2, r0
 8003016:	4603      	mov	r3, r0
 8003018:	4293      	cmp	r3, r2
 800301a:	d100      	bne.n	800301e <memset+0xa>
 800301c:	4770      	bx	lr
 800301e:	f803 1b01 	strb.w	r1, [r3], #1
 8003022:	e7f9      	b.n	8003018 <memset+0x4>

08003024 <_init>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr

08003030 <_fini>:
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	bf00      	nop
 8003034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003036:	bc08      	pop	{r3}
 8003038:	469e      	mov	lr, r3
 800303a:	4770      	bx	lr
